{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":84896,"databundleVersionId":10305135,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Regression","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nfrom sklearn.impute import KNNImputer\n# from sklearn.preprocessing import \n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-03T09:08:59.067410Z","iopub.execute_input":"2024-12-03T09:08:59.067913Z","iopub.status.idle":"2024-12-03T09:08:59.884739Z","shell.execute_reply.started":"2024-12-03T09:08:59.067873Z","shell.execute_reply":"2024-12-03T09:08:59.883542Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e12/sample_submission.csv\n/kaggle/input/playground-series-s4e12/train.csv\n/kaggle/input/playground-series-s4e12/test.csv\n","output_type":"stream"}],"execution_count":27},{"cell_type":"markdown","source":"Importing training data","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv(r\"/kaggle/input/playground-series-s4e12/train.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T08:44:14.667110Z","iopub.execute_input":"2024-12-03T08:44:14.668475Z","iopub.status.idle":"2024-12-03T08:44:20.970891Z","shell.execute_reply.started":"2024-12-03T08:44:14.668421Z","shell.execute_reply":"2024-12-03T08:44:20.969540Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# Data cleaning","metadata":{}},{"cell_type":"markdown","source":"### Handling null values","metadata":{}},{"cell_type":"code","source":"print(\"Null values with suitable columns are as follows: \\n\")\nrows = train_df.shape[0]\n\nfor column in train_df.columns:\n    null_values = train_df[column].isnull().sum()\n    if null_values > 0:\n        percentage = round((null_values/rows)*100, 1)\n        print(f\"{column:<20}: {null_values:^10}: {percentage}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T08:59:52.222294Z","iopub.execute_input":"2024-12-03T08:59:52.222878Z","iopub.status.idle":"2024-12-03T08:59:52.845404Z","shell.execute_reply.started":"2024-12-03T08:59:52.222833Z","shell.execute_reply":"2024-12-03T08:59:52.844217Z"}},"outputs":[{"name":"stdout","text":"Null values with suitable columns are as follows: \n\nAge                 :   18705   : 1.6\nAnnual Income       :   44949   : 3.7\nMarital Status      :   18529   : 1.5\nNumber of Dependents:   109672  : 9.1\nOccupation          :   358075  : 29.8\nHealth Score        :   74076   : 6.2\nPrevious Claims     :   364029  : 30.3\nVehicle Age         :     6     : 0.0\nCredit Score        :   137882  : 11.5\nInsurance Duration  :     1     : 0.0\nCustomer Feedback   :   77824   : 6.5\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"Applying **KNNImputer** on `Previous Claims`","metadata":{}},{"cell_type":"code","source":"def apply_knn_imputer(series: pd.Series, n_neighbors = 5) -> pd.Series:\n    knn_imputer = KNNImputer(n_neighbors=5)\n    new_series = knn_imputer.fit_transform(series.reshape(-1,1))\n    return new_series","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T09:16:02.140996Z","iopub.execute_input":"2024-12-03T09:16:02.141580Z","iopub.status.idle":"2024-12-03T09:16:02.148943Z","shell.execute_reply.started":"2024-12-03T09:16:02.141511Z","shell.execute_reply":"2024-12-03T09:16:02.147678Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"apply_knn_imputer(train_df['Previous Claims'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T09:16:02.793367Z","iopub.execute_input":"2024-12-03T09:16:02.794658Z","iopub.status.idle":"2024-12-03T09:16:02.829028Z","shell.execute_reply.started":"2024-12-03T09:16:02.794596Z","shell.execute_reply":"2024-12-03T09:16:02.827715Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_24/1220192245.py\u001b[0m in \u001b[0;36m?\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mapply_knn_imputer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Previous Claims'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/tmp/ipykernel_24/4024320944.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(series, n_neighbors)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mapply_knn_imputer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_neighbors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0mknn_imputer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKNNImputer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_neighbors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mnew_series\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mknn_imputer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_series\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6295\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6296\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6297\u001b[0m         ):\n\u001b[1;32m   6298\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6299\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'reshape'"],"ename":"AttributeError","evalue":"'Series' object has no attribute 'reshape'","output_type":"error"}],"execution_count":32},{"cell_type":"code","source":"knn_imputer = KNNImputer(n_neighbors=5)\nknn_imputer.fit_transform(train_df[['Previous Claims']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T09:17:26.277313Z","iopub.execute_input":"2024-12-03T09:17:26.277810Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}