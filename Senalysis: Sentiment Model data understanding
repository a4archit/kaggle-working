{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "48597789",
   "metadata": {
    "papermill": {
     "duration": 0.00661,
     "end_time": "2025-10-18T06:40:04.683374",
     "exception": false,
     "start_time": "2025-10-18T06:40:04.676764",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Senalysis\n",
    "***\n",
    "\n",
    "#### In this work notebook we are starting the sentiment analysis model working, we try many things like:\n",
    "- Data Acquisition\n",
    "- Data Cleaning\n",
    "- Exploratory Data Analysis\n",
    "- Neural Network Architecture: we cover `LSTM` & `Dense` Layers\n",
    "- Model Training: Configurations :-\n",
    "\n",
    "|    Aspect   |   Value   | \n",
    "|-------------|-----------|\n",
    "| Model Name | `senalysis-v0.1.0`|\n",
    "| Model Accuracy | -- |\n",
    "| Epochs | 20  |\n",
    "| Training Time | ~1.11 hrs |\n",
    "| GPU | T4 |\n",
    "\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "##\n",
    "\n",
    "| --------------------------------------------- Index ------------------------------------------- |\n",
    "| --------------------------------------------------------------------- |\n",
    "| [Importing Packages and Dataset](#Importing-Packages-and-Dataset-) |\n",
    "| [Loading & Understanding data](#Loading-and-Understanding-Data)|\n",
    "| [Feature Engineering](#Feature-Engineering:-Creating-new-feature(s))|\n",
    "| [Datapoints Dropping](#Datapoints-dropping)|\n",
    "| [Data Cleaning (Some specified data)](#Data-Cleaning:-Only-of-specified-features-)|\n",
    "| [Data Processing](#Data-Processing)|\n",
    "| [Model Training](#Model-Training-)|\n",
    "| [Saving Files and `Model`](#Saving-Files-&-Model)|\n",
    "    \n",
    "\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "198e77d2",
   "metadata": {
    "papermill": {
     "duration": 0.005374,
     "end_time": "2025-10-18T06:40:04.694586",
     "exception": false,
     "start_time": "2025-10-18T06:40:04.689212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 20px;\">Importing Packages and Dataset </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "537c63db",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:04.706968Z",
     "iopub.status.busy": "2025-10-18T06:40:04.706707Z",
     "iopub.status.idle": "2025-10-18T06:40:06.183886Z",
     "shell.execute_reply": "2025-10-18T06:40:06.183037Z"
    },
    "papermill": {
     "duration": 1.485011,
     "end_time": "2025-10-18T06:40:06.185365",
     "exception": false,
     "start_time": "2025-10-18T06:40:04.700354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/sentiment-analysis-dataset/training.1600000.processed.noemoticon.csv\n",
      "/kaggle/input/sentiment-analysis-dataset/train.csv\n",
      "/kaggle/input/sentiment-analysis-dataset/testdata.manual.2009.06.14.csv\n",
      "/kaggle/input/sentiment-analysis-dataset/test.csv\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9d06e17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:06.197732Z",
     "iopub.status.busy": "2025-10-18T06:40:06.197445Z",
     "iopub.status.idle": "2025-10-18T06:40:06.201055Z",
     "shell.execute_reply": "2025-10-18T06:40:06.200397Z"
    },
    "papermill": {
     "duration": 0.010816,
     "end_time": "2025-10-18T06:40:06.202120",
     "exception": false,
     "start_time": "2025-10-18T06:40:06.191304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d018a856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:06.214028Z",
     "iopub.status.busy": "2025-10-18T06:40:06.213782Z",
     "iopub.status.idle": "2025-10-18T06:40:21.886135Z",
     "shell.execute_reply": "2025-10-18T06:40:21.885301Z"
    },
    "papermill": {
     "duration": 15.680106,
     "end_time": "2025-10-18T06:40:21.887641",
     "exception": false,
     "start_time": "2025-10-18T06:40:06.207535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-18 06:40:09.960753: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1760769610.232059      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1760769610.294865      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow import keras \n",
    "from keras import optimizers\n",
    "from keras import Sequential, Model\n",
    "from keras.layers import Dense, LSTM, Flatten, Embedding, Input, Dropout, BatchNormalization\n",
    "from keras.regularizers import l1, l2, l1_l2\n",
    "from keras.constraints import MaxNorm, UnitNorm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "21583560",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:21.900522Z",
     "iopub.status.busy": "2025-10-18T06:40:21.900069Z",
     "iopub.status.idle": "2025-10-18T06:40:22.886975Z",
     "shell.execute_reply": "2025-10-18T06:40:22.886051Z"
    },
    "papermill": {
     "duration": 0.994537,
     "end_time": "2025-10-18T06:40:22.888139",
     "exception": false,
     "start_time": "2025-10-18T06:40:21.893602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "import string\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "# Download necessary resources (only once)\n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa07d0ee",
   "metadata": {
    "papermill": {
     "duration": 0.005612,
     "end_time": "2025-10-18T06:40:22.899554",
     "exception": false,
     "start_time": "2025-10-18T06:40:22.893942",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 20px;\">Loading and Understanding Data</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7fa32e2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:22.912081Z",
     "iopub.status.busy": "2025-10-18T06:40:22.911367Z",
     "iopub.status.idle": "2025-10-18T06:40:27.148729Z",
     "shell.execute_reply": "2025-10-18T06:40:27.148112Z"
    },
    "papermill": {
     "duration": 4.245144,
     "end_time": "2025-10-18T06:40:27.150281",
     "exception": false,
     "start_time": "2025-10-18T06:40:22.905137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv(r\"/kaggle/input/sentiment-analysis-dataset/training.1600000.processed.noemoticon.csv\", encoding=\"windows-1252\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b85e6be1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:27.164081Z",
     "iopub.status.busy": "2025-10-18T06:40:27.163378Z",
     "iopub.status.idle": "2025-10-18T06:40:27.388069Z",
     "shell.execute_reply": "2025-10-18T06:40:27.387035Z"
    },
    "papermill": {
     "duration": 0.232644,
     "end_time": "2025-10-18T06:40:27.389389",
     "exception": false,
     "start_time": "2025-10-18T06:40:27.156745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1048572 entries, 0 to 1048571\n",
      "Data columns (total 6 columns):\n",
      " #   Column              Non-Null Count    Dtype \n",
      "---  ------              --------------    ----- \n",
      " 0   polarity of tweet   1048572 non-null  int64 \n",
      " 1   id of the tweet     1048572 non-null  int64 \n",
      " 2   date of the tweet   1048572 non-null  object\n",
      " 3   query               1048572 non-null  object\n",
      " 4   user                1048572 non-null  object\n",
      " 5   text of the tweet   1048572 non-null  object\n",
      "dtypes: int64(2), object(4)\n",
      "memory usage: 48.0+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5d789fb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:27.402375Z",
     "iopub.status.busy": "2025-10-18T06:40:27.401967Z",
     "iopub.status.idle": "2025-10-18T06:40:27.603404Z",
     "shell.execute_reply": "2025-10-18T06:40:27.602642Z"
    },
    "papermill": {
     "duration": 0.209062,
     "end_time": "2025-10-18T06:40:27.604584",
     "exception": false,
     "start_time": "2025-10-18T06:40:27.395522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polarity of tweet     0\n",
       "id of the tweet       0\n",
       "date of the tweet     0\n",
       "query                 0\n",
       "user                  0\n",
       "text of the tweet     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0a77a613",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:27.617916Z",
     "iopub.status.busy": "2025-10-18T06:40:27.617290Z",
     "iopub.status.idle": "2025-10-18T06:40:27.637198Z",
     "shell.execute_reply": "2025-10-18T06:40:27.636610Z"
    },
    "papermill": {
     "duration": 0.027499,
     "end_time": "2025-10-18T06:40:27.638219",
     "exception": false,
     "start_time": "2025-10-18T06:40:27.610720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>id of the tweet</th>\n",
       "      <th>date of the tweet</th>\n",
       "      <th>query</th>\n",
       "      <th>user</th>\n",
       "      <th>text of the tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1467810672</td>\n",
       "      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>scotthamilton</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1467810917</td>\n",
       "      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>mattycus</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1467811184</td>\n",
       "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>ElleCTF</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1467811193</td>\n",
       "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>Karoli</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1467811372</td>\n",
       "      <td>Mon Apr 06 22:20:00 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>joy_wolf</td>\n",
       "      <td>@Kwesidei not the whole crew</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048567</th>\n",
       "      <td>4</td>\n",
       "      <td>1960186342</td>\n",
       "      <td>Fri May 29 07:33:44 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>Madelinedugganx</td>\n",
       "      <td>My GrandMa is making Dinenr with my Mum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048568</th>\n",
       "      <td>4</td>\n",
       "      <td>1960186409</td>\n",
       "      <td>Fri May 29 07:33:43 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>OffRoad_Dude</td>\n",
       "      <td>Mid-morning snack time... A bowl of cheese noo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048569</th>\n",
       "      <td>4</td>\n",
       "      <td>1960186429</td>\n",
       "      <td>Fri May 29 07:33:44 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>Falchion</td>\n",
       "      <td>@ShaDeLa same here  say it like from the Termi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048570</th>\n",
       "      <td>4</td>\n",
       "      <td>1960186445</td>\n",
       "      <td>Fri May 29 07:33:44 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>jonasobsessedx</td>\n",
       "      <td>@DestinyHope92 im great thaanks  wbuu?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048571</th>\n",
       "      <td>4</td>\n",
       "      <td>1960186607</td>\n",
       "      <td>Fri May 29 07:33:45 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>sugababez</td>\n",
       "      <td>cant wait til her date this weekend</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1048572 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         polarity of tweet   id of the tweet             date of the tweet  \\\n",
       "0                         0       1467810672  Mon Apr 06 22:19:49 PDT 2009   \n",
       "1                         0       1467810917  Mon Apr 06 22:19:53 PDT 2009   \n",
       "2                         0       1467811184  Mon Apr 06 22:19:57 PDT 2009   \n",
       "3                         0       1467811193  Mon Apr 06 22:19:57 PDT 2009   \n",
       "4                         0       1467811372  Mon Apr 06 22:20:00 PDT 2009   \n",
       "...                     ...              ...                           ...   \n",
       "1048567                   4       1960186342  Fri May 29 07:33:44 PDT 2009   \n",
       "1048568                   4       1960186409  Fri May 29 07:33:43 PDT 2009   \n",
       "1048569                   4       1960186429  Fri May 29 07:33:44 PDT 2009   \n",
       "1048570                   4       1960186445  Fri May 29 07:33:44 PDT 2009   \n",
       "1048571                   4       1960186607  Fri May 29 07:33:45 PDT 2009   \n",
       "\n",
       "            query             user  \\\n",
       "0        NO_QUERY    scotthamilton   \n",
       "1        NO_QUERY         mattycus   \n",
       "2        NO_QUERY          ElleCTF   \n",
       "3        NO_QUERY           Karoli   \n",
       "4        NO_QUERY         joy_wolf   \n",
       "...           ...              ...   \n",
       "1048567  NO_QUERY  Madelinedugganx   \n",
       "1048568  NO_QUERY     OffRoad_Dude   \n",
       "1048569  NO_QUERY         Falchion   \n",
       "1048570  NO_QUERY   jonasobsessedx   \n",
       "1048571  NO_QUERY        sugababez   \n",
       "\n",
       "                                        text of the tweet   \n",
       "0        is upset that he can't update his Facebook by ...  \n",
       "1        @Kenichan I dived many times for the ball. Man...  \n",
       "2          my whole body feels itchy and like its on fire   \n",
       "3        @nationwideclass no, it's not behaving at all....  \n",
       "4                            @Kwesidei not the whole crew   \n",
       "...                                                    ...  \n",
       "1048567           My GrandMa is making Dinenr with my Mum   \n",
       "1048568  Mid-morning snack time... A bowl of cheese noo...  \n",
       "1048569  @ShaDeLa same here  say it like from the Termi...  \n",
       "1048570             @DestinyHope92 im great thaanks  wbuu?  \n",
       "1048571               cant wait til her date this weekend   \n",
       "\n",
       "[1048572 rows x 6 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "86c02c6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:27.651613Z",
     "iopub.status.busy": "2025-10-18T06:40:27.650917Z",
     "iopub.status.idle": "2025-10-18T06:40:28.795651Z",
     "shell.execute_reply": "2025-10-18T06:40:28.794960Z"
    },
    "papermill": {
     "duration": 1.152606,
     "end_time": "2025-10-18T06:40:28.796977",
     "exception": false,
     "start_time": "2025-10-18T06:40:27.644371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                       1048572\n",
       "unique                      1036132\n",
       "top       isPlayer Has Died! Sorry \n",
       "freq                            210\n",
       "Name: text of the tweet , dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.iloc[:,-1].describe()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf3b4b6d",
   "metadata": {
    "papermill": {
     "duration": 0.005869,
     "end_time": "2025-10-18T06:40:28.809541",
     "exception": false,
     "start_time": "2025-10-18T06:40:28.803672",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 20px;\">Feature Engineering: Creating new feature(s)</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cbd24fd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:28.822502Z",
     "iopub.status.busy": "2025-10-18T06:40:28.821884Z",
     "iopub.status.idle": "2025-10-18T06:40:29.547234Z",
     "shell.execute_reply": "2025-10-18T06:40:29.546314Z"
    },
    "papermill": {
     "duration": 0.733304,
     "end_time": "2025-10-18T06:40:29.548703",
     "exception": false,
     "start_time": "2025-10-18T06:40:28.815399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['cardinality'] = train.iloc[:,-1].apply(lambda x: len(list(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "491f8ff4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:29.562467Z",
     "iopub.status.busy": "2025-10-18T06:40:29.562238Z",
     "iopub.status.idle": "2025-10-18T06:40:29.567207Z",
     "shell.execute_reply": "2025-10-18T06:40:29.566604Z"
    },
    "papermill": {
     "duration": 0.012867,
     "end_time": "2025-10-18T06:40:29.568213",
     "exception": false,
     "start_time": "2025-10-18T06:40:29.555346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77906439"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.cardinality.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1aabbd75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:29.581644Z",
     "iopub.status.busy": "2025-10-18T06:40:29.581431Z",
     "iopub.status.idle": "2025-10-18T06:40:29.592428Z",
     "shell.execute_reply": "2025-10-18T06:40:29.591854Z"
    },
    "papermill": {
     "duration": 0.018819,
     "end_time": "2025-10-18T06:40:29.593432",
     "exception": false,
     "start_time": "2025-10-18T06:40:29.574613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "74.29765338002541"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.cardinality.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a59d17e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:29.606563Z",
     "iopub.status.busy": "2025-10-18T06:40:29.606342Z",
     "iopub.status.idle": "2025-10-18T06:40:30.644233Z",
     "shell.execute_reply": "2025-10-18T06:40:30.643503Z"
    },
    "papermill": {
     "duration": 1.045979,
     "end_time": "2025-10-18T06:40:30.645613",
     "exception": false,
     "start_time": "2025-10-18T06:40:29.599634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(train.cardinality)\n",
    "plt.title(\"Histogram of text (raw)\")\n",
    "# plt.xlim(50,100)\n",
    "# plt.ylim(0,25)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f745f1e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:30.660794Z",
     "iopub.status.busy": "2025-10-18T06:40:30.660376Z",
     "iopub.status.idle": "2025-10-18T06:40:30.812270Z",
     "shell.execute_reply": "2025-10-18T06:40:30.811383Z"
    },
    "papermill": {
     "duration": 0.160351,
     "end_time": "2025-10-18T06:40:30.813474",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.653123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(train.cardinality)\n",
    "plt.title(\"Detecting Outliers\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "224988cd",
   "metadata": {
    "papermill": {
     "duration": 0.006854,
     "end_time": "2025-10-18T06:40:30.828235",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.821381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 20px;\">Datapoints dropping</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "037dbd97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:30.842926Z",
     "iopub.status.busy": "2025-10-18T06:40:30.842680Z",
     "iopub.status.idle": "2025-10-18T06:40:30.924601Z",
     "shell.execute_reply": "2025-10-18T06:40:30.923685Z"
    },
    "papermill": {
     "duration": 0.091116,
     "end_time": "2025-10-18T06:40:30.926178",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.835062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = train.loc[train['cardinality'] < 150] # dropping those comments whose are written more than 150 words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1fb3c058",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:30.941620Z",
     "iopub.status.busy": "2025-10-18T06:40:30.941381Z",
     "iopub.status.idle": "2025-10-18T06:40:30.946032Z",
     "shell.execute_reply": "2025-10-18T06:40:30.945311Z"
    },
    "papermill": {
     "duration": 0.013527,
     "end_time": "2025-10-18T06:40:30.947207",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.933680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['polarity of tweet ', 'id of the tweet', 'date of the tweet', 'query',\n",
       "       'user', 'text of the tweet ', 'cardinality'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "313cc872",
   "metadata": {
    "papermill": {
     "duration": 0.006963,
     "end_time": "2025-10-18T06:40:30.961136",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.954173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 15px;\">Data Cleaning: Only of specified features </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "57b7abf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:30.975661Z",
     "iopub.status.busy": "2025-10-18T06:40:30.975434Z",
     "iopub.status.idle": "2025-10-18T06:40:30.979026Z",
     "shell.execute_reply": "2025-10-18T06:40:30.978473Z"
    },
    "papermill": {
     "duration": 0.011951,
     "end_time": "2025-10-18T06:40:30.980061",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.968110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# removing @usernames from comments\n",
    "\n",
    "def remove_usernames(comment):\n",
    "    new_words = []\n",
    "    for word in comment.split(\" \"):\n",
    "        if word.startswith(\"@\"):\n",
    "            continue\n",
    "        new_words.append(word)\n",
    "\n",
    "    return \" \".join(new_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "da802775",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:30.995300Z",
     "iopub.status.busy": "2025-10-18T06:40:30.994868Z",
     "iopub.status.idle": "2025-10-18T06:40:31.014488Z",
     "shell.execute_reply": "2025-10-18T06:40:31.013733Z"
    },
    "papermill": {
     "duration": 0.028188,
     "end_time": "2025-10-18T06:40:31.015578",
     "exception": false,
     "start_time": "2025-10-18T06:40:30.987390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# feature dropping\n",
    "\n",
    "train_df = train.iloc[:, [0,5]]\n",
    "train_df.columns = ['sentiment', 'text']\n",
    "# train_df['sentiment'] = train_df['sentiment'].iloc[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "acc3942b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:31.030353Z",
     "iopub.status.busy": "2025-10-18T06:40:31.030149Z",
     "iopub.status.idle": "2025-10-18T06:40:33.900787Z",
     "shell.execute_reply": "2025-10-18T06:40:33.900019Z"
    },
    "papermill": {
     "duration": 2.879538,
     "end_time": "2025-10-18T06:40:33.902095",
     "exception": false,
     "start_time": "2025-10-18T06:40:31.022557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/3951484120.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_df['text'] = train_df['text'].apply(remove_usernames)\n"
     ]
    }
   ],
   "source": [
    "train_df['text'] = train_df['text'].apply(remove_usernames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "52b1ff5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:33.918120Z",
     "iopub.status.busy": "2025-10-18T06:40:33.917520Z",
     "iopub.status.idle": "2025-10-18T06:40:34.057693Z",
     "shell.execute_reply": "2025-10-18T06:40:34.057039Z"
    },
    "papermill": {
     "duration": 0.149386,
     "end_time": "2025-10-18T06:40:34.059116",
     "exception": false,
     "start_time": "2025-10-18T06:40:33.909730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# preparaing data for training\n",
    "\n",
    "instances_counts_for_each_class = 1_00_000\n",
    "negative_df = train_df[train_df['sentiment'] == 0].sample(instances_counts_for_each_class)\n",
    "positive_df = train_df[train_df['sentiment'] == 4].sample(instances_counts_for_each_class)\n",
    "df = pd.concat([negative_df,positive_df]).sample(instances_counts_for_each_class*2)\n",
    "df.sentiment = df.sentiment.map({0:0, 4:1})\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "df = df[['text','sentiment']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ed61206",
   "metadata": {
    "papermill": {
     "duration": 0.006916,
     "end_time": "2025-10-18T06:40:34.073722",
     "exception": false,
     "start_time": "2025-10-18T06:40:34.066806",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### NLP - Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "83d91fb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:34.089486Z",
     "iopub.status.busy": "2025-10-18T06:40:34.089048Z",
     "iopub.status.idle": "2025-10-18T06:40:34.095252Z",
     "shell.execute_reply": "2025-10-18T06:40:34.094470Z"
    },
    "papermill": {
     "duration": 0.015605,
     "end_time": "2025-10-18T06:40:34.096473",
     "exception": false,
     "start_time": "2025-10-18T06:40:34.080868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize tools\n",
    "stop_words = set(stopwords.words('english'))\n",
    "lemmatizer = WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7468340b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:34.111463Z",
     "iopub.status.busy": "2025-10-18T06:40:34.111250Z",
     "iopub.status.idle": "2025-10-18T06:40:34.115712Z",
     "shell.execute_reply": "2025-10-18T06:40:34.114971Z"
    },
    "papermill": {
     "duration": 0.013223,
     "end_time": "2025-10-18T06:40:34.116815",
     "exception": false,
     "start_time": "2025-10-18T06:40:34.103592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def perform_nlp_operations(text):\n",
    "    \n",
    "    # Lowercasing\n",
    "    text = text.lower()\n",
    "    \n",
    "    # Removing punctuation\n",
    "    text = text.translate(str.maketrans('', '', string.punctuation))\n",
    "    \n",
    "    # Tokenization\n",
    "    tokens = word_tokenize(text)\n",
    "    \n",
    "    # Removing stopwords\n",
    "    filtered_tokens = [word for word in tokens if word not in stop_words]\n",
    "    \n",
    "    # Lemmatization\n",
    "    lemmatized_tokens = [lemmatizer.lemmatize(word) for word in filtered_tokens]\n",
    "    \n",
    "    return \" \".join(lemmatized_tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cc1d44ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:34.134255Z",
     "iopub.status.busy": "2025-10-18T06:40:34.134043Z",
     "iopub.status.idle": "2025-10-18T06:40:56.019311Z",
     "shell.execute_reply": "2025-10-18T06:40:56.018425Z"
    },
    "papermill": {
     "duration": 21.897147,
     "end_time": "2025-10-18T06:40:56.020747",
     "exception": false,
     "start_time": "2025-10-18T06:40:34.123600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.text = df.text.apply(perform_nlp_operations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9e88b156",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:56.036170Z",
     "iopub.status.busy": "2025-10-18T06:40:56.035888Z",
     "iopub.status.idle": "2025-10-18T06:40:56.607017Z",
     "shell.execute_reply": "2025-10-18T06:40:56.606267Z"
    },
    "papermill": {
     "duration": 0.580008,
     "end_time": "2025-10-18T06:40:56.608284",
     "exception": false,
     "start_time": "2025-10-18T06:40:56.028276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df['text'].apply(lambda comment: len(list(comment.split(' ')))))\n",
    "plt.title(\"Histogram of words\")\n",
    "# plt.xlim(20,40)\n",
    "# plt.ylim(0,100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bd0ca44",
   "metadata": {
    "papermill": {
     "duration": 0.007264,
     "end_time": "2025-10-18T06:40:56.623449",
     "exception": false,
     "start_time": "2025-10-18T06:40:56.616185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 20px;\">Data Preprocessing</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b849094c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:40:56.638909Z",
     "iopub.status.busy": "2025-10-18T06:40:56.638412Z",
     "iopub.status.idle": "2025-10-18T06:41:00.870170Z",
     "shell.execute_reply": "2025-10-18T06:41:00.869494Z"
    },
    "papermill": {
     "duration": 4.24096,
     "end_time": "2025-10-18T06:41:00.871602",
     "exception": false,
     "start_time": "2025-10-18T06:40:56.630642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Hyperparameters\n",
    "max_words = 1_00_000      # vocabulary size\n",
    "max_len = 20             # title sequence length\n",
    "\n",
    "# Tokenizers\n",
    "tokenizer = Tokenizer(num_words=max_words, oov_token=\"<OOV>\")\n",
    "tokenizer.fit_on_texts(list(df['text']))\n",
    "sequences = tokenizer.texts_to_sequences(df['text'])\n",
    "\n",
    "padded = pad_sequences(sequences, maxlen=max_len, padding='post', truncating='post')\n",
    "total_words = len(tokenizer.word_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "38d36728",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:00.888241Z",
     "iopub.status.busy": "2025-10-18T06:41:00.887627Z",
     "iopub.status.idle": "2025-10-18T06:41:00.892412Z",
     "shell.execute_reply": "2025-10-18T06:41:00.891769Z"
    },
    "papermill": {
     "duration": 0.013917,
     "end_time": "2025-10-18T06:41:00.893454",
     "exception": false,
     "start_time": "2025-10-18T06:41:00.879537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9842,   88, 9139, 7704,  234,   57,    0,    0,    0,    0,    0,\n",
       "          0,    0,    0,    0,    0,    0,    0,    0,    0], dtype=int32)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "padded[0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "358480f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:00.909222Z",
     "iopub.status.busy": "2025-10-18T06:41:00.908774Z",
     "iopub.status.idle": "2025-10-18T06:41:00.912683Z",
     "shell.execute_reply": "2025-10-18T06:41:00.912168Z"
    },
    "papermill": {
     "duration": 0.012814,
     "end_time": "2025-10-18T06:41:00.913653",
     "exception": false,
     "start_time": "2025-10-18T06:41:00.900839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110276"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_words"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "036bf975",
   "metadata": {
    "papermill": {
     "duration": 0.00727,
     "end_time": "2025-10-18T06:41:00.928462",
     "exception": false,
     "start_time": "2025-10-18T06:41:00.921192",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: yellow; background-color: #000; padding: 15px;\">Model Training </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4e896432",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:00.944174Z",
     "iopub.status.busy": "2025-10-18T06:41:00.943971Z",
     "iopub.status.idle": "2025-10-18T06:41:00.972943Z",
     "shell.execute_reply": "2025-10-18T06:41:00.972378Z"
    },
    "papermill": {
     "duration": 0.038313,
     "end_time": "2025-10-18T06:41:00.974208",
     "exception": false,
     "start_time": "2025-10-18T06:41:00.935895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = df.sentiment.values\n",
    "X_train, X_test, y_train, y_test = train_test_split(padded, labels, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5fecac4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:00.991144Z",
     "iopub.status.busy": "2025-10-18T06:41:00.990632Z",
     "iopub.status.idle": "2025-10-18T06:41:00.993906Z",
     "shell.execute_reply": "2025-10-18T06:41:00.993399Z"
    },
    "papermill": {
     "duration": 0.012645,
     "end_time": "2025-10-18T06:41:00.994958",
     "exception": false,
     "start_time": "2025-10-18T06:41:00.982313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # declaring model\n",
    "# model = Sequential(name=\"senalysis-v0.1.0\")\n",
    "\n",
    "\n",
    "# # --------- Embedding Layer\n",
    "# model.add(Embedding(input_dim=max_words, output_dim=512, input_length=max_len, name='Embedding-Layer'))\n",
    "\n",
    "# # --------- RNN (LSTM) Layer 1\n",
    "# model.add(LSTM(128, return_sequences=True))\n",
    "\n",
    "# # --------- RNN (LSTM) Layer 2\n",
    "# model.add(LSTM(128, return_sequences=True))\n",
    "\n",
    "# # --------- RNN (LSTM) Layer 3\n",
    "# model.add(LSTM(64, return_sequences=True))\n",
    "\n",
    "# # --------- RNN (LSTM) Layer 4\n",
    "# model.add(LSTM(16))\n",
    "\n",
    "# # -------- Output Layer [Dense]\n",
    "# model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1b58b7e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:01.010630Z",
     "iopub.status.busy": "2025-10-18T06:41:01.010211Z",
     "iopub.status.idle": "2025-10-18T06:41:01.013054Z",
     "shell.execute_reply": "2025-10-18T06:41:01.012542Z"
    },
    "papermill": {
     "duration": 0.011809,
     "end_time": "2025-10-18T06:41:01.014147",
     "exception": false,
     "start_time": "2025-10-18T06:41:01.002338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "# history = model.fit(X_train, y_train, epochs=2, validation_split=0.2, batch_size=64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4d99782c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:01.030358Z",
     "iopub.status.busy": "2025-10-18T06:41:01.030174Z",
     "iopub.status.idle": "2025-10-18T06:41:01.032971Z",
     "shell.execute_reply": "2025-10-18T06:41:01.032440Z"
    },
    "papermill": {
     "duration": 0.012273,
     "end_time": "2025-10-18T06:41:01.034033",
     "exception": false,
     "start_time": "2025-10-18T06:41:01.021760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# y_pred = model.predict(X_test, verbose=False)\n",
    "# y_pred = pd.DataFrame(y_pred,columns=['y_pred'])['y_pred'].apply(lambda x: 0 if x < 0.5 else 1)\n",
    "# print(f\"Model: {model.name}\\nAccuracy: {round(accuracy_score(y_pred,y_test)*100, 2)} %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83ff1e4a",
   "metadata": {
    "papermill": {
     "duration": 0.007114,
     "end_time": "2025-10-18T06:41:01.048586",
     "exception": false,
     "start_time": "2025-10-18T06:41:01.041472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c79834be",
   "metadata": {
    "papermill": {
     "duration": 0.007038,
     "end_time": "2025-10-18T06:41:01.062780",
     "exception": false,
     "start_time": "2025-10-18T06:41:01.055742",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This model architecture is copied from **Fake News Detector Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4b2a6c47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:01.078462Z",
     "iopub.status.busy": "2025-10-18T06:41:01.077892Z",
     "iopub.status.idle": "2025-10-18T06:41:02.062033Z",
     "shell.execute_reply": "2025-10-18T06:41:02.061224Z"
    },
    "papermill": {
     "duration": 0.993265,
     "end_time": "2025-10-18T06:41:02.063212",
     "exception": false,
     "start_time": "2025-10-18T06:41:01.069947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n",
      "I0000 00:00:1760769662.012154      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1760769662.012839      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "# common used variables\n",
    "COMMON_REGULARIZATION_VALUE = 0.03\n",
    "COMMON_DROPOUT_VALUE = 0.3\n",
    "\n",
    "# creating model,5][11\n",
    "model_2 = Sequential(name='senalysis-v0.1.0c')\n",
    "\n",
    "# layer 1 (Embedding layer)\n",
    "model_2.add(\n",
    "    Embedding(input_dim=max_words, output_dim=100, input_length=max_len, name='Embedding_1')\n",
    ")\n",
    "\n",
    "# layer 2 (Input layer)\n",
    "model_2.add(\n",
    "    LSTM(\n",
    "        units = 16, \n",
    "        name = 'LSTM_1', \n",
    "        return_sequences = True, \n",
    "        dropout = COMMON_DROPOUT_VALUE, \n",
    "        recurrent_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        bias_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_dropout = COMMON_DROPOUT_VALUE,\n",
    "        kernel_constraint = MaxNorm(3), \n",
    "        recurrent_constraint=UnitNorm()\n",
    "))\n",
    "\n",
    "\n",
    "# layer 3 (hidden layer)\n",
    "model_2.add(\n",
    "    LSTM(\n",
    "        units = 16, \n",
    "        return_sequences = True, \n",
    "        dropout = COMMON_DROPOUT_VALUE, \n",
    "        kernel_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        bias_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_dropout = COMMON_DROPOUT_VALUE,\n",
    "        kernel_constraint = MaxNorm(3), \n",
    "        recurrent_constraint=UnitNorm()\n",
    "))\n",
    "\n",
    "\n",
    "# layer 4 (hidden layer)\n",
    "model_2.add(\n",
    "    LSTM(\n",
    "        units = 8, \n",
    "        return_sequences = False, \n",
    "        dropout = COMMON_DROPOUT_VALUE, \n",
    "        kernel_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        bias_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_dropout = COMMON_DROPOUT_VALUE,\n",
    "        kernel_constraint = MaxNorm(3), \n",
    "        recurrent_constraint=UnitNorm()\n",
    "))\n",
    "\n",
    "\n",
    "# layer 5 (output layer)\n",
    "model_2.add(Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7ecffddb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:02.079344Z",
     "iopub.status.busy": "2025-10-18T06:41:02.079142Z",
     "iopub.status.idle": "2025-10-18T06:41:02.092690Z",
     "shell.execute_reply": "2025-10-18T06:41:02.091921Z"
    },
    "papermill": {
     "duration": 0.022815,
     "end_time": "2025-10-18T06:41:02.093793",
     "exception": false,
     "start_time": "2025-10-18T06:41:02.070978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"senalysis-v0.1.0c\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"senalysis-v0.1.0c\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ Embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ LSTM_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ Embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)         │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ LSTM_1 (\u001b[38;5;33mLSTM\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cabab94b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:41:02.110673Z",
     "iopub.status.busy": "2025-10-18T06:41:02.110310Z",
     "iopub.status.idle": "2025-10-18T06:44:34.864730Z",
     "shell.execute_reply": "2025-10-18T06:44:34.863833Z"
    },
    "papermill": {
     "duration": 212.939984,
     "end_time": "2025-10-18T06:44:35.041879",
     "exception": false,
     "start_time": "2025-10-18T06:41:02.101895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2250/2250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m213s\u001b[0m 88ms/step - accuracy: 0.5824 - loss: 7.4570 - val_accuracy: 0.7441 - val_loss: 6.2250\n"
     ]
    }
   ],
   "source": [
    "model_2.compile(loss='binary_crossentropy', optimizer=optimizers.Adam(learning_rate=0.0001), metrics=['accuracy'])\n",
    "history = model_2.fit(X_train, y_train, epochs=1, validation_split=0.1, batch_size=64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3d8ee0ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:44:35.237210Z",
     "iopub.status.busy": "2025-10-18T06:44:35.236907Z",
     "iopub.status.idle": "2025-10-18T06:45:05.926391Z",
     "shell.execute_reply": "2025-10-18T06:45:05.925424Z"
    },
    "papermill": {
     "duration": 30.892278,
     "end_time": "2025-10-18T06:45:06.031728",
     "exception": false,
     "start_time": "2025-10-18T06:44:35.139450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: senalysis-v0.1.0c\n",
      "Accuracy: 75.02 %\n"
     ]
    }
   ],
   "source": [
    "#                            Testing\n",
    "\n",
    "y_pred = model_2.predict(X_test, verbose=False)\n",
    "y_pred = pd.DataFrame(y_pred,columns=['y_pred'])['y_pred'].apply(lambda x: 0 if x < 0.5 else 1)\n",
    "print(f\"Model: {model_2.name}\\nAccuracy: {round(accuracy_score(y_pred,y_test)*100, 2)} %\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa72a24d",
   "metadata": {
    "papermill": {
     "duration": 0.096568,
     "end_time": "2025-10-18T06:45:06.225789",
     "exception": false,
     "start_time": "2025-10-18T06:45:06.129221",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"color: #fff; background-color: #000; padding: 15px;\">Saving Files & Model</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f08ec051",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-18T06:45:06.421582Z",
     "iopub.status.busy": "2025-10-18T06:45:06.421307Z",
     "iopub.status.idle": "2025-10-18T06:45:07.193154Z",
     "shell.execute_reply": "2025-10-18T06:45:07.192518Z"
    },
    "papermill": {
     "duration": 0.872306,
     "end_time": "2025-10-18T06:45:07.194523",
     "exception": false,
     "start_time": "2025-10-18T06:45:06.322217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pickle.dump(tokenizer, open(\"Tokenizer 01.pkl\", \"wb\"))\n",
    "model_2.save_weights(f\"{model_2.name}.weights.h5\")\n",
    "df.to_csv(\"balanced_cleaned_dataset_for_sentiment_analysis_200k_records.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 989445,
     "sourceId": 1808590,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 310.181679,
   "end_time": "2025-10-18T06:45:10.951237",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-18T06:40:00.769558",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
