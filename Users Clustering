{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9691769,"sourceType":"datasetVersion","datasetId":5913861}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Users Clustering\n\n**AIM:** To practice Unsupervised machine learning\n\nTry to performing clustering with different algorithms\n- K-means clustering\n- Agglomerative clustering\n- DBSCAN","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/github-indian-users-deep-data/Cleaned Better Schema Github Indian Users Deep Data.csv\",\n                  lineterminator='\\n')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Followers VS Followings","metadata":{}},{"cell_type":"code","source":"plt.title(\"Followers VS Followings\")\nsns.scatterplot(data, x='followings', y='followers')\nplt.xlim(0,100)\nplt.ylim(0,100)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(data.last_year_contributions)\nplt.xlim(0,100)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(data.repositories)\nplt.xlim(0,100)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data, x='repositories', y='last_year_contributions')\nplt.xlim(0,100)\nplt.ylim(0,1000)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.select_dtypes(include=np.number)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(14,6))\nsns.scatterplot(data, x='last_year_contributions', y='followings')\nplt.title('Clusters(last_year_contributtions V|S followings)')\nplt.xlabel('Last year contributions')\nplt.ylabel('Followings')\nplt.xlim(0, 4000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Performing **Clustering on `last_year_contributions` & `followings`**","metadata":{}},{"cell_type":"code","source":"xdf = data[['last_year_contributions','followings']].dropna()\nscaler = StandardScaler()\nxdf_scaled = scaler.fit_transform(xdf)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nwcss = []\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)\n    kmeans.fit(xdf)\n    wcss.append(kmeans.inertia_)\n\n# Plotting the Elbow Method\nplt.plot(range(1, 11), wcss)\nplt.title('Elbow Method')\nplt.xlabel('Number of clusters (K)')\nplt.ylabel('WCSS (Within-cluster sum of squares)')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10, random_state=0)\ny_kmeans = kmeans.fit_predict(xdf)\n\n# xdf[y_kmeans == 0].iloc[:,0]\n# Step 6: Visualize the Clusters (if 2D)\nfontdict = {\n    'size':18\n}\nplt.figure(figsize=(14,6))\nplt.scatter(xdf[y_kmeans == 0].iloc[:,0], xdf[y_kmeans == 0].iloc[:,1], s=50, c='red', label='Cluster 1')\nplt.scatter(xdf[y_kmeans == 1].iloc[:,0], xdf[y_kmeans == 1].iloc[:,1], s=50, c='blue', label='Cluster 2')\nplt.scatter(xdf[y_kmeans == 2].iloc[:,0], xdf[y_kmeans == 2].iloc[:,1], s=50, c='green', label='Cluster 3')\nplt.scatter(xdf[y_kmeans == 3].iloc[:,0], xdf[y_kmeans == 3].iloc[:,1], s=50, c='orange', label='Cluster 4')\nplt.scatter(xdf[y_kmeans == 4].iloc[:,0], xdf[y_kmeans == 4].iloc[:,1], s=50, c='black', label='Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label='Centroids')\nplt.title('Clustering using K-Means', fontdict={\"size\":20})\nplt.xlabel('Last year contributions', fontdict=fontdict)\nplt.ylabel('Followings', fontdict=fontdict)\nplt.xlim(0, 4000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Performing **Agglomerative Hiearchial Clustering**","metadata":{}},{"cell_type":"code","source":"# Create Dendrogram to Determine the Number of Clusters\nlinked = linkage(xdf_scaled, method='ward')\n\nplt.figure(figsize=(10, 7))\ndendrogram(linked)\nplt.title(\"Dendrogram\")\nplt.xlabel('Data points')\nplt.ylabel('Euclidean Distance')\nplt.ylim(0,10)\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Apply Agglomerative Hierarchical Clustering\n# You can decide on the number of clusters (e.g., 3) based on the dendrogram\nmodel = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')\ny_agglo = model.fit_predict(xdf_scaled)\n\n# visualization\nfontdict = {\n    'size':18\n}\nplt.figure(figsize=(14,6))\nplt.scatter(xdf[y_agglo == 0].iloc[:,0], xdf[y_agglo == 0].iloc[:,1], s=50, c='red', label='Cluster 1')\nplt.scatter(xdf[y_agglo == 1].iloc[:,0], xdf[y_agglo == 1].iloc[:,1], s=50, c='blue', label='Cluster 2')\nplt.scatter(xdf[y_agglo == 2].iloc[:,0], xdf[y_agglo == 2].iloc[:,1], s=50, c='green', label='Cluster 3')\nplt.scatter(xdf[y_agglo == 3].iloc[:,0], xdf[y_agglo == 3].iloc[:,1], s=50, c='orange', label='Cluster 4')\nplt.scatter(xdf[y_agglo == 4].iloc[:,0], xdf[y_agglo == 4].iloc[:,1], s=50, c='black', label='Cluster 5')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label='Centroids')\nplt.title('Clustering using Agglomerative Hiearchial Clustering', fontdict={\"size\":20})\nplt.xlabel('Last year contributions', fontdict=fontdict)\nplt.ylabel('Followings', fontdict=fontdict)\nplt.xlim(0, 4000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(14,6))\nsns.scatterplot(x=xdf[y_agglo == 0].iloc[:,0], y=xdf[y_agglo == 0].iloc[:,1], s=50, c='red', label='Cluster 1')\n# plt.scatter(xdf[y_agglo == 1].iloc[:,0], xdf[y_agglo == 1].iloc[:,1], s=50, c='blue', label='Cluster 2')\n# plt.scatter(xdf[y_agglo == 2].iloc[:,0], xdf[y_agglo == 2].iloc[:,1], s=50, c='green', label='Cluster 3')\n# plt.scatter(xdf[y_agglo == 3].iloc[:,0], xdf[y_agglo == 3].iloc[:,1], s=50, c='orange', label='Cluster 4')\n# plt.scatter(xdf[y_agglo == 4].iloc[:,0], xdf[y_agglo == 4].iloc[:,1], s=50, c='black', label='Cluster 5')\n# plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label='Centroids')\nplt.title('Clustering using Agglomerative Hiearchial Clustering', fontdict={\"size\":20})\nplt.xlabel('Last year contributions', fontdict=fontdict)\nplt.ylabel('Followings', fontdict=fontdict)\nplt.xlim(0, 4000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# sns.scatterplot()\nxdf['y_agglo'] = y_agglo   ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(xdf, x='last_year_contributions', y='followings', hue='y_agglo')\nplt.title('Clustering using Agglomerative Hiearchial Clustering', fontdict={\"size\":20})\nplt.xlabel('Last year contributions', fontdict=fontdict)\nplt.ylabel('Followings', fontdict=fontdict)\nplt.xlim(0, 4000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Perform **DBSCAN**","metadata":{}},{"cell_type":"code","source":"dbscan = DBSCAN(eps=0.5, min_samples=5)\ny_dbscan = dbscan.fit_predict(xdf_scaled)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Points labeled as -1 are considered as noise\nplt.scatter(xdf_scaled[y_dbscan == -1, 0], xdf_scaled[y_dbscan == -1, 1], s=100, c='black', label='Noise')\nplt.scatter(xdf_scaled[y_dbscan != -1, 0], xdf_scaled[y_dbscan != -1, 1], s=100, c=y_dbscan[y_dbscan != -1], cmap='viridis', label='Clusters')\nplt.title('Clustering using Agglomerative Hiearchial Clustering', fontdict={\"size\":20})\nplt.xlabel('Last year contributions', fontdict=fontdict)\nplt.ylabel('Followings', fontdict=fontdict)\nplt.xlim(0, 4000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}