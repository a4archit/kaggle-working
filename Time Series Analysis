{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "456c2fe5",
   "metadata": {
    "papermill": {
     "duration": 0.004187,
     "end_time": "2024-12-31T07:28:28.223273",
     "exception": false,
     "start_time": "2024-12-31T07:28:28.219086",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## About this work\n",
    "\n",
    "- In this notebook we are going to practice **Time Series Analysis**.\n",
    "\n",
    "- We take data only of india and predict from the year 2024 to 2030\n",
    "\n",
    "<br>\n",
    "<br>\n",
    "\n",
    "| **Note:** Still this notebook has been not completed yet. |\n",
    "|-----------------------------------------------------------|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "282e1977",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:28.231737Z",
     "iopub.status.busy": "2024-12-31T07:28:28.231369Z",
     "iopub.status.idle": "2024-12-31T07:28:29.930602Z",
     "shell.execute_reply": "2024-12-31T07:28:29.929501Z"
    },
    "papermill": {
     "duration": 1.705203,
     "end_time": "2024-12-31T07:28:29.932260",
     "exception": false,
     "start_time": "2024-12-31T07:28:28.227057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/oil-reserves-and-consumption-from-1995-to-2022/Oil Consumption by Country 1965 to 2023.csv\n",
      "/kaggle/input/oil-reserves-and-consumption-from-1995-to-2022/World Crude Oil Reserves from 1995 to 2021.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0d30fbd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:29.941185Z",
     "iopub.status.busy": "2024-12-31T07:28:29.940716Z",
     "iopub.status.idle": "2024-12-31T07:28:29.964538Z",
     "shell.execute_reply": "2024-12-31T07:28:29.963615Z"
    },
    "papermill": {
     "duration": 0.030077,
     "end_time": "2024-12-31T07:28:29.966308",
     "exception": false,
     "start_time": "2024-12-31T07:28:29.936231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(r\"/kaggle/input/oil-reserves-and-consumption-from-1995-to-2022/Oil Consumption by Country 1965 to 2023.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "56dfaa28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:29.975186Z",
     "iopub.status.busy": "2024-12-31T07:28:29.974864Z",
     "iopub.status.idle": "2024-12-31T07:28:29.981523Z",
     "shell.execute_reply": "2024-12-31T07:28:29.980731Z"
    },
    "papermill": {
     "duration": 0.012715,
     "end_time": "2024-12-31T07:28:29.982946",
     "exception": false,
     "start_time": "2024-12-31T07:28:29.970231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(104, 60)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "712150f0",
   "metadata": {
    "papermill": {
     "duration": 0.003879,
     "end_time": "2024-12-31T07:28:29.990824",
     "exception": false,
     "start_time": "2024-12-31T07:28:29.986945",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Countries -> 104\n",
    "\n",
    "Years -> 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9eb0a656",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:29.999608Z",
     "iopub.status.busy": "2024-12-31T07:28:29.999295Z",
     "iopub.status.idle": "2024-12-31T07:28:30.008286Z",
     "shell.execute_reply": "2024-12-31T07:28:30.007078Z"
    },
    "papermill": {
     "duration": 0.015048,
     "end_time": "2024-12-31T07:28:30.009827",
     "exception": false,
     "start_time": "2024-12-31T07:28:29.994779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "india = data[data['Entity'] == 'India']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f5231626",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.018814Z",
     "iopub.status.busy": "2024-12-31T07:28:30.018474Z",
     "iopub.status.idle": "2024-12-31T07:28:30.023211Z",
     "shell.execute_reply": "2024-12-31T07:28:30.022403Z"
    },
    "papermill": {
     "duration": 0.010628,
     "end_time": "2024-12-31T07:28:30.024622",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.013994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "india = india.transpose().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1885c7d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.033364Z",
     "iopub.status.busy": "2024-12-31T07:28:30.033048Z",
     "iopub.status.idle": "2024-12-31T07:28:30.037007Z",
     "shell.execute_reply": "2024-12-31T07:28:30.036225Z"
    },
    "papermill": {
     "duration": 0.009869,
     "end_time": "2024-12-31T07:28:30.038441",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.028572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "india.columns = ['year','consumption']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4f0d3a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.047122Z",
     "iopub.status.busy": "2024-12-31T07:28:30.046798Z",
     "iopub.status.idle": "2024-12-31T07:28:30.050964Z",
     "shell.execute_reply": "2024-12-31T07:28:30.050189Z"
    },
    "papermill": {
     "duration": 0.010008,
     "end_time": "2024-12-31T07:28:30.052412",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.042404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "india = india.iloc[1:].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e5e119b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.060869Z",
     "iopub.status.busy": "2024-12-31T07:28:30.060545Z",
     "iopub.status.idle": "2024-12-31T07:28:30.068713Z",
     "shell.execute_reply": "2024-12-31T07:28:30.067942Z"
    },
    "papermill": {
     "duration": 0.013898,
     "end_time": "2024-12-31T07:28:30.070222",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.056324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year           0\n",
       "consumption    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "india.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dfaf8bd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.079318Z",
     "iopub.status.busy": "2024-12-31T07:28:30.079011Z",
     "iopub.status.idle": "2024-12-31T07:28:30.093526Z",
     "shell.execute_reply": "2024-12-31T07:28:30.092526Z"
    },
    "papermill": {
     "duration": 0.020727,
     "end_time": "2024-12-31T07:28:30.095041",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.074314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      59.00000\n",
       "unique     59.00000\n",
       "top       146.99513\n",
       "freq        1.00000\n",
       "Name: consumption, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "india.consumption.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2a16e1f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.104286Z",
     "iopub.status.busy": "2024-12-31T07:28:30.103960Z",
     "iopub.status.idle": "2024-12-31T07:28:30.117497Z",
     "shell.execute_reply": "2024-12-31T07:28:30.116445Z"
    },
    "papermill": {
     "duration": 0.019796,
     "end_time": "2024-12-31T07:28:30.118970",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.099174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 59 entries, 0 to 58\n",
      "Data columns (total 2 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   year         59 non-null     object\n",
      " 1   consumption  59 non-null     object\n",
      "dtypes: object(2)\n",
      "memory usage: 1.0+ KB\n"
     ]
    }
   ],
   "source": [
    "india.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13c00dd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.128199Z",
     "iopub.status.busy": "2024-12-31T07:28:30.127870Z",
     "iopub.status.idle": "2024-12-31T07:28:30.134141Z",
     "shell.execute_reply": "2024-12-31T07:28:30.133243Z"
    },
    "papermill": {
     "duration": 0.012408,
     "end_time": "2024-12-31T07:28:30.135565",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.123157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for column in india.columns:\n",
    "    india[column] = india[column].astype('float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a6d0cb73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.144913Z",
     "iopub.status.busy": "2024-12-31T07:28:30.144557Z",
     "iopub.status.idle": "2024-12-31T07:28:30.156878Z",
     "shell.execute_reply": "2024-12-31T07:28:30.155970Z"
    },
    "papermill": {
     "duration": 0.018643,
     "end_time": "2024-12-31T07:28:30.158372",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.139729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1124.692627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>146.995132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2936.974365</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      consumption\n",
       "mean  1124.692627\n",
       "min    146.995132\n",
       "max   2936.974365"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "india.agg({'consumption':['mean','min','max']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1a1b381d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-31T07:28:30.168091Z",
     "iopub.status.busy": "2024-12-31T07:28:30.167714Z",
     "iopub.status.idle": "2024-12-31T07:28:30.404143Z",
     "shell.execute_reply": "2024-12-31T07:28:30.403149Z"
    },
    "papermill": {
     "duration": 0.243092,
     "end_time": "2024-12-31T07:28:30.405783",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.162691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"India oil consumption\")\n",
    "plt.plot(india.year, india.consumption)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0da44c01",
   "metadata": {
    "papermill": {
     "duration": 0.004403,
     "end_time": "2024-12-31T07:28:30.415025",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.410622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03d9d351",
   "metadata": {
    "papermill": {
     "duration": 0.004392,
     "end_time": "2024-12-31T07:28:30.423964",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.419572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4a2884c",
   "metadata": {
    "papermill": {
     "duration": 0.004164,
     "end_time": "2024-12-31T07:28:30.432570",
     "exception": false,
     "start_time": "2024-12-31T07:28:30.428406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5317141,
     "sourceId": 8835796,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.876317,
   "end_time": "2024-12-31T07:28:31.056478",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-31T07:28:26.180161",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
