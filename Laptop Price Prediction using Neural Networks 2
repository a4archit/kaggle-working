{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9dad5eb0",
   "metadata": {
    "papermill": {
     "duration": 0.004179,
     "end_time": "2025-05-02T06:44:46.548165",
     "exception": false,
     "start_time": "2025-05-02T06:44:46.543986",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# <center style=\"padding: 30px 0; background-color: blue; color: #fff;\"> Laptop Price Prediction using Neural Networks 2 </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45421c2f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:46.556653Z",
     "iopub.status.busy": "2025-05-02T06:44:46.556354Z",
     "iopub.status.idle": "2025-05-02T06:44:48.482268Z",
     "shell.execute_reply": "2025-05-02T06:44:48.481179Z"
    },
    "papermill": {
     "duration": 1.931996,
     "end_time": "2025-05-02T06:44:48.483871",
     "exception": false,
     "start_time": "2025-05-02T06:44:46.551875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/laptoppriceprediction/Laptop_price.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c32504b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:48.492856Z",
     "iopub.status.busy": "2025-05-02T06:44:48.492428Z",
     "iopub.status.idle": "2025-05-02T06:44:50.581525Z",
     "shell.execute_reply": "2025-05-02T06:44:50.580531Z"
    },
    "papermill": {
     "duration": 2.095536,
     "end_time": "2025-05-02T06:44:50.583265",
     "exception": false,
     "start_time": "2025-05-02T06:44:48.487729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65b9b7ab",
   "metadata": {
    "papermill": {
     "duration": 0.00325,
     "end_time": "2025-05-02T06:44:50.590205",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.586955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 15px 0; background-color: #000; color: #fff;\" >**Importing and understanding data**</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "16f9d72a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.598590Z",
     "iopub.status.busy": "2025-05-02T06:44:50.598129Z",
     "iopub.status.idle": "2025-05-02T06:44:50.633449Z",
     "shell.execute_reply": "2025-05-02T06:44:50.632719Z"
    },
    "papermill": {
     "duration": 0.041216,
     "end_time": "2025-05-02T06:44:50.634939",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.593723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(r\"/kaggle/input/laptoppriceprediction/Laptop_price.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e8ff3063",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.643437Z",
     "iopub.status.busy": "2025-05-02T06:44:50.643109Z",
     "iopub.status.idle": "2025-05-02T06:44:50.649281Z",
     "shell.execute_reply": "2025-05-02T06:44:50.648390Z"
    },
    "papermill": {
     "duration": 0.012051,
     "end_time": "2025-05-02T06:44:50.650758",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.638707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 7)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8064787b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.659269Z",
     "iopub.status.busy": "2025-05-02T06:44:50.658948Z",
     "iopub.status.idle": "2025-05-02T06:44:50.685939Z",
     "shell.execute_reply": "2025-05-02T06:44:50.685078Z"
    },
    "papermill": {
     "duration": 0.032799,
     "end_time": "2025-05-02T06:44:50.687370",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.654571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 7 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   Brand             1000 non-null   object \n",
      " 1   Processor_Speed   1000 non-null   float64\n",
      " 2   RAM_Size          1000 non-null   int64  \n",
      " 3   Storage_Capacity  1000 non-null   int64  \n",
      " 4   Screen_Size       1000 non-null   float64\n",
      " 5   Weight            1000 non-null   float64\n",
      " 6   Price             1000 non-null   float64\n",
      "dtypes: float64(4), int64(2), object(1)\n",
      "memory usage: 54.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "090bbaaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.696825Z",
     "iopub.status.busy": "2025-05-02T06:44:50.696064Z",
     "iopub.status.idle": "2025-05-02T06:44:50.702695Z",
     "shell.execute_reply": "2025-05-02T06:44:50.701971Z"
    },
    "papermill": {
     "duration": 0.012807,
     "end_time": "2025-05-02T06:44:50.703968",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.691161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a4d4780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.713131Z",
     "iopub.status.busy": "2025-05-02T06:44:50.712490Z",
     "iopub.status.idle": "2025-05-02T06:44:50.736931Z",
     "shell.execute_reply": "2025-05-02T06:44:50.736077Z"
    },
    "papermill": {
     "duration": 0.030431,
     "end_time": "2025-05-02T06:44:50.738425",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.707994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Processor_Speed</th>\n",
       "      <th>RAM_Size</th>\n",
       "      <th>Storage_Capacity</th>\n",
       "      <th>Screen_Size</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>Dell</td>\n",
       "      <td>3.875593</td>\n",
       "      <td>16</td>\n",
       "      <td>512</td>\n",
       "      <td>14.593072</td>\n",
       "      <td>3.659336</td>\n",
       "      <td>17781.524172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>Asus</td>\n",
       "      <td>1.702298</td>\n",
       "      <td>4</td>\n",
       "      <td>512</td>\n",
       "      <td>11.459410</td>\n",
       "      <td>4.852456</td>\n",
       "      <td>16213.281162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>Lenovo</td>\n",
       "      <td>2.288517</td>\n",
       "      <td>8</td>\n",
       "      <td>256</td>\n",
       "      <td>11.783008</td>\n",
       "      <td>2.897696</td>\n",
       "      <td>9453.542470</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Brand  Processor_Speed  RAM_Size  Storage_Capacity  Screen_Size  \\\n",
       "202    Dell         3.875593        16               512    14.593072   \n",
       "880    Asus         1.702298         4               512    11.459410   \n",
       "979  Lenovo         2.288517         8               256    11.783008   \n",
       "\n",
       "       Weight         Price  \n",
       "202  3.659336  17781.524172  \n",
       "880  4.852456  16213.281162  \n",
       "979  2.897696   9453.542470  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91b4fde1",
   "metadata": {
    "papermill": {
     "duration": 0.00372,
     "end_time": "2025-05-02T06:44:50.746143",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.742423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 15px 0; background-color: #000; color: #fff;\">**Data cleaning**</center>\n",
    "\n",
    "> There is nothing for cleaning..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "38c19b76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.754967Z",
     "iopub.status.busy": "2025-05-02T06:44:50.754657Z",
     "iopub.status.idle": "2025-05-02T06:44:50.765605Z",
     "shell.execute_reply": "2025-05-02T06:44:50.764693Z"
    },
    "papermill": {
     "duration": 0.017226,
     "end_time": "2025-05-02T06:44:50.767118",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.749892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Processor_Speed</th>\n",
       "      <th>RAM_Size</th>\n",
       "      <th>Storage_Capacity</th>\n",
       "      <th>Screen_Size</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>642</th>\n",
       "      <td>Acer</td>\n",
       "      <td>2.004634</td>\n",
       "      <td>8</td>\n",
       "      <td>1000</td>\n",
       "      <td>11.789922</td>\n",
       "      <td>4.764540</td>\n",
       "      <td>31446.977488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>458</th>\n",
       "      <td>HP</td>\n",
       "      <td>3.213913</td>\n",
       "      <td>32</td>\n",
       "      <td>512</td>\n",
       "      <td>11.481333</td>\n",
       "      <td>3.958919</td>\n",
       "      <td>18035.130088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>Acer</td>\n",
       "      <td>2.854086</td>\n",
       "      <td>32</td>\n",
       "      <td>512</td>\n",
       "      <td>14.251940</td>\n",
       "      <td>2.340322</td>\n",
       "      <td>18464.505286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Brand  Processor_Speed  RAM_Size  Storage_Capacity  Screen_Size    Weight  \\\n",
       "642  Acer         2.004634         8              1000    11.789922  4.764540   \n",
       "458    HP         3.213913        32               512    11.481333  3.958919   \n",
       "131  Acer         2.854086        32               512    14.251940  2.340322   \n",
       "\n",
       "            Price  \n",
       "642  31446.977488  \n",
       "458  18035.130088  \n",
       "131  18464.505286  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82eedc0a",
   "metadata": {
    "papermill": {
     "duration": 0.003799,
     "end_time": "2025-05-02T06:44:50.775196",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.771397",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 15px 0; background-color: #000; color: #fff;\">**EDA**</center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d5434540",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.784286Z",
     "iopub.status.busy": "2025-05-02T06:44:50.783936Z",
     "iopub.status.idle": "2025-05-02T06:44:50.793794Z",
     "shell.execute_reply": "2025-05-02T06:44:50.792688Z"
    },
    "papermill": {
     "duration": 0.016489,
     "end_time": "2025-05-02T06:44:50.795624",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.779135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Processor_Speed    -0.050737\n",
       "RAM_Size            0.061237\n",
       "Storage_Capacity    0.997908\n",
       "Screen_Size        -0.026740\n",
       "Weight              0.038417\n",
       "Price               1.000000\n",
       "Name: Price, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.iloc[:, 1:].corr()['Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2ff3e51c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.805759Z",
     "iopub.status.busy": "2025-05-02T06:44:50.805242Z",
     "iopub.status.idle": "2025-05-02T06:44:50.825130Z",
     "shell.execute_reply": "2025-05-02T06:44:50.824268Z"
    },
    "papermill": {
     "duration": 0.026331,
     "end_time": "2025-05-02T06:44:50.826452",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.800121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brand</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acer</th>\n",
       "      <td>204</td>\n",
       "      <td>19984.613620</td>\n",
       "      <td>9308.725954</td>\n",
       "      <td>8931.641590</td>\n",
       "      <td>33370.442080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asus</th>\n",
       "      <td>206</td>\n",
       "      <td>19854.238277</td>\n",
       "      <td>9703.720167</td>\n",
       "      <td>8966.377697</td>\n",
       "      <td>33239.412260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dell</th>\n",
       "      <td>210</td>\n",
       "      <td>18866.009978</td>\n",
       "      <td>9188.368528</td>\n",
       "      <td>8836.578529</td>\n",
       "      <td>33489.969689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HP</th>\n",
       "      <td>190</td>\n",
       "      <td>19369.762930</td>\n",
       "      <td>9081.797881</td>\n",
       "      <td>8570.012950</td>\n",
       "      <td>33309.869501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lenovo</th>\n",
       "      <td>190</td>\n",
       "      <td>19974.929725</td>\n",
       "      <td>9776.581255</td>\n",
       "      <td>8780.660812</td>\n",
       "      <td>33503.935037</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Price                                                      \n",
       "       count          mean          std          min           max\n",
       "Brand                                                             \n",
       "Acer     204  19984.613620  9308.725954  8931.641590  33370.442080\n",
       "Asus     206  19854.238277  9703.720167  8966.377697  33239.412260\n",
       "Dell     210  18866.009978  9188.368528  8836.578529  33489.969689\n",
       "HP       190  19369.762930  9081.797881  8570.012950  33309.869501\n",
       "Lenovo   190  19974.929725  9776.581255  8780.660812  33503.935037"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brand_on_price = data.groupby(by='Brand').agg({'Price':['count','mean','std','min','max']})\n",
    "brand_on_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2700ece8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:50.836484Z",
     "iopub.status.busy": "2025-05-02T06:44:50.836152Z",
     "iopub.status.idle": "2025-05-02T06:44:51.120715Z",
     "shell.execute_reply": "2025-05-02T06:44:51.119893Z"
    },
    "papermill": {
     "duration": 0.291515,
     "end_time": "2025-05-02T06:44:51.122358",
     "exception": false,
     "start_time": "2025-05-02T06:44:50.830843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='RAM_Size', ylabel='Storage_Capacity'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x=data.RAM_Size, y=data.Storage_Capacity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3df5f84e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:51.133215Z",
     "iopub.status.busy": "2025-05-02T06:44:51.132890Z",
     "iopub.status.idle": "2025-05-02T06:44:51.324422Z",
     "shell.execute_reply": "2025-05-02T06:44:51.323512Z"
    },
    "papermill": {
     "duration": 0.198702,
     "end_time": "2025-05-02T06:44:51.325945",
     "exception": false,
     "start_time": "2025-05-02T06:44:51.127243",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='RAM_Size', ylabel='Count'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data.RAM_Size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f4116ef7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:51.337811Z",
     "iopub.status.busy": "2025-05-02T06:44:51.337473Z",
     "iopub.status.idle": "2025-05-02T06:44:51.545779Z",
     "shell.execute_reply": "2025-05-02T06:44:51.544858Z"
    },
    "papermill": {
     "duration": 0.215906,
     "end_time": "2025-05-02T06:44:51.547218",
     "exception": false,
     "start_time": "2025-05-02T06:44:51.331312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data.Storage_Capacity)\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "de2d47c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:51.559449Z",
     "iopub.status.busy": "2025-05-02T06:44:51.559166Z",
     "iopub.status.idle": "2025-05-02T06:44:51.653541Z",
     "shell.execute_reply": "2025-05-02T06:44:51.652620Z"
    },
    "papermill": {
     "duration": 0.102266,
     "end_time": "2025-05-02T06:44:51.655100",
     "exception": false,
     "start_time": "2025-05-02T06:44:51.552834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x7d01eba1b090>,\n",
       "  <matplotlib.patches.Wedge at 0x7d01eba5ed50>,\n",
       "  <matplotlib.patches.Wedge at 0x7d01ebc3b1d0>,\n",
       "  <matplotlib.patches.Wedge at 0x7d01eba5f8d0>,\n",
       "  <matplotlib.patches.Wedge at 0x7d01eba70910>],\n",
       " [Text(-0.009891312973391955, 1.099955527249926, ''),\n",
       "  Text(-0.8510648224505133, 0.6969136732675552, ''),\n",
       "  Text(-0.9053099102396138, -0.624831150329385, ''),\n",
       "  Text(-0.16624056487973649, -1.0873656581796514, ''),\n",
       "  Text(1.0921100604882834, 0.13151279702096697, '')])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(brand_on_price.iloc[1], startangle=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3947384",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-02T06:44:51.669372Z",
     "iopub.status.busy": "2025-05-02T06:44:51.668496Z",
     "iopub.status.idle": "2025-05-02T06:44:51.680168Z",
     "shell.execute_reply": "2025-05-02T06:44:51.679359Z"
    },
    "papermill": {
     "duration": 0.019754,
     "end_time": "2025-05-02T06:44:51.681407",
     "exception": false,
     "start_time": "2025-05-02T06:44:51.661653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">Price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brand</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acer</th>\n",
       "      <td>204</td>\n",
       "      <td>19984.613620</td>\n",
       "      <td>9308.725954</td>\n",
       "      <td>8931.641590</td>\n",
       "      <td>33370.442080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asus</th>\n",
       "      <td>206</td>\n",
       "      <td>19854.238277</td>\n",
       "      <td>9703.720167</td>\n",
       "      <td>8966.377697</td>\n",
       "      <td>33239.412260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dell</th>\n",
       "      <td>210</td>\n",
       "      <td>18866.009978</td>\n",
       "      <td>9188.368528</td>\n",
       "      <td>8836.578529</td>\n",
       "      <td>33489.969689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HP</th>\n",
       "      <td>190</td>\n",
       "      <td>19369.762930</td>\n",
       "      <td>9081.797881</td>\n",
       "      <td>8570.012950</td>\n",
       "      <td>33309.869501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lenovo</th>\n",
       "      <td>190</td>\n",
       "      <td>19974.929725</td>\n",
       "      <td>9776.581255</td>\n",
       "      <td>8780.660812</td>\n",
       "      <td>33503.935037</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Price                                                      \n",
       "       count          mean          std          min           max\n",
       "Brand                                                             \n",
       "Acer     204  19984.613620  9308.725954  8931.641590  33370.442080\n",
       "Asus     206  19854.238277  9703.720167  8966.377697  33239.412260\n",
       "Dell     210  18866.009978  9188.368528  8836.578529  33489.969689\n",
       "HP       190  19369.762930  9081.797881  8570.012950  33309.869501\n",
       "Lenovo   190  19974.929725  9776.581255  8780.660812  33503.935037"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brand_on_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30bd88ab",
   "metadata": {
    "papermill": {
     "duration": 0.006024,
     "end_time": "2025-05-02T06:44:51.693683",
     "exception": false,
     "start_time": "2025-05-02T06:44:51.687659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4334600,
     "sourceId": 7446899,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.645351,
   "end_time": "2025-05-02T06:44:52.420009",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-02T06:44:41.774658",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
