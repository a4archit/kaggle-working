{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4aeb5b70",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:19.802469Z",
     "iopub.status.busy": "2025-06-12T09:59:19.802154Z",
     "iopub.status.idle": "2025-06-12T09:59:23.731732Z",
     "shell.execute_reply": "2025-06-12T09:59:23.730772Z"
    },
    "papermill": {
     "duration": 3.938485,
     "end_time": "2025-06-12T09:59:23.733355",
     "exception": false,
     "start_time": "2025-06-12T09:59:19.794870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/student-habits-vs-academic-performance/student_habits_performance.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "adfb4833",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:23.745939Z",
     "iopub.status.busy": "2025-06-12T09:59:23.744774Z",
     "iopub.status.idle": "2025-06-12T09:59:24.316416Z",
     "shell.execute_reply": "2025-06-12T09:59:24.315519Z"
    },
    "papermill": {
     "duration": 0.579516,
     "end_time": "2025-06-12T09:59:24.318318",
     "exception": false,
     "start_time": "2025-06-12T09:59:23.738802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder, StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d785df0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.330686Z",
     "iopub.status.busy": "2025-06-12T09:59:24.329745Z",
     "iopub.status.idle": "2025-06-12T09:59:24.352238Z",
     "shell.execute_reply": "2025-06-12T09:59:24.351363Z"
    },
    "papermill": {
     "duration": 0.030179,
     "end_time": "2025-06-12T09:59:24.353882",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.323703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(r\"/kaggle/input/student-habits-vs-academic-performance/student_habits_performance.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7852318",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.365349Z",
     "iopub.status.busy": "2025-06-12T09:59:24.365035Z",
     "iopub.status.idle": "2025-06-12T09:59:24.396631Z",
     "shell.execute_reply": "2025-06-12T09:59:24.395425Z"
    },
    "papermill": {
     "duration": 0.039197,
     "end_time": "2025-06-12T09:59:24.398281",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.359084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 16 columns):\n",
      " #   Column                         Non-Null Count  Dtype  \n",
      "---  ------                         --------------  -----  \n",
      " 0   student_id                     1000 non-null   object \n",
      " 1   age                            1000 non-null   int64  \n",
      " 2   gender                         1000 non-null   object \n",
      " 3   study_hours_per_day            1000 non-null   float64\n",
      " 4   social_media_hours             1000 non-null   float64\n",
      " 5   netflix_hours                  1000 non-null   float64\n",
      " 6   part_time_job                  1000 non-null   object \n",
      " 7   attendance_percentage          1000 non-null   float64\n",
      " 8   sleep_hours                    1000 non-null   float64\n",
      " 9   diet_quality                   1000 non-null   object \n",
      " 10  exercise_frequency             1000 non-null   int64  \n",
      " 11  parental_education_level       909 non-null    object \n",
      " 12  internet_quality               1000 non-null   object \n",
      " 13  mental_health_rating           1000 non-null   int64  \n",
      " 14  extracurricular_participation  1000 non-null   object \n",
      " 15  exam_score                     1000 non-null   float64\n",
      "dtypes: float64(6), int64(3), object(7)\n",
      "memory usage: 125.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8ce62e5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.409910Z",
     "iopub.status.busy": "2025-06-12T09:59:24.409586Z",
     "iopub.status.idle": "2025-06-12T09:59:24.440452Z",
     "shell.execute_reply": "2025-06-12T09:59:24.439588Z"
    },
    "papermill": {
     "duration": 0.0385,
     "end_time": "2025-06-12T09:59:24.442101",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.403601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>student_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>study_hours_per_day</th>\n",
       "      <th>social_media_hours</th>\n",
       "      <th>netflix_hours</th>\n",
       "      <th>part_time_job</th>\n",
       "      <th>attendance_percentage</th>\n",
       "      <th>sleep_hours</th>\n",
       "      <th>diet_quality</th>\n",
       "      <th>exercise_frequency</th>\n",
       "      <th>parental_education_level</th>\n",
       "      <th>internet_quality</th>\n",
       "      <th>mental_health_rating</th>\n",
       "      <th>extracurricular_participation</th>\n",
       "      <th>exam_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>S1298</td>\n",
       "      <td>21</td>\n",
       "      <td>Female</td>\n",
       "      <td>5.4</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>No</td>\n",
       "      <td>88.1</td>\n",
       "      <td>6.2</td>\n",
       "      <td>Poor</td>\n",
       "      <td>3</td>\n",
       "      <td>High School</td>\n",
       "      <td>Average</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>91.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>S1182</td>\n",
       "      <td>22</td>\n",
       "      <td>Male</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0.7</td>\n",
       "      <td>No</td>\n",
       "      <td>69.2</td>\n",
       "      <td>7.2</td>\n",
       "      <td>Good</td>\n",
       "      <td>1</td>\n",
       "      <td>Master</td>\n",
       "      <td>Poor</td>\n",
       "      <td>10</td>\n",
       "      <td>No</td>\n",
       "      <td>79.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>S1154</td>\n",
       "      <td>21</td>\n",
       "      <td>Male</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.3</td>\n",
       "      <td>1.4</td>\n",
       "      <td>No</td>\n",
       "      <td>66.8</td>\n",
       "      <td>7.4</td>\n",
       "      <td>Fair</td>\n",
       "      <td>1</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>Good</td>\n",
       "      <td>3</td>\n",
       "      <td>No</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    student_id  age  gender  study_hours_per_day  social_media_hours  \\\n",
       "298      S1298   21  Female                  5.4                 3.1   \n",
       "182      S1182   22    Male                  4.2                 3.1   \n",
       "154      S1154   21    Male                  3.5                 3.3   \n",
       "\n",
       "     netflix_hours part_time_job  attendance_percentage  sleep_hours  \\\n",
       "298            1.8            No                   88.1          6.2   \n",
       "182            0.7            No                   69.2          7.2   \n",
       "154            1.4            No                   66.8          7.4   \n",
       "\n",
       "    diet_quality  exercise_frequency parental_education_level  \\\n",
       "298         Poor                   3              High School   \n",
       "182         Good                   1                   Master   \n",
       "154         Fair                   1                 Bachelor   \n",
       "\n",
       "    internet_quality  mental_health_rating extracurricular_participation  \\\n",
       "298          Average                     4                           Yes   \n",
       "182             Poor                    10                            No   \n",
       "154             Good                     3                            No   \n",
       "\n",
       "     exam_score  \n",
       "298        91.3  \n",
       "182        79.9  \n",
       "154        65.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "356c1a5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.454224Z",
     "iopub.status.busy": "2025-06-12T09:59:24.453896Z",
     "iopub.status.idle": "2025-06-12T09:59:24.491692Z",
     "shell.execute_reply": "2025-06-12T09:59:24.490779Z"
    },
    "papermill": {
     "duration": 0.045721,
     "end_time": "2025-06-12T09:59:24.493230",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.447509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>study_hours_per_day</th>\n",
       "      <th>social_media_hours</th>\n",
       "      <th>netflix_hours</th>\n",
       "      <th>attendance_percentage</th>\n",
       "      <th>sleep_hours</th>\n",
       "      <th>exercise_frequency</th>\n",
       "      <th>mental_health_rating</th>\n",
       "      <th>exam_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000.0000</td>\n",
       "      <td>1000.00000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>20.4980</td>\n",
       "      <td>3.55010</td>\n",
       "      <td>2.505500</td>\n",
       "      <td>1.819700</td>\n",
       "      <td>84.131700</td>\n",
       "      <td>6.470100</td>\n",
       "      <td>3.042000</td>\n",
       "      <td>5.438000</td>\n",
       "      <td>69.601500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.3081</td>\n",
       "      <td>1.46889</td>\n",
       "      <td>1.172422</td>\n",
       "      <td>1.075118</td>\n",
       "      <td>9.399246</td>\n",
       "      <td>1.226377</td>\n",
       "      <td>2.025423</td>\n",
       "      <td>2.847501</td>\n",
       "      <td>16.888564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>17.0000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>3.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>18.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>18.7500</td>\n",
       "      <td>2.60000</td>\n",
       "      <td>1.700000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>5.600000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>58.475000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>20.0000</td>\n",
       "      <td>3.50000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>84.400000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>70.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>23.0000</td>\n",
       "      <td>4.50000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>2.525000</td>\n",
       "      <td>91.025000</td>\n",
       "      <td>7.300000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>81.325000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>24.0000</td>\n",
       "      <td>8.30000</td>\n",
       "      <td>7.200000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             age  study_hours_per_day  social_media_hours  netflix_hours  \\\n",
       "count  1000.0000           1000.00000         1000.000000    1000.000000   \n",
       "mean     20.4980              3.55010            2.505500       1.819700   \n",
       "std       2.3081              1.46889            1.172422       1.075118   \n",
       "min      17.0000              0.00000            0.000000       0.000000   \n",
       "25%      18.7500              2.60000            1.700000       1.000000   \n",
       "50%      20.0000              3.50000            2.500000       1.800000   \n",
       "75%      23.0000              4.50000            3.300000       2.525000   \n",
       "max      24.0000              8.30000            7.200000       5.400000   \n",
       "\n",
       "       attendance_percentage  sleep_hours  exercise_frequency  \\\n",
       "count            1000.000000  1000.000000         1000.000000   \n",
       "mean               84.131700     6.470100            3.042000   \n",
       "std                 9.399246     1.226377            2.025423   \n",
       "min                56.000000     3.200000            0.000000   \n",
       "25%                78.000000     5.600000            1.000000   \n",
       "50%                84.400000     6.500000            3.000000   \n",
       "75%                91.025000     7.300000            5.000000   \n",
       "max               100.000000    10.000000            6.000000   \n",
       "\n",
       "       mental_health_rating   exam_score  \n",
       "count           1000.000000  1000.000000  \n",
       "mean               5.438000    69.601500  \n",
       "std                2.847501    16.888564  \n",
       "min                1.000000    18.400000  \n",
       "25%                3.000000    58.475000  \n",
       "50%                5.000000    70.500000  \n",
       "75%                8.000000    81.325000  \n",
       "max               10.000000   100.000000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef1e7362",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.505700Z",
     "iopub.status.busy": "2025-06-12T09:59:24.505377Z",
     "iopub.status.idle": "2025-06-12T09:59:24.513817Z",
     "shell.execute_reply": "2025-06-12T09:59:24.513014Z"
    },
    "papermill": {
     "duration": 0.016156,
     "end_time": "2025-06-12T09:59:24.515120",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.498964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "student_id                        0\n",
       "age                               0\n",
       "gender                            0\n",
       "study_hours_per_day               0\n",
       "social_media_hours                0\n",
       "netflix_hours                     0\n",
       "part_time_job                     0\n",
       "attendance_percentage             0\n",
       "sleep_hours                       0\n",
       "diet_quality                      0\n",
       "exercise_frequency                0\n",
       "parental_education_level         91\n",
       "internet_quality                  0\n",
       "mental_health_rating              0\n",
       "extracurricular_participation     0\n",
       "exam_score                        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0a4ae1e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.527643Z",
     "iopub.status.busy": "2025-06-12T09:59:24.527337Z",
     "iopub.status.idle": "2025-06-12T09:59:24.536071Z",
     "shell.execute_reply": "2025-06-12T09:59:24.535231Z"
    },
    "papermill": {
     "duration": 0.01661,
     "end_time": "2025-06-12T09:59:24.537474",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.520864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "81bcb933",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.550032Z",
     "iopub.status.busy": "2025-06-12T09:59:24.549738Z",
     "iopub.status.idle": "2025-06-12T09:59:24.555646Z",
     "shell.execute_reply": "2025-06-12T09:59:24.554474Z"
    },
    "papermill": {
     "duration": 0.013958,
     "end_time": "2025-06-12T09:59:24.557084",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.543126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Master', 'High School', 'Bachelor', nan], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.parental_education_level.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d04a85c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.570222Z",
     "iopub.status.busy": "2025-06-12T09:59:24.569905Z",
     "iopub.status.idle": "2025-06-12T09:59:24.575620Z",
     "shell.execute_reply": "2025-06-12T09:59:24.574775Z"
    },
    "papermill": {
     "duration": 0.013996,
     "end_time": "2025-06-12T09:59:24.577319",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.563323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/943529539.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df.parental_education_level.fillna('not to say', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "df.parental_education_level.fillna('not to say', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b17fa929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.589968Z",
     "iopub.status.busy": "2025-06-12T09:59:24.589637Z",
     "iopub.status.idle": "2025-06-12T09:59:24.598239Z",
     "shell.execute_reply": "2025-06-12T09:59:24.597555Z"
    },
    "papermill": {
     "duration": 0.01661,
     "end_time": "2025-06-12T09:59:24.599562",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.582952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "student_id                       1000\n",
       "gender                              3\n",
       "part_time_job                       2\n",
       "diet_quality                        3\n",
       "parental_education_level            4\n",
       "internet_quality                    3\n",
       "extracurricular_participation       2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(include=['object']).nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "38f6358b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.613208Z",
     "iopub.status.busy": "2025-06-12T09:59:24.612388Z",
     "iopub.status.idle": "2025-06-12T09:59:24.618357Z",
     "shell.execute_reply": "2025-06-12T09:59:24.617558Z"
    },
    "papermill": {
     "duration": 0.014349,
     "end_time": "2025-06-12T09:59:24.619838",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.605489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['student_id', 'gender','extracurricular_participation','attendance_percentage',\n",
    "                 'age','diet_quality','parental_education_level','internet_quality','part_time_job',\n",
    "                'social_media_hours','netflix_hours','sleep_hours'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "53e6c6d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.632958Z",
     "iopub.status.busy": "2025-06-12T09:59:24.632621Z",
     "iopub.status.idle": "2025-06-12T09:59:24.642009Z",
     "shell.execute_reply": "2025-06-12T09:59:24.641214Z"
    },
    "papermill": {
     "duration": 0.017489,
     "end_time": "2025-06-12T09:59:24.643325",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.625836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_hours_per_day</th>\n",
       "      <th>exercise_frequency</th>\n",
       "      <th>mental_health_rating</th>\n",
       "      <th>exam_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>459</th>\n",
       "      <td>5.2</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>77.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>547</th>\n",
       "      <td>6.3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>95.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>601</th>\n",
       "      <td>4.6</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>80.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     study_hours_per_day  exercise_frequency  mental_health_rating  exam_score\n",
       "459                  5.2                   2                     7        77.9\n",
       "547                  6.3                   6                     5        95.6\n",
       "601                  4.6                   0                     5        80.2"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4e5f5988",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.656515Z",
     "iopub.status.busy": "2025-06-12T09:59:24.656233Z",
     "iopub.status.idle": "2025-06-12T09:59:24.661071Z",
     "shell.execute_reply": "2025-06-12T09:59:24.660202Z"
    },
    "papermill": {
     "duration": 0.013147,
     "end_time": "2025-06-12T09:59:24.662488",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.649341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for feature in df.select_dtypes(include=['object']):\n",
    "    df[feature] = df[feature].apply(lambda x: x.lower())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e59cbb8",
   "metadata": {
    "papermill": {
     "duration": 0.005814,
     "end_time": "2025-06-12T09:59:24.674259",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.668445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model working"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c0aa728b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.687656Z",
     "iopub.status.busy": "2025-06-12T09:59:24.686949Z",
     "iopub.status.idle": "2025-06-12T09:59:24.690703Z",
     "shell.execute_reply": "2025-06-12T09:59:24.689927Z"
    },
    "papermill": {
     "duration": 0.011931,
     "end_time": "2025-06-12T09:59:24.692104",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.680173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# target = 'exam_score'\n",
    "\n",
    "# X = df.drop(columns=[target])\n",
    "# y = df[target]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "57b13c1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.705889Z",
     "iopub.status.busy": "2025-06-12T09:59:24.705500Z",
     "iopub.status.idle": "2025-06-12T09:59:24.709896Z",
     "shell.execute_reply": "2025-06-12T09:59:24.709168Z"
    },
    "papermill": {
     "duration": 0.012997,
     "end_time": "2025-06-12T09:59:24.711231",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.698234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# categorical_cols = ['part_time_job'] #, 'diet_quality','parental_education_level','internet_quality']\n",
    "\n",
    "# preprocessing = ColumnTransformer(\n",
    "#     transformers = [\n",
    "#         ('encoding', OrdinalEncoder(dtype='int16'), categorical_cols)\n",
    "#     ], remainder='passthrough'\n",
    "# )\n",
    "\n",
    "# encoded_array = preprocessing.fit_transform(X)\n",
    "# encoded_df = pd.DataFrame(encoded_array, columns=list(preprocessing.get_feature_names_out()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5b786b4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.724721Z",
     "iopub.status.busy": "2025-06-12T09:59:24.724399Z",
     "iopub.status.idle": "2025-06-12T09:59:24.728777Z",
     "shell.execute_reply": "2025-06-12T09:59:24.727806Z"
    },
    "papermill": {
     "duration": 0.013057,
     "end_time": "2025-06-12T09:59:24.730353",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.717296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## removing prefix words ('remainder','encoded')\n",
    "# encoded_df.rename(columns={col:col.split('__')[-1] for col in encoded_df}, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "de951283",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.743644Z",
     "iopub.status.busy": "2025-06-12T09:59:24.743308Z",
     "iopub.status.idle": "2025-06-12T09:59:24.755657Z",
     "shell.execute_reply": "2025-06-12T09:59:24.754758Z"
    },
    "papermill": {
     "duration": 0.020637,
     "end_time": "2025-06-12T09:59:24.757052",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.736415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_hours_per_day</th>\n",
       "      <th>exercise_frequency</th>\n",
       "      <th>mental_health_rating</th>\n",
       "      <th>exam_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>56.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6.9</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>34.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>26.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>66.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.6</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>76.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2.9</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>65.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>64.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>69.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>4.3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>74.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     study_hours_per_day  exercise_frequency  mental_health_rating  exam_score\n",
       "0                    0.0                   6                     8        56.2\n",
       "1                    6.9                   6                     8       100.0\n",
       "2                    1.4                   1                     1        34.3\n",
       "3                    1.0                   4                     1        26.8\n",
       "4                    5.0                   3                     1        66.4\n",
       "..                   ...                 ...                   ...         ...\n",
       "995                  2.6                   2                     6        76.1\n",
       "996                  2.9                   1                     6        65.9\n",
       "997                  3.0                   5                     9        64.4\n",
       "998                  5.4                   0                     1        69.7\n",
       "999                  4.3                   2                     8        74.9\n",
       "\n",
       "[1000 rows x 4 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "50be8b41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.770956Z",
     "iopub.status.busy": "2025-06-12T09:59:24.770618Z",
     "iopub.status.idle": "2025-06-12T09:59:24.781087Z",
     "shell.execute_reply": "2025-06-12T09:59:24.780231Z"
    },
    "papermill": {
     "duration": 0.019269,
     "end_time": "2025-06-12T09:59:24.782605",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.763336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X = df.select_dtypes(exclude=['object']).drop(columns=[target])\n",
    "target = 'exam_score'\n",
    "\n",
    "X = df.drop(columns=[target])\n",
    "y = df[target]\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, random_state=42, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a27d8d34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.796267Z",
     "iopub.status.busy": "2025-06-12T09:59:24.795959Z",
     "iopub.status.idle": "2025-06-12T09:59:24.803112Z",
     "shell.execute_reply": "2025-06-12T09:59:24.802240Z"
    },
    "papermill": {
     "duration": 0.015585,
     "end_time": "2025-06-12T09:59:24.804524",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.788939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "study_hours_per_day     0.825419\n",
       "exercise_frequency      0.160107\n",
       "mental_health_rating    0.321523\n",
       "exam_score              1.000000\n",
       "Name: exam_score, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pd.concat([encoded_df, y], axis=1).corr()['exam_score']\n",
    "df.corr()[target]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b4ab97ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.818566Z",
     "iopub.status.busy": "2025-06-12T09:59:24.818251Z",
     "iopub.status.idle": "2025-06-12T09:59:24.835337Z",
     "shell.execute_reply": "2025-06-12T09:59:24.834358Z"
    },
    "papermill": {
     "duration": 0.025593,
     "end_time": "2025-06-12T09:59:24.836792",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.811199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE: 7.96\n",
      "MAE: 6.23\n",
      "R2 Score: 0.7526\n"
     ]
    }
   ],
   "source": [
    "dtree = DecisionTreeRegressor(ccp_alpha=0.001, criterion='absolute_error', max_depth=6, min_samples_split=5)\n",
    "\n",
    "dtree.fit(X_train, y_train)\n",
    "y_pred = dtree.predict(X_test)\n",
    "print(f\"MSE: {round(mean_squared_error(y_test, y_pred)**(1/2),2)}\")\n",
    "print(f\"MAE: {round(mean_absolute_error(y_test, y_pred),2)}\")\n",
    "print(f\"R2 Score: {round(r2_score(y_test, y_pred),4)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5986f644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.851167Z",
     "iopub.status.busy": "2025-06-12T09:59:24.850363Z",
     "iopub.status.idle": "2025-06-12T09:59:24.862095Z",
     "shell.execute_reply": "2025-06-12T09:59:24.861305Z"
    },
    "papermill": {
     "duration": 0.020264,
     "end_time": "2025-06-12T09:59:24.863420",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.843156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE: 7.31\n",
      "MAE: 5.82\n",
      "R2 Score: 0.7918\n"
     ]
    }
   ],
   "source": [
    "knn = KNeighborsRegressor(n_neighbors=8)\n",
    "\n",
    "knn.fit(X_train, y_train)\n",
    "y_pred = knn.predict(X_test)\n",
    "print(f\"MSE: {round(mean_squared_error(y_test, y_pred)**(1/2),2)}\")\n",
    "print(f\"MAE: {round(mean_absolute_error(y_test, y_pred),2)}\")\n",
    "print(f\"R2 Score: {round(r2_score(y_test, y_pred),4)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "70ff06a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.877342Z",
     "iopub.status.busy": "2025-06-12T09:59:24.877009Z",
     "iopub.status.idle": "2025-06-12T09:59:24.881062Z",
     "shell.execute_reply": "2025-06-12T09:59:24.880206Z"
    },
    "papermill": {
     "duration": 0.012898,
     "end_time": "2025-06-12T09:59:24.882773",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.869875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model = Pipeline([\n",
    "#     ('preprocessing', preprocessing),\n",
    "#     ('prediction', dtree)\n",
    "# ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "028addd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.897276Z",
     "iopub.status.busy": "2025-06-12T09:59:24.896842Z",
     "iopub.status.idle": "2025-06-12T09:59:24.902290Z",
     "shell.execute_reply": "2025-06-12T09:59:24.901552Z"
    },
    "papermill": {
     "duration": 0.013971,
     "end_time": "2025-06-12T09:59:24.903481",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.889510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 3)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13fd0266",
   "metadata": {
    "papermill": {
     "duration": 0.006112,
     "end_time": "2025-06-12T09:59:24.916132",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.910020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7ba40527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.929785Z",
     "iopub.status.busy": "2025-06-12T09:59:24.929466Z",
     "iopub.status.idle": "2025-06-12T09:59:24.933796Z",
     "shell.execute_reply": "2025-06-12T09:59:24.932726Z"
    },
    "papermill": {
     "duration": 0.012906,
     "end_time": "2025-06-12T09:59:24.935238",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.922332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from typing import List, Dict, Literal, Annotated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dc38b52d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.949284Z",
     "iopub.status.busy": "2025-06-12T09:59:24.948979Z",
     "iopub.status.idle": "2025-06-12T09:59:24.962199Z",
     "shell.execute_reply": "2025-06-12T09:59:24.961302Z"
    },
    "papermill": {
     "duration": 0.021898,
     "end_time": "2025-06-12T09:59:24.963602",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.941704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77.8125"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class ExamScorePredictor:\n",
    "    \n",
    "    \"\"\" \n",
    "    \n",
    "    Introduction:\n",
    "    =============\n",
    "    \n",
    "        This is the class that contains the usefull functions for predicting the exam score \n",
    "        of an college student \n",
    "\n",
    "\n",
    "\n",
    "    Why this?\n",
    "    ========\n",
    "\n",
    "        I built this project to practice my skills, i.e., API development, Site Integration\n",
    "        and successful deplyoment to the server.\n",
    "        \n",
    "    \"\"\"\n",
    "\n",
    "\n",
    "    ## constructor\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "\n",
    "    ## function (01)\n",
    "    def predict(self,\n",
    "                # age: int,\n",
    "                exercise_frequency: Annotated[int, '0 to 6'],\n",
    "                mental_health_rating: Annotated[int, '1 to 10'],\n",
    "                study_hours: float\n",
    "                # sleep_hours: float,\n",
    "                # netflix_hours: float,\n",
    "                # social_media_hours: float,\n",
    "                # attendance_percentage: float,\n",
    "                # is_part_time_job: Literal['yes','no'],\n",
    "                # diet_quality: Literal['fair','good','poor'],\n",
    "                # internet_quality: Literal['good','average','poor'],\n",
    "                # parental_education_level: Literal['high school', 'bachelor','master','not to say']\n",
    "                \n",
    "               ) -> float | None :\n",
    "        \n",
    "        \"\"\" This function will predict the Exam Score of student \"\"\"\n",
    "\n",
    "        ## Note: we are not checking (validating) the parameters (because our focus on other tech regarding this project)\n",
    "\n",
    "        ## creating dictionary of input values\n",
    "        user_data: Dict[str, str] = {\n",
    "            # 'part_time_job': is_part_time_job,\n",
    "    \t\t# 'diet_quality': diet_quality,\n",
    "    \t\t# 'parental_education_level': parental_education_level,\n",
    "    \t\t# 'internet_quality': internet_quality,\n",
    "    \t\t# 'age': age,\n",
    "    \t\t# 'social_media_hours': social_media_hours,\n",
    "    \t\t# 'netflix_hours': netflix_hours,\n",
    "    \t\t# 'attendance_percentage': attendance_percentage,\n",
    "    \t\t# 'sleep_hours': sleep_hours,\n",
    "            # 'exam_score': 0\n",
    "    \t\t'study_hours_per_day': study_hours,\n",
    "    \t\t'exercise_frequency': exercise_frequency,\n",
    "    \t\t'mental_health_rating': mental_health_rating\n",
    "        }\n",
    "        \n",
    "\n",
    "        xdf = pd.DataFrame(user_data, index=[1])\n",
    "\n",
    "        ## preprocessing (applying column transformations)\n",
    "        # encoded_array = preprocessing.transform(xdf)\n",
    "\n",
    "        ## converting numpy array to pandas dataframe\n",
    "        # encoded_df = pd.DataFrame(encoded_array, columns=list(preprocessing.get_feature_names_out()))\n",
    "\n",
    "        ## removing prefix from columns name\n",
    "        # encoded_df.rename(columns={col:col.split('__')[-1] for col in encoded_df}, inplace=True)\n",
    "\n",
    "        ## scaling\n",
    "        scaled_data = scaler.transform(xdf)\n",
    "\n",
    "        ## predicting\n",
    "        prediction_dtree = dtree.predict(scaled_data)\n",
    "        prediction_knn = knn.predict(scaled_data)\n",
    "\n",
    "        ## average prediction\n",
    "        exam_score = (prediction_dtree[0] + prediction_knn[0])/2\n",
    "\n",
    "        return prediction_knn[0]\n",
    "        \n",
    "\n",
    "        \n",
    "\n",
    "\n",
    "if __name__ == \"__main__\": # ------------------------------------------------------------------- Main execution\n",
    "    \n",
    "    esp = ExamScorePredictor()\n",
    "    predicted_exam_score = esp.predict(\n",
    "                # age = 20,\n",
    "                exercise_frequency = 1,\n",
    "                mental_health_rating = 7,\n",
    "                study_hours = 4\n",
    "                # sleep_hours = 7,\n",
    "                # netflix_hours = 1.2,\n",
    "                # social_media_hours = 3.2,\n",
    "                # attendance_percentage = 65,\n",
    "                # is_part_time_job = 'yes',\n",
    "                # diet_quality = 'fair',\n",
    "                # internet_quality = 'good',\n",
    "                # parental_education_level = 'bachelor'\n",
    "                )\n",
    "\n",
    "\n",
    "predicted_exam_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8698967b",
   "metadata": {
    "papermill": {
     "duration": 0.00634,
     "end_time": "2025-06-12T09:59:24.976382",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.970042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Saving files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "08fb1ca9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-12T09:59:24.990380Z",
     "iopub.status.busy": "2025-06-12T09:59:24.990076Z",
     "iopub.status.idle": "2025-06-12T09:59:24.995372Z",
     "shell.execute_reply": "2025-06-12T09:59:24.994570Z"
    },
    "papermill": {
     "duration": 0.01412,
     "end_time": "2025-06-12T09:59:24.996829",
     "exception": false,
     "start_time": "2025-06-12T09:59:24.982709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "## saving preprocessor\n",
    "# pickle.dump(preprocessing, open('preprocessor.pkl', 'wb'))\n",
    "\n",
    "## saving scaler\n",
    "pickle.dump(scaler, open('scaler.pkl', 'wb'))\n",
    "\n",
    "## saving model\n",
    "# pickle.dump(dtree, open('model.pkl', 'wb'))\n",
    "pickle.dump(knn, open('model.pkl', 'wb'))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7122663,
     "sourceId": 11376681,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.80557,
   "end_time": "2025-06-12T09:59:25.724084",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-12T09:59:14.918514",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
