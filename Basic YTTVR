{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7233960,"sourceType":"datasetVersion","datasetId":4188923}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:22.928695Z","iopub.execute_input":"2024-12-07T10:35:22.929100Z","iopub.status.idle":"2024-12-07T10:35:22.940894Z","shell.execute_reply.started":"2024-12-07T10:35:22.929063Z","shell.execute_reply":"2024-12-07T10:35:22.939630Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/youtube-trending-videos-dataset/youtube.csv\n","output_type":"stream"}],"execution_count":251},{"cell_type":"code","source":"data = pd.read_csv(r\"/kaggle/input/youtube-trending-videos-dataset/youtube.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:22.942747Z","iopub.execute_input":"2024-12-07T10:35:22.943126Z","iopub.status.idle":"2024-12-07T10:35:24.390780Z","shell.execute_reply.started":"2024-12-07T10:35:22.943090Z","shell.execute_reply":"2024-12-07T10:35:24.389564Z"}},"outputs":[],"execution_count":252},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.393554Z","iopub.execute_input":"2024-12-07T10:35:24.394035Z","iopub.status.idle":"2024-12-07T10:35:24.402578Z","shell.execute_reply.started":"2024-12-07T10:35:24.393982Z","shell.execute_reply":"2024-12-07T10:35:24.401143Z"}},"outputs":[{"execution_count":253,"output_type":"execute_result","data":{"text/plain":"(161470, 18)"},"metadata":{}}],"execution_count":253},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.404179Z","iopub.execute_input":"2024-12-07T10:35:24.404567Z","iopub.status.idle":"2024-12-07T10:35:24.501878Z","shell.execute_reply.started":"2024-12-07T10:35:24.404532Z","shell.execute_reply":"2024-12-07T10:35:24.500635Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 161470 entries, 0 to 161469\nData columns (total 18 columns):\n #   Column                  Non-Null Count   Dtype \n---  ------                  --------------   ----- \n 0   index                   161470 non-null  int64 \n 1   video_id                161470 non-null  object\n 2   trending_date           161470 non-null  object\n 3   title                   161470 non-null  object\n 4   channel_title           161470 non-null  object\n 5   category_id             161470 non-null  int64 \n 6   publish_date            161470 non-null  object\n 7   time_frame              161470 non-null  object\n 8   published_day_of_week   161470 non-null  object\n 9   publish_country         161470 non-null  object\n 10  tags                    161470 non-null  object\n 11  views                   161470 non-null  int64 \n 12  likes                   161470 non-null  int64 \n 13  dislikes                161470 non-null  int64 \n 14  comment_count           161470 non-null  int64 \n 15  comments_disabled       161470 non-null  bool  \n 16  ratings_disabled        161470 non-null  bool  \n 17  video_error_or_removed  161470 non-null  bool  \ndtypes: bool(3), int64(6), object(9)\nmemory usage: 18.9+ MB\n","output_type":"stream"}],"execution_count":254},{"cell_type":"code","source":"xdata = data.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.504580Z","iopub.execute_input":"2024-12-07T10:35:24.504953Z","iopub.status.idle":"2024-12-07T10:35:24.522757Z","shell.execute_reply.started":"2024-12-07T10:35:24.504919Z","shell.execute_reply":"2024-12-07T10:35:24.521226Z"}},"outputs":[],"execution_count":255},{"cell_type":"code","source":"data.sample(2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.524464Z","iopub.execute_input":"2024-12-07T10:35:24.524798Z","iopub.status.idle":"2024-12-07T10:35:24.547775Z","shell.execute_reply.started":"2024-12-07T10:35:24.524766Z","shell.execute_reply":"2024-12-07T10:35:24.546508Z"}},"outputs":[{"execution_count":256,"output_type":"execute_result","data":{"text/plain":"         index     video_id trending_date  \\\n156148  156148  eiudTjsGM7g      18.19.05   \n71542    71542  jY3lRSmdLQg      18.25.04   \n\n                                                    title  \\\n156148  Spill Your Guts or Fill Your Guts w/ Steven Tyler   \n71542          Kygo, Miguel - Remind Me to Forget (Audio)   \n\n                               channel_title  category_id publish_date  \\\n156148  The Late Late Show with James Corden           24   18/05/2018   \n71542                       KygoOfficialVEVO           10   21/03/2018   \n\n            time_frame published_day_of_week publish_country  \\\n156148    5:00 to 5:59                Friday          CANADA   \n71542   11:00 to 11:59             Wednesday              GB   \n\n                                                     tags     views   likes  \\\n156148  The Late Late Show|\"Late Late Show\"|\"James Cor...    807240   22484   \n71542   Kygovevo|\"vevo\"|\"official\"|\"video\"|\"music vide...  18383668  137271   \n\n        dislikes  comment_count  comments_disabled  ratings_disabled  \\\n156148       263           1451              False             False   \n71542       4593           1640              False             False   \n\n        video_error_or_removed  \n156148                   False  \n71542                    False  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>video_id</th>\n      <th>trending_date</th>\n      <th>title</th>\n      <th>channel_title</th>\n      <th>category_id</th>\n      <th>publish_date</th>\n      <th>time_frame</th>\n      <th>published_day_of_week</th>\n      <th>publish_country</th>\n      <th>tags</th>\n      <th>views</th>\n      <th>likes</th>\n      <th>dislikes</th>\n      <th>comment_count</th>\n      <th>comments_disabled</th>\n      <th>ratings_disabled</th>\n      <th>video_error_or_removed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>156148</th>\n      <td>156148</td>\n      <td>eiudTjsGM7g</td>\n      <td>18.19.05</td>\n      <td>Spill Your Guts or Fill Your Guts w/ Steven Tyler</td>\n      <td>The Late Late Show with James Corden</td>\n      <td>24</td>\n      <td>18/05/2018</td>\n      <td>5:00 to 5:59</td>\n      <td>Friday</td>\n      <td>CANADA</td>\n      <td>The Late Late Show|\"Late Late Show\"|\"James Cor...</td>\n      <td>807240</td>\n      <td>22484</td>\n      <td>263</td>\n      <td>1451</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>71542</th>\n      <td>71542</td>\n      <td>jY3lRSmdLQg</td>\n      <td>18.25.04</td>\n      <td>Kygo, Miguel - Remind Me to Forget (Audio)</td>\n      <td>KygoOfficialVEVO</td>\n      <td>10</td>\n      <td>21/03/2018</td>\n      <td>11:00 to 11:59</td>\n      <td>Wednesday</td>\n      <td>GB</td>\n      <td>Kygovevo|\"vevo\"|\"official\"|\"video\"|\"music vide...</td>\n      <td>18383668</td>\n      <td>137271</td>\n      <td>4593</td>\n      <td>1640</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":256},{"cell_type":"code","source":"xdata = xdata[['video_id','title','views','likes','dislikes','comment_count','category_id']]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.549352Z","iopub.execute_input":"2024-12-07T10:35:24.549801Z","iopub.status.idle":"2024-12-07T10:35:24.572974Z","shell.execute_reply.started":"2024-12-07T10:35:24.549737Z","shell.execute_reply":"2024-12-07T10:35:24.571562Z"}},"outputs":[],"execution_count":257},{"cell_type":"code","source":"xdata.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.574721Z","iopub.execute_input":"2024-12-07T10:35:24.575175Z","iopub.status.idle":"2024-12-07T10:35:24.587584Z","shell.execute_reply.started":"2024-12-07T10:35:24.575123Z","shell.execute_reply":"2024-12-07T10:35:24.586043Z"}},"outputs":[{"execution_count":258,"output_type":"execute_result","data":{"text/plain":"(161470, 7)"},"metadata":{}}],"execution_count":258},{"cell_type":"code","source":"xdata.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.589181Z","iopub.execute_input":"2024-12-07T10:35:24.589681Z","iopub.status.idle":"2024-12-07T10:35:24.625971Z","shell.execute_reply.started":"2024-12-07T10:35:24.589629Z","shell.execute_reply":"2024-12-07T10:35:24.624822Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 161470 entries, 0 to 161469\nData columns (total 7 columns):\n #   Column         Non-Null Count   Dtype \n---  ------         --------------   ----- \n 0   video_id       161470 non-null  object\n 1   title          161470 non-null  object\n 2   views          161470 non-null  int64 \n 3   likes          161470 non-null  int64 \n 4   dislikes       161470 non-null  int64 \n 5   comment_count  161470 non-null  int64 \n 6   category_id    161470 non-null  int64 \ndtypes: int64(5), object(2)\nmemory usage: 8.6+ MB\n","output_type":"stream"}],"execution_count":259},{"cell_type":"code","source":"temp_df = xdata['category_id'].value_counts().reset_index().sort_values('category_id')\ntemp_df = temp_df.sort_values('count').assign(new_category_id = [i+1 for i in range(temp_df.shape[0])])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.627393Z","iopub.execute_input":"2024-12-07T10:35:24.627713Z","iopub.status.idle":"2024-12-07T10:35:24.641751Z","shell.execute_reply.started":"2024-12-07T10:35:24.627681Z","shell.execute_reply":"2024-12-07T10:35:24.640683Z"}},"outputs":[],"execution_count":260},{"cell_type":"code","source":"temp_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.644982Z","iopub.execute_input":"2024-12-07T10:35:24.645352Z","iopub.status.idle":"2024-12-07T10:35:24.662738Z","shell.execute_reply.started":"2024-12-07T10:35:24.645287Z","shell.execute_reply":"2024-12-07T10:35:24.661400Z"}},"outputs":[{"execution_count":261,"output_type":"execute_result","data":{"text/plain":"    category_id  count  new_category_id\n17           44      2                1\n16           30     17                2\n15           43    300                3\n14           29    335                4\n13           19   1009                5","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>category_id</th>\n      <th>count</th>\n      <th>new_category_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>17</th>\n      <td>44</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>30</td>\n      <td>17</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>43</td>\n      <td>300</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>29</td>\n      <td>335</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>19</td>\n      <td>1009</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":261},{"cell_type":"code","source":"# def update_category_id(prev_category_id_value):\n# new_index = \nfor i in range(45):\n    new_index = np.where(xdata['category_id'] == i+1)\n    xdata.loc[new_index, 'category_id'] = i\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:38:05.427236Z","iopub.execute_input":"2024-12-07T10:38:05.427736Z","iopub.status.idle":"2024-12-07T10:38:05.744929Z","shell.execute_reply.started":"2024-12-07T10:38:05.427698Z","shell.execute_reply":"2024-12-07T10:38:05.743185Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[265], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m45\u001b[39m):\n\u001b[1;32m      4\u001b[0m     new_index \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mwhere(xdata[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcategory_id\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m==\u001b[39m i\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m----> 5\u001b[0m     \u001b[43mxdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mnew_index\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcategory_id\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;241m=\u001b[39m i\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:907\u001b[0m, in \u001b[0;36m_LocationIndexer.__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m    905\u001b[0m     maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m    906\u001b[0m     key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m--> 907\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_setitem_indexer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    908\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_has_valid_setitem_indexer(key)\n\u001b[1;32m    910\u001b[0m iloc \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mname \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miloc\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39miloc\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:774\u001b[0m, in \u001b[0;36m_LocationIndexer._get_setitem_indexer\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    771\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    772\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m suppress(IndexingError):\n\u001b[1;32m    773\u001b[0m         \u001b[38;5;66;03m# suppress \"Too many indexers\"\u001b[39;00m\n\u001b[0;32m--> 774\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_convert_tuple\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    776\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, \u001b[38;5;28mrange\u001b[39m):\n\u001b[1;32m    777\u001b[0m     \u001b[38;5;66;03m# GH#45479 test_loc_setitem_range_key\u001b[39;00m\n\u001b[1;32m    778\u001b[0m     key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:989\u001b[0m, in \u001b[0;36m_LocationIndexer._convert_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    985\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[1;32m    986\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_convert_tuple\u001b[39m(\u001b[38;5;28mself\u001b[39m, key: \u001b[38;5;28mtuple\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mtuple\u001b[39m:\n\u001b[1;32m    987\u001b[0m     \u001b[38;5;66;03m# Note: we assume _tupleize_axis_indexer has been called, if necessary.\u001b[39;00m\n\u001b[1;32m    988\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key_length(key)\n\u001b[0;32m--> 989\u001b[0m     keyidx \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_convert_to_indexer(k, axis\u001b[38;5;241m=\u001b[39mi) \u001b[38;5;28;01mfor\u001b[39;00m i, k \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(key)]\n\u001b[1;32m    990\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mtuple\u001b[39m(keyidx)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:989\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    985\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[1;32m    986\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_convert_tuple\u001b[39m(\u001b[38;5;28mself\u001b[39m, key: \u001b[38;5;28mtuple\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mtuple\u001b[39m:\n\u001b[1;32m    987\u001b[0m     \u001b[38;5;66;03m# Note: we assume _tupleize_axis_indexer has been called, if necessary.\u001b[39;00m\n\u001b[1;32m    988\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key_length(key)\n\u001b[0;32m--> 989\u001b[0m     keyidx \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_convert_to_indexer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mk\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mi\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m i, k \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(key)]\n\u001b[1;32m    990\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mtuple\u001b[39m(keyidx)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1522\u001b[0m, in \u001b[0;36m_LocIndexer._convert_to_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1520\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m key\n\u001b[1;32m   1521\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1522\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_listlike_indexer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   1523\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1524\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1558\u001b[0m, in \u001b[0;36m_LocIndexer._get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1555\u001b[0m ax \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39m_get_axis(axis)\n\u001b[1;32m   1556\u001b[0m axis_name \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39m_get_axis_name(axis)\n\u001b[0;32m-> 1558\u001b[0m keyarr, indexer \u001b[38;5;241m=\u001b[39m \u001b[43max\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1560\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m keyarr, indexer\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6249\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m nmissing:\n\u001b[1;32m   6248\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m nmissing \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(indexer):\n\u001b[0;32m-> 6249\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m     not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[1;32m   6252\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index([(8, 29, 36, 71, 86, 94, 108, 169, 210, 218, 225, 286, 293, 304, 345, 354, 358, 369, 400, 420, 430, 445, 453, 462, 521, 527, 537, 558, 581, 593, 603, 605, 653, 670, 684, 701, 749, 755, 769, 787, 809, 814, 861, 890, 901, 917, 939, 989, 990, 1000, 1026, 1035, 1074, 1103, 1121, 1136, 1144, 1165, 1200, 1201, 1250, 1265, 1306, 1327, 1347, 1364, 1369, 1391, 1401, 1412, 1424, 1435, 1496, 1518, 1533, 1572, 1590, 1597, 1620, 1649, 1663, 1667, 1682, 1734, 1751, 1813, 1818, 1819, 1837, 1841, 1875, 1899, 1908, 1914, 1933, 1980, 1992, 2012, 2013, 2024, ...)], dtype='object')] are in the [index]\""],"ename":"KeyError","evalue":"\"None of [Index([(8, 29, 36, 71, 86, 94, 108, 169, 210, 218, 225, 286, 293, 304, 345, 354, 358, 369, 400, 420, 430, 445, 453, 462, 521, 527, 537, 558, 581, 593, 603, 605, 653, 670, 684, 701, 749, 755, 769, 787, 809, 814, 861, 890, 901, 917, 939, 989, 990, 1000, 1026, 1035, 1074, 1103, 1121, 1136, 1144, 1165, 1200, 1201, 1250, 1265, 1306, 1327, 1347, 1364, 1369, 1391, 1401, 1412, 1424, 1435, 1496, 1518, 1533, 1572, 1590, 1597, 1620, 1649, 1663, 1667, 1682, 1734, 1751, 1813, 1818, 1819, 1837, 1841, 1875, 1899, 1908, 1914, 1933, 1980, 1992, 2012, 2013, 2024, ...)], dtype='object')] are in the [index]\"","output_type":"error"}],"execution_count":265},{"cell_type":"code","source":"xdata.category_id.apply(update_column_id)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.688643Z","iopub.execute_input":"2024-12-07T10:35:24.689147Z","iopub.status.idle":"2024-12-07T10:35:24.716859Z","shell.execute_reply.started":"2024-12-07T10:35:24.689094Z","shell.execute_reply":"2024-12-07T10:35:24.714903Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[263], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m xdata\u001b[38;5;241m.\u001b[39mcategory_id\u001b[38;5;241m.\u001b[39mapply(\u001b[43mupdate_column_id\u001b[49m)\n","\u001b[0;31mNameError\u001b[0m: name 'update_column_id' is not defined"],"ename":"NameError","evalue":"name 'update_column_id' is not defined","output_type":"error"}],"execution_count":263},{"cell_type":"code","source":"xdata","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-07T10:35:24.718674Z","iopub.status.idle":"2024-12-07T10:35:24.719303Z","shell.execute_reply.started":"2024-12-07T10:35:24.718996Z","shell.execute_reply":"2024-12-07T10:35:24.719031Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}