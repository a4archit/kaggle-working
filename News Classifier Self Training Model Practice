{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4243451,"sourceType":"datasetVersion","datasetId":32526}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, accuracy_score\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:31.733644Z","iopub.execute_input":"2025-01-07T09:46:31.734096Z","iopub.status.idle":"2025-01-07T09:46:31.751458Z","shell.execute_reply.started":"2025-01-07T09:46:31.734062Z","shell.execute_reply":"2025-01-07T09:46:31.750160Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/news-category-dataset/News_Category_Dataset_v3.json\n","output_type":"stream"}],"execution_count":223},{"cell_type":"code","source":"df = pd.read_json(r\"/kaggle/input/news-category-dataset/News_Category_Dataset_v3.json\", lines=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:31.753191Z","iopub.execute_input":"2025-01-07T09:46:31.753764Z","iopub.status.idle":"2025-01-07T09:46:34.045035Z","shell.execute_reply.started":"2025-01-07T09:46:31.753720Z","shell.execute_reply":"2025-01-07T09:46:34.044113Z"}},"outputs":[],"execution_count":224},{"cell_type":"code","source":"df.category.value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.046889Z","iopub.execute_input":"2025-01-07T09:46:34.047190Z","iopub.status.idle":"2025-01-07T09:46:34.091227Z","shell.execute_reply.started":"2025-01-07T09:46:34.047157Z","shell.execute_reply":"2025-01-07T09:46:34.090019Z"}},"outputs":[{"execution_count":225,"output_type":"execute_result","data":{"text/plain":"category\nPOLITICS          35602\nWELLNESS          17945\nENTERTAINMENT     17362\nTRAVEL             9900\nSTYLE & BEAUTY     9814\nPARENTING          8791\nHEALTHY LIVING     6694\nQUEER VOICES       6347\nFOOD & DRINK       6340\nBUSINESS           5992\nCOMEDY             5400\nSPORTS             5077\nBLACK VOICES       4583\nHOME & LIVING      4320\nPARENTS            3955\nTHE WORLDPOST      3664\nWEDDINGS           3653\nWOMEN              3572\nCRIME              3562\nIMPACT             3484\nDIVORCE            3426\nWORLD NEWS         3299\nMEDIA              2944\nWEIRD NEWS         2777\nGREEN              2622\nWORLDPOST          2579\nRELIGION           2577\nSTYLE              2254\nSCIENCE            2206\nTECH               2104\nTASTE              2096\nMONEY              1756\nARTS               1509\nENVIRONMENT        1444\nFIFTY              1401\nGOOD NEWS          1398\nU.S. NEWS          1377\nARTS & CULTURE     1339\nCOLLEGE            1144\nLATINO VOICES      1130\nCULTURE & ARTS     1074\nEDUCATION          1014\nName: count, dtype: int64"},"metadata":{}}],"execution_count":225},{"cell_type":"code","source":"\nxdf_full = df[((df['category'] ==  ('POLITICS')) | \n    (df['category'] ==  ('WELLNESS')) |\n    (df['category'] ==  ('ENTERTAINMENT')))]\n\ncat_politics = df[df['category']=='POLITICS'].head(5000)\ncat_entertainment = df[df['category']=='ENTERTAINMENT'].head(5000)\ncat_wellness = df[df['category']=='WELLNESS'].head(5000)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.092905Z","iopub.execute_input":"2025-01-07T09:46:34.093314Z","iopub.status.idle":"2025-01-07T09:46:34.357299Z","shell.execute_reply.started":"2025-01-07T09:46:34.093283Z","shell.execute_reply":"2025-01-07T09:46:34.356364Z"}},"outputs":[],"execution_count":226},{"cell_type":"code","source":"# mering categories to a `xdf`\n\nxdf = pd.concat([cat_politics, cat_entertainment, cat_wellness])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.358702Z","iopub.execute_input":"2025-01-07T09:46:34.359037Z","iopub.status.idle":"2025-01-07T09:46:34.368017Z","shell.execute_reply.started":"2025-01-07T09:46:34.359007Z","shell.execute_reply":"2025-01-07T09:46:34.366709Z"}},"outputs":[],"execution_count":227},{"cell_type":"code","source":"xdf.category.value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.369051Z","iopub.execute_input":"2025-01-07T09:46:34.369369Z","iopub.status.idle":"2025-01-07T09:46:34.392224Z","shell.execute_reply.started":"2025-01-07T09:46:34.369338Z","shell.execute_reply":"2025-01-07T09:46:34.391125Z"}},"outputs":[{"execution_count":228,"output_type":"execute_result","data":{"text/plain":"category\nPOLITICS         5000\nENTERTAINMENT    5000\nWELLNESS         5000\nName: count, dtype: int64"},"metadata":{}}],"execution_count":228},{"cell_type":"code","source":"xdf = xdf[['headline','category']]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.395442Z","iopub.execute_input":"2025-01-07T09:46:34.395895Z","iopub.status.idle":"2025-01-07T09:46:34.410383Z","shell.execute_reply.started":"2025-01-07T09:46:34.395859Z","shell.execute_reply":"2025-01-07T09:46:34.409131Z"}},"outputs":[],"execution_count":229},{"cell_type":"markdown","source":"0 -> Politics\n\n1 -> Entertainment \n\n2 -> Wellness","metadata":{}},{"cell_type":"code","source":"xdf.category = xdf.category.map({'POLITICS':0, 'ENTERTAINMENT':1, 'WELLNESS':2})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.412532Z","iopub.execute_input":"2025-01-07T09:46:34.412936Z","iopub.status.idle":"2025-01-07T09:46:34.431815Z","shell.execute_reply.started":"2025-01-07T09:46:34.412894Z","shell.execute_reply":"2025-01-07T09:46:34.430617Z"}},"outputs":[],"execution_count":230},{"cell_type":"markdown","source":"### Cleaning textual data","metadata":{}},{"cell_type":"code","source":"xdf.headline = xdf.headline.apply(lambda x: x.replace(r'\\W',' ').lower())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.432884Z","iopub.execute_input":"2025-01-07T09:46:34.433179Z","iopub.status.idle":"2025-01-07T09:46:34.460643Z","shell.execute_reply.started":"2025-01-07T09:46:34.433152Z","shell.execute_reply":"2025-01-07T09:46:34.459536Z"}},"outputs":[],"execution_count":231},{"cell_type":"code","source":"xdf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.461956Z","iopub.execute_input":"2025-01-07T09:46:34.462277Z","iopub.status.idle":"2025-01-07T09:46:34.480523Z","shell.execute_reply.started":"2025-01-07T09:46:34.462240Z","shell.execute_reply":"2025-01-07T09:46:34.479421Z"}},"outputs":[{"execution_count":232,"output_type":"execute_result","data":{"text/plain":"                                                 headline  category\n21      biden says u.s. forces would defend taiwan if ...         0\n24      ‘beautiful and sad at the same time’: ukrainia...         0\n30      biden says queen's death left 'giant hole' for...         0\n40      bill to help afghans who escaped taliban faces...         0\n44      mark meadows complies with justice dept. subpo...         0\n...                                                   ...       ...\n152563  why music: music appreciation for the 21st cen...         2\n152567  this is why people who live in san francisco a...         2\n152569  i lost weight: tim bauer cut out fast food and...         2\n152570        time out tip of the day: september 27, 2013         2\n152572                         what takes you right back?         2\n\n[15000 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>headline</th>\n      <th>category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>21</th>\n      <td>biden says u.s. forces would defend taiwan if ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>‘beautiful and sad at the same time’: ukrainia...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>biden says queen's death left 'giant hole' for...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>bill to help afghans who escaped taliban faces...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>mark meadows complies with justice dept. subpo...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>152563</th>\n      <td>why music: music appreciation for the 21st cen...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>152567</th>\n      <td>this is why people who live in san francisco a...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>152569</th>\n      <td>i lost weight: tim bauer cut out fast food and...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>152570</th>\n      <td>time out tip of the day: september 27, 2013</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>152572</th>\n      <td>what takes you right back?</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>15000 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":232},{"cell_type":"markdown","source":"### Creating Object of `TFID Vectorizer`","metadata":{}},{"cell_type":"code","source":"vectorizer = TfidfVectorizer(max_features=5000)\nvector = vectorizer.fit_transform(xdf.headline).toarray().astype('bool')\n\nX_train, X_test, y_train, y_test = train_test_split(vector, xdf.category, test_size=0.2, random_state=42)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:34.481642Z","iopub.execute_input":"2025-01-07T09:46:34.482010Z","iopub.status.idle":"2025-01-07T09:46:35.581439Z","shell.execute_reply.started":"2025-01-07T09:46:34.481974Z","shell.execute_reply":"2025-01-07T09:46:35.580148Z"}},"outputs":[],"execution_count":233},{"cell_type":"code","source":"# # Train a Supervised Model (Logistic Regression)\n# model = LogisticRegression()\n# model.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:46:35.582625Z","iopub.execute_input":"2025-01-07T09:46:35.582931Z","iopub.status.idle":"2025-01-07T09:47:02.090824Z","shell.execute_reply.started":"2025-01-07T09:46:35.582901Z","shell.execute_reply":"2025-01-07T09:47:02.089601Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":234,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":234},{"cell_type":"code","source":"\n# # Predict and Evaluate\n# y_pred = model.predict(X_test)\n# print(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:02.091784Z","iopub.execute_input":"2025-01-07T09:47:02.092178Z","iopub.status.idle":"2025-01-07T09:47:02.235240Z","shell.execute_reply.started":"2025-01-07T09:47:02.092143Z","shell.execute_reply":"2025-01-07T09:47:02.234139Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.92      0.89      0.90      1037\n           1       0.91      0.86      0.88       970\n           2       0.89      0.97      0.93       993\n\n    accuracy                           0.90      3000\n   macro avg       0.91      0.90      0.90      3000\nweighted avg       0.91      0.90      0.90      3000\n\n","output_type":"stream"}],"execution_count":235},{"cell_type":"code","source":"# import lightgbm as lgm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:02.236096Z","iopub.execute_input":"2025-01-07T09:47:02.236449Z","iopub.status.idle":"2025-01-07T09:47:02.246828Z","shell.execute_reply.started":"2025-01-07T09:47:02.236416Z","shell.execute_reply":"2025-01-07T09:47:02.245732Z"}},"outputs":[],"execution_count":236},{"cell_type":"code","source":"# train_data = lgm.Dataset(X_train, label=y_train)\n# test_data = lgm.Dataset(X_test, label=y_test, reference=train_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:02.249326Z","iopub.execute_input":"2025-01-07T09:47:02.251390Z","iopub.status.idle":"2025-01-07T09:47:02.267346Z","shell.execute_reply.started":"2025-01-07T09:47:02.251341Z","shell.execute_reply":"2025-01-07T09:47:02.265877Z"}},"outputs":[],"execution_count":237},{"cell_type":"code","source":"# # Define parameters\n# params = {\n#     'objective': 'binary',         # for binary classification\n#     'metric': 'binary_error',      # metric to evaluate performance\n#     'boosting_type': 'gbdt',       # gradient boosting decision tree\n#     'num_leaves': 31,              # maximum number of leaves in one tree\n#     'learning_rate': 0.05,         # learning rate\n#     'feature_fraction': 0.9        # fraction of features to consider for each tree\n# }\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:02.271658Z","iopub.execute_input":"2025-01-07T09:47:02.272109Z","iopub.status.idle":"2025-01-07T09:47:02.282488Z","shell.execute_reply.started":"2025-01-07T09:47:02.272072Z","shell.execute_reply":"2025-01-07T09:47:02.280820Z"}},"outputs":[],"execution_count":238},{"cell_type":"code","source":"# # Train the model\n# num_round = 100  # number of boosting iterations\n# bst = lgm.train(params, train_data, num_round, valid_sets=[test_data])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:02.285378Z","iopub.execute_input":"2025-01-07T09:47:02.285817Z","iopub.status.idle":"2025-01-07T09:47:03.221249Z","shell.execute_reply.started":"2025-01-07T09:47:02.285773Z","shell.execute_reply":"2025-01-07T09:47:03.220261Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Number of positive: 8037, number of negative: 3963\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.040036 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 2002\n[LightGBM] [Info] Number of data points in the train set: 12000, number of used features: 1001\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.669750 -> initscore=0.707055\n[LightGBM] [Info] Start training from score 0.707055\n","output_type":"stream"}],"execution_count":239},{"cell_type":"code","source":"# def categorize_news(news: str) -> str:\n#     vec = vectorizer.transform(pd.Series([news])).toarray().astype('bool')\n#     cat_id = model.predict(vec)\n#     category = ['POLITICS', 'ENTERTAINMENT', 'WELLNESS']\n#     return category[cat_id[0]]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:03.221990Z","iopub.execute_input":"2025-01-07T09:47:03.222266Z","iopub.status.idle":"2025-01-07T09:47:03.228661Z","shell.execute_reply.started":"2025-01-07T09:47:03.222242Z","shell.execute_reply":"2025-01-07T09:47:03.227176Z"}},"outputs":[],"execution_count":240},{"cell_type":"code","source":"# news = \"Ram Kapoor says ‘rich dad’ didn't talk to him for 10 years for choosing acting: ‘Sold second-hand vehicles for money’\"\n# categorize_news(news)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:03.232384Z","iopub.execute_input":"2025-01-07T09:47:03.232754Z","iopub.status.idle":"2025-01-07T09:47:03.248518Z","shell.execute_reply.started":"2025-01-07T09:47:03.232723Z","shell.execute_reply":"2025-01-07T09:47:03.247589Z"}},"outputs":[{"execution_count":241,"output_type":"execute_result","data":{"text/plain":"'ENTERTAINMENT'"},"metadata":{}}],"execution_count":241},{"cell_type":"code","source":"# xdf_full.shape, xdf.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:03.249846Z","iopub.execute_input":"2025-01-07T09:47:03.250220Z","iopub.status.idle":"2025-01-07T09:47:03.264667Z","shell.execute_reply.started":"2025-01-07T09:47:03.250180Z","shell.execute_reply":"2025-01-07T09:47:03.263626Z"}},"outputs":[{"execution_count":242,"output_type":"execute_result","data":{"text/plain":"((70909, 6), (15000, 2))"},"metadata":{}}],"execution_count":242},{"cell_type":"code","source":"xdf_full.headline = xdf_full.headline.apply(lambda x: x.replace(r'\\W',' ').lower())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:03.265926Z","iopub.execute_input":"2025-01-07T09:47:03.266271Z","iopub.status.idle":"2025-01-07T09:47:03.324185Z","shell.execute_reply.started":"2025-01-07T09:47:03.266230Z","shell.execute_reply":"2025-01-07T09:47:03.322958Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-243-8b862912cb89>:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  xdf_full.headline = xdf_full.headline.apply(lambda x: x.replace(r'\\W',' ').lower())\n","output_type":"stream"}],"execution_count":243},{"cell_type":"markdown","source":"## Self Learning Model","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"X_unlabeled = vectorizer.transform(xdf_full.headline).toarray()\nX_labeled = vectorizer.transform(xdf.headline).toarray()\ny_labeled = xdf.category\n\nconfident_threshold = 0.95\nmax_iterations = 10","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:03.325359Z","iopub.execute_input":"2025-01-07T09:47:03.325732Z","iopub.status.idle":"2025-01-07T09:47:08.628543Z","shell.execute_reply.started":"2025-01-07T09:47:03.325692Z","shell.execute_reply":"2025-01-07T09:47:08.627529Z"}},"outputs":[],"execution_count":244},{"cell_type":"code","source":"for iteration in range(max_iterations):\n    print(f\"Iteration({iteration +1})\")\n    # predicting probabilities for unlabeled data\n    probs = model.predict_proba(X_unlabeled) # predict probabilities on unlabeled data\n    pseudo_labels = model.predict(X_unlabeled) # predict classes on unlabeled data\n    # getting only those indices that satisfy confident threshold\n    high_confident_indices = np.max(probs, axis=1) > confident_threshold \n\n    # Break if no new samples are confident\n    if not np.any(high_confident_indices):\n        print(\"No more high-confidence samples. Stopping.\")\n        break\n    \n    # extracting confident samples\n    X_confident = X_unlabeled[high_confident_indices] # getting best predictions `X`\n    y_confident = pseudo_labels[high_confident_indices] # getting best predictions 'y'\n    \n    # Add pseudo-labeled data to training set\n    X_labeled = np.vstack((X_labeled, X_confident))\n    y_labeled = np.hstack((y_labeled, y_confident))\n    # removing those indices that added to the unlabeled data\n    X_unlabeled = X_unlabeled[~high_confident_indices] \n    \n    # retraining the model\n    model.fit(X_labeled, y_labeled)\n    \n    # Evaluating the model\n    print(f\"Accuracy on labeled data: {accuracy_score(y_labeled, model.predict(X_labeled))*100:.2f\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T09:47:08.629628Z","iopub.execute_input":"2025-01-07T09:47:08.630037Z","iopub.status.idle":"2025-01-07T09:56:28.312988Z","shell.execute_reply.started":"2025-01-07T09:47:08.629980Z","shell.execute_reply":"2025-01-07T09:56:28.311730Z"}},"outputs":[{"name":"stdout","text":"Iteration(0)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.96%\nIteration(1)\nAccuracy on labeled data: 0.97%\nIteration(2)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(3)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(4)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(5)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(6)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(7)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(8)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\nIteration(9)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Accuracy on labeled data: 0.98%\n","output_type":"stream"}],"execution_count":245},{"cell_type":"code","source":"model.predict([X_labeled[2]])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-07T10:02:04.957193Z","iopub.execute_input":"2025-01-07T10:02:04.957738Z","iopub.status.idle":"2025-01-07T10:02:04.966432Z","shell.execute_reply.started":"2025-01-07T10:02:04.957688Z","shell.execute_reply":"2025-01-07T10:02:04.965137Z"}},"outputs":[{"execution_count":258,"output_type":"execute_result","data":{"text/plain":"array([0])"},"metadata":{}}],"execution_count":258}]}