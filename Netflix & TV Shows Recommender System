{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3a57e233",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:53.296386Z",
     "iopub.status.busy": "2024-12-09T01:01:53.295990Z",
     "iopub.status.idle": "2024-12-09T01:01:56.417286Z",
     "shell.execute_reply": "2024-12-09T01:01:56.416155Z"
    },
    "papermill": {
     "duration": 3.13459,
     "end_time": "2024-12-09T01:01:56.419538",
     "exception": false,
     "start_time": "2024-12-09T01:01:53.284948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/netflix-shows/netflix_titles.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b01756c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.439965Z",
     "iopub.status.busy": "2024-12-09T01:01:56.439400Z",
     "iopub.status.idle": "2024-12-09T01:01:56.565826Z",
     "shell.execute_reply": "2024-12-09T01:01:56.564667Z"
    },
    "papermill": {
     "duration": 0.138935,
     "end_time": "2024-12-09T01:01:56.568321",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.429386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(r\"/kaggle/input/netflix-shows/netflix_titles.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "622bf8a3",
   "metadata": {
    "papermill": {
     "duration": 0.00802,
     "end_time": "2024-12-09T01:01:56.584849",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.576829",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1086a059",
   "metadata": {
    "papermill": {
     "duration": 0.007877,
     "end_time": "2024-12-09T01:01:56.601504",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.593627",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7fdf187a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.619617Z",
     "iopub.status.busy": "2024-12-09T01:01:56.619237Z",
     "iopub.status.idle": "2024-12-09T01:01:56.626616Z",
     "shell.execute_reply": "2024-12-09T01:01:56.625538Z"
    },
    "papermill": {
     "duration": 0.018866,
     "end_time": "2024-12-09T01:01:56.628731",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.609865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8807, 12)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4973ae37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.647473Z",
     "iopub.status.busy": "2024-12-09T01:01:56.647084Z",
     "iopub.status.idle": "2024-12-09T01:01:56.686152Z",
     "shell.execute_reply": "2024-12-09T01:01:56.684800Z"
    },
    "papermill": {
     "duration": 0.051677,
     "end_time": "2024-12-09T01:01:56.688872",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.637195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8807 entries, 0 to 8806\n",
      "Data columns (total 12 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   show_id       8807 non-null   object\n",
      " 1   type          8807 non-null   object\n",
      " 2   title         8807 non-null   object\n",
      " 3   director      6173 non-null   object\n",
      " 4   cast          7982 non-null   object\n",
      " 5   country       7976 non-null   object\n",
      " 6   date_added    8797 non-null   object\n",
      " 7   release_year  8807 non-null   int64 \n",
      " 8   rating        8803 non-null   object\n",
      " 9   duration      8804 non-null   object\n",
      " 10  listed_in     8807 non-null   object\n",
      " 11  description   8807 non-null   object\n",
      "dtypes: int64(1), object(11)\n",
      "memory usage: 825.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bac905e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.707611Z",
     "iopub.status.busy": "2024-12-09T01:01:56.707260Z",
     "iopub.status.idle": "2024-12-09T01:01:56.728207Z",
     "shell.execute_reply": "2024-12-09T01:01:56.727123Z"
    },
    "papermill": {
     "duration": 0.032654,
     "end_time": "2024-12-09T01:01:56.730276",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.697622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>show_id</th>\n",
       "      <th>type</th>\n",
       "      <th>title</th>\n",
       "      <th>director</th>\n",
       "      <th>cast</th>\n",
       "      <th>country</th>\n",
       "      <th>date_added</th>\n",
       "      <th>release_year</th>\n",
       "      <th>rating</th>\n",
       "      <th>duration</th>\n",
       "      <th>listed_in</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6581</th>\n",
       "      <td>s6582</td>\n",
       "      <td>Movie</td>\n",
       "      <td>Dear Dracula</td>\n",
       "      <td>Chad Van De Keere</td>\n",
       "      <td>Nathan Gamble, Ray Liotta, Emilio Estevez, Ari...</td>\n",
       "      <td>United States</td>\n",
       "      <td>February 18, 2016</td>\n",
       "      <td>2012</td>\n",
       "      <td>TV-Y7-FV</td>\n",
       "      <td>43 min</td>\n",
       "      <td>Children &amp; Family Movies, Comedies</td>\n",
       "      <td>When he gets a fan letter from a young monster...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3691</th>\n",
       "      <td>s3692</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>DreamWorks Kung Fu Panda Awesome Secrets</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Jack Black, Dustin Hoffman, Dennis Haysbert, P...</td>\n",
       "      <td>United States</td>\n",
       "      <td>July 1, 2019</td>\n",
       "      <td>2008</td>\n",
       "      <td>TV-PG</td>\n",
       "      <td>1 Season</td>\n",
       "      <td>Kids' TV, TV Action &amp; Adventure, TV Comedies</td>\n",
       "      <td>In this pair of adventures, Po tells the story...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3965</th>\n",
       "      <td>s3966</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Santa Clarita Diet</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drew Barrymore, Timothy Olyphant, Liv Hewson, ...</td>\n",
       "      <td>United States</td>\n",
       "      <td>March 29, 2019</td>\n",
       "      <td>2019</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>3 Seasons</td>\n",
       "      <td>TV Comedies, TV Horror, TV Thrillers</td>\n",
       "      <td>They're ordinary husband and wife realtors unt...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     show_id     type                                     title  \\\n",
       "6581   s6582    Movie                              Dear Dracula   \n",
       "3691   s3692  TV Show  DreamWorks Kung Fu Panda Awesome Secrets   \n",
       "3965   s3966  TV Show                        Santa Clarita Diet   \n",
       "\n",
       "               director                                               cast  \\\n",
       "6581  Chad Van De Keere  Nathan Gamble, Ray Liotta, Emilio Estevez, Ari...   \n",
       "3691                NaN  Jack Black, Dustin Hoffman, Dennis Haysbert, P...   \n",
       "3965                NaN  Drew Barrymore, Timothy Olyphant, Liv Hewson, ...   \n",
       "\n",
       "            country         date_added  release_year    rating   duration  \\\n",
       "6581  United States  February 18, 2016          2012  TV-Y7-FV     43 min   \n",
       "3691  United States       July 1, 2019          2008     TV-PG   1 Season   \n",
       "3965  United States     March 29, 2019          2019     TV-MA  3 Seasons   \n",
       "\n",
       "                                         listed_in  \\\n",
       "6581            Children & Family Movies, Comedies   \n",
       "3691  Kids' TV, TV Action & Adventure, TV Comedies   \n",
       "3965          TV Comedies, TV Horror, TV Thrillers   \n",
       "\n",
       "                                            description  \n",
       "6581  When he gets a fan letter from a young monster...  \n",
       "3691  In this pair of adventures, Po tells the story...  \n",
       "3965  They're ordinary husband and wife realtors unt...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d19b1723",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.749927Z",
     "iopub.status.busy": "2024-12-09T01:01:56.749496Z",
     "iopub.status.idle": "2024-12-09T01:01:56.763998Z",
     "shell.execute_reply": "2024-12-09T01:01:56.762755Z"
    },
    "papermill": {
     "duration": 0.027247,
     "end_time": "2024-12-09T01:01:56.766230",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.738983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "show_id            0\n",
       "type               0\n",
       "title              0\n",
       "director        2634\n",
       "cast             825\n",
       "country          831\n",
       "date_added        10\n",
       "release_year       0\n",
       "rating             4\n",
       "duration           3\n",
       "listed_in          0\n",
       "description        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4c2c544b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.785438Z",
     "iopub.status.busy": "2024-12-09T01:01:56.785069Z",
     "iopub.status.idle": "2024-12-09T01:01:56.809468Z",
     "shell.execute_reply": "2024-12-09T01:01:56.808310Z"
    },
    "papermill": {
     "duration": 0.036974,
     "end_time": "2024-12-09T01:01:56.812073",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.775099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bfa5e660",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.832251Z",
     "iopub.status.busy": "2024-12-09T01:01:56.831847Z",
     "iopub.status.idle": "2024-12-09T01:01:56.854266Z",
     "shell.execute_reply": "2024-12-09T01:01:56.853166Z"
    },
    "papermill": {
     "duration": 0.034905,
     "end_time": "2024-12-09T01:01:56.856424",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.821519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "show_id         8807\n",
       "type               2\n",
       "title           8807\n",
       "director        4528\n",
       "cast            7692\n",
       "country          748\n",
       "date_added      1767\n",
       "release_year      74\n",
       "rating            17\n",
       "duration         220\n",
       "listed_in        514\n",
       "description     8775\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6864c516",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.876050Z",
     "iopub.status.busy": "2024-12-09T01:01:56.875632Z",
     "iopub.status.idle": "2024-12-09T01:01:56.883526Z",
     "shell.execute_reply": "2024-12-09T01:01:56.882564Z"
    },
    "papermill": {
     "duration": 0.020382,
     "end_time": "2024-12-09T01:01:56.885800",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.865418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data.drop_duplicates(subset='show_id', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "34d9f8fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.905323Z",
     "iopub.status.busy": "2024-12-09T01:01:56.904898Z",
     "iopub.status.idle": "2024-12-09T01:01:56.920736Z",
     "shell.execute_reply": "2024-12-09T01:01:56.919734Z"
    },
    "papermill": {
     "duration": 0.028097,
     "end_time": "2024-12-09T01:01:56.922912",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.894815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>show_id</th>\n",
       "      <th>type</th>\n",
       "      <th>title</th>\n",
       "      <th>director</th>\n",
       "      <th>cast</th>\n",
       "      <th>country</th>\n",
       "      <th>date_added</th>\n",
       "      <th>release_year</th>\n",
       "      <th>rating</th>\n",
       "      <th>duration</th>\n",
       "      <th>listed_in</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6737</th>\n",
       "      <td>s6738</td>\n",
       "      <td>Movie</td>\n",
       "      <td>Famous in Ahmedabad</td>\n",
       "      <td>Hardik Mehta</td>\n",
       "      <td>NaN</td>\n",
       "      <td>India</td>\n",
       "      <td>December 15, 2016</td>\n",
       "      <td>2015</td>\n",
       "      <td>TV-14</td>\n",
       "      <td>29 min</td>\n",
       "      <td>Documentaries, International Movies</td>\n",
       "      <td>Follow an 11-year-old boy as he goes from ordi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3458</th>\n",
       "      <td>s3459</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Living Undocumented</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States</td>\n",
       "      <td>October 2, 2019</td>\n",
       "      <td>2019</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>1 Season</td>\n",
       "      <td>Docuseries</td>\n",
       "      <td>Eight undocumented families' fates roller-coas...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     show_id     type                title      director cast        country  \\\n",
       "6737   s6738    Movie  Famous in Ahmedabad  Hardik Mehta  NaN          India   \n",
       "3458   s3459  TV Show  Living Undocumented           NaN  NaN  United States   \n",
       "\n",
       "             date_added  release_year rating  duration  \\\n",
       "6737  December 15, 2016          2015  TV-14    29 min   \n",
       "3458    October 2, 2019          2019  TV-MA  1 Season   \n",
       "\n",
       "                                listed_in  \\\n",
       "6737  Documentaries, International Movies   \n",
       "3458                           Docuseries   \n",
       "\n",
       "                                            description  \n",
       "6737  Follow an 11-year-old boy as he goes from ordi...  \n",
       "3458  Eight undocumented families' fates roller-coas...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "28ffe2b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.943177Z",
     "iopub.status.busy": "2024-12-09T01:01:56.942758Z",
     "iopub.status.idle": "2024-12-09T01:01:56.950352Z",
     "shell.execute_reply": "2024-12-09T01:01:56.949247Z"
    },
    "papermill": {
     "duration": 0.020442,
     "end_time": "2024-12-09T01:01:56.952571",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.932129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.rating.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9338441e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:56.972920Z",
     "iopub.status.busy": "2024-12-09T01:01:56.972492Z",
     "iopub.status.idle": "2024-12-09T01:01:56.979315Z",
     "shell.execute_reply": "2024-12-09T01:01:56.978228Z"
    },
    "papermill": {
     "duration": 0.019629,
     "end_time": "2024-12-09T01:01:56.981642",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.962013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8807, 12)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b97f8e7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.003192Z",
     "iopub.status.busy": "2024-12-09T01:01:57.002752Z",
     "iopub.status.idle": "2024-12-09T01:01:57.014601Z",
     "shell.execute_reply": "2024-12-09T01:01:57.013505Z"
    },
    "papermill": {
     "duration": 0.025737,
     "end_time": "2024-12-09T01:01:57.016902",
     "exception": false,
     "start_time": "2024-12-09T01:01:56.991165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data.dropna(subset='cast', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "95ee9433",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.037645Z",
     "iopub.status.busy": "2024-12-09T01:01:57.037260Z",
     "iopub.status.idle": "2024-12-09T01:01:57.044904Z",
     "shell.execute_reply": "2024-12-09T01:01:57.043900Z"
    },
    "papermill": {
     "duration": 0.020133,
     "end_time": "2024-12-09T01:01:57.046967",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.026834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3948158057.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  data.rating.fillna(data.rating.mode()[0], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "data.rating.fillna(data.rating.mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8eb65af6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.068638Z",
     "iopub.status.busy": "2024-12-09T01:01:57.068214Z",
     "iopub.status.idle": "2024-12-09T01:01:57.076941Z",
     "shell.execute_reply": "2024-12-09T01:01:57.075853Z"
    },
    "papermill": {
     "duration": 0.022299,
     "end_time": "2024-12-09T01:01:57.079252",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.056953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.rating.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "33504ee8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.101005Z",
     "iopub.status.busy": "2024-12-09T01:01:57.100567Z",
     "iopub.status.idle": "2024-12-09T01:01:57.111516Z",
     "shell.execute_reply": "2024-12-09T01:01:57.110389Z"
    },
    "papermill": {
     "duration": 0.025137,
     "end_time": "2024-12-09T01:01:57.114267",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.089130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data.dropna(subset='date_added', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9ff626a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.135146Z",
     "iopub.status.busy": "2024-12-09T01:01:57.134656Z",
     "iopub.status.idle": "2024-12-09T01:01:57.148896Z",
     "shell.execute_reply": "2024-12-09T01:01:57.147784Z"
    },
    "papermill": {
     "duration": 0.027001,
     "end_time": "2024-12-09T01:01:57.150946",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.123945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "show_id            0\n",
       "type               0\n",
       "title              0\n",
       "director        2272\n",
       "cast               0\n",
       "country          676\n",
       "date_added         0\n",
       "release_year       0\n",
       "rating             0\n",
       "duration           3\n",
       "listed_in          0\n",
       "description        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "517edd32",
   "metadata": {
    "papermill": {
     "duration": 0.010154,
     "end_time": "2024-12-09T01:01:57.170785",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.160631",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4eab5588",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.192309Z",
     "iopub.status.busy": "2024-12-09T01:01:57.191924Z",
     "iopub.status.idle": "2024-12-09T01:01:57.216868Z",
     "shell.execute_reply": "2024-12-09T01:01:57.215619Z"
    },
    "papermill": {
     "duration": 0.038828,
     "end_time": "2024-12-09T01:01:57.219233",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.180405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "show_id         7972\n",
       "type               2\n",
       "title           7972\n",
       "director        4152\n",
       "cast            7682\n",
       "country          689\n",
       "date_added      1710\n",
       "release_year      72\n",
       "rating            17\n",
       "duration         216\n",
       "listed_in        503\n",
       "description     7946\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f4bb69fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.240766Z",
     "iopub.status.busy": "2024-12-09T01:01:57.240370Z",
     "iopub.status.idle": "2024-12-09T01:01:57.254814Z",
     "shell.execute_reply": "2024-12-09T01:01:57.253793Z"
    },
    "papermill": {
     "duration": 0.027783,
     "end_time": "2024-12-09T01:01:57.256868",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.229085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>show_id</th>\n",
       "      <th>type</th>\n",
       "      <th>title</th>\n",
       "      <th>director</th>\n",
       "      <th>cast</th>\n",
       "      <th>country</th>\n",
       "      <th>date_added</th>\n",
       "      <th>release_year</th>\n",
       "      <th>rating</th>\n",
       "      <th>duration</th>\n",
       "      <th>listed_in</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2402</th>\n",
       "      <td>s2403</td>\n",
       "      <td>Movie</td>\n",
       "      <td>From A to B</td>\n",
       "      <td>Ali F. Mostafa</td>\n",
       "      <td>Fahad Albutairi, Shadi Alfons, Fadi Rifaai, Sa...</td>\n",
       "      <td>United Arab Emirates, Jordan, Lebanon, Saudi A...</td>\n",
       "      <td>June 11, 2020</td>\n",
       "      <td>2014</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>104 min</td>\n",
       "      <td>Comedies, Dramas, International Movies</td>\n",
       "      <td>To celebrate the memory of their pal who passe...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     show_id   type        title        director  \\\n",
       "2402   s2403  Movie  From A to B  Ali F. Mostafa   \n",
       "\n",
       "                                                   cast  \\\n",
       "2402  Fahad Albutairi, Shadi Alfons, Fadi Rifaai, Sa...   \n",
       "\n",
       "                                                country     date_added  \\\n",
       "2402  United Arab Emirates, Jordan, Lebanon, Saudi A...  June 11, 2020   \n",
       "\n",
       "      release_year rating duration                               listed_in  \\\n",
       "2402          2014  TV-MA  104 min  Comedies, Dramas, International Movies   \n",
       "\n",
       "                                            description  \n",
       "2402  To celebrate the memory of their pal who passe...  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "602d0815",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.279191Z",
     "iopub.status.busy": "2024-12-09T01:01:57.278809Z",
     "iopub.status.idle": "2024-12-09T01:01:57.508501Z",
     "shell.execute_reply": "2024-12-09T01:01:57.507183Z"
    },
    "papermill": {
     "duration": 0.243348,
     "end_time": "2024-12-09T01:01:57.510979",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.267631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='type', ylabel='count'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data, x='type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0e95daf6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.533294Z",
     "iopub.status.busy": "2024-12-09T01:01:57.532862Z",
     "iopub.status.idle": "2024-12-09T01:01:57.699493Z",
     "shell.execute_reply": "2024-12-09T01:01:57.698040Z"
    },
    "papermill": {
     "duration": 0.181996,
     "end_time": "2024-12-09T01:01:57.703318",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.521322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Top 5 countries\")\n",
    "plt.pie(data.country.value_counts()[:5],\n",
    "       startangle=90, autopct=\"%.1f%%\", explode=tuple([0.01 for i in range(5)]),\n",
    "       pctdistance=0.7, labels=data.country.value_counts()[:5].index)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "46103a5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.746663Z",
     "iopub.status.busy": "2024-12-09T01:01:57.745436Z",
     "iopub.status.idle": "2024-12-09T01:01:57.761149Z",
     "shell.execute_reply": "2024-12-09T01:01:57.759590Z"
    },
    "papermill": {
     "duration": 0.040054,
     "end_time": "2024-12-09T01:01:57.763604",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.723550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "release_year\n",
       "2018    1025\n",
       "2019     917\n",
       "2017     912\n",
       "2020     827\n",
       "2016     803\n",
       "        ... \n",
       "1945       1\n",
       "1946       1\n",
       "1942       1\n",
       "1947       1\n",
       "1944       1\n",
       "Name: count, Length: 72, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.release_year.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf34ff7f",
   "metadata": {
    "papermill": {
     "duration": 0.012071,
     "end_time": "2024-12-09T01:01:57.788343",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.776272",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Creating tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fa266703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.812422Z",
     "iopub.status.busy": "2024-12-09T01:01:57.811554Z",
     "iopub.status.idle": "2024-12-09T01:01:57.818477Z",
     "shell.execute_reply": "2024-12-09T01:01:57.817390Z"
    },
    "papermill": {
     "duration": 0.02129,
     "end_time": "2024-12-09T01:01:57.820639",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.799349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n",
       "       'release_year', 'rating', 'duration', 'listed_in', 'description'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e66457f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.844243Z",
     "iopub.status.busy": "2024-12-09T01:01:57.843829Z",
     "iopub.status.idle": "2024-12-09T01:01:57.848657Z",
     "shell.execute_reply": "2024-12-09T01:01:57.847343Z"
    },
    "papermill": {
     "duration": 0.019255,
     "end_time": "2024-12-09T01:01:57.850891",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.831636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data.type = data.type.apply(lambda x: x.replace(\" \",\"\"))\n",
    "# # data.cast = data.cast.apply(lambda x: x.replace(\" \",\"\"))\n",
    "# data.country = data.country.apply(lambda x: str(x).replace(\" \",\"\"))\n",
    "# # data.duration = data.duration.apply(lambda x: x.replace(\" \",\"\"))\n",
    "# # data.listed_in = data.listed_in.apply(lambda x: x.replace(\" \",\"\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "41844439",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.875096Z",
     "iopub.status.busy": "2024-12-09T01:01:57.874645Z",
     "iopub.status.idle": "2024-12-09T01:01:57.890688Z",
     "shell.execute_reply": "2024-12-09T01:01:57.889596Z"
    },
    "papermill": {
     "duration": 0.030956,
     "end_time": "2024-12-09T01:01:57.892871",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.861915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>show_id</th>\n",
       "      <th>type</th>\n",
       "      <th>title</th>\n",
       "      <th>director</th>\n",
       "      <th>cast</th>\n",
       "      <th>country</th>\n",
       "      <th>date_added</th>\n",
       "      <th>release_year</th>\n",
       "      <th>rating</th>\n",
       "      <th>duration</th>\n",
       "      <th>listed_in</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s2</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Blood &amp; Water</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ama Qamata, Khosi Ngema, Gail Mabalane, Thaban...</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>2 Seasons</td>\n",
       "      <td>International TV Shows, TV Dramas, TV Mysteries</td>\n",
       "      <td>After crossing paths at a party, a Cape Town t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>s3</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Ganglands</td>\n",
       "      <td>Julien Leclercq</td>\n",
       "      <td>Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>1 Season</td>\n",
       "      <td>Crime TV Shows, International TV Shows, TV Act...</td>\n",
       "      <td>To protect his family from a powerful drug lor...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>s5</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Kota Factory</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mayur More, Jitendra Kumar, Ranjan Raj, Alam K...</td>\n",
       "      <td>India</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>2 Seasons</td>\n",
       "      <td>International TV Shows, Romantic TV Shows, TV ...</td>\n",
       "      <td>In a city of coaching centers known to train I...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>s6</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>Midnight Mass</td>\n",
       "      <td>Mike Flanagan</td>\n",
       "      <td>Kate Siegel, Zach Gilford, Hamish Linklater, H...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>1 Season</td>\n",
       "      <td>TV Dramas, TV Horror, TV Mysteries</td>\n",
       "      <td>The arrival of a charismatic young priest brin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>s7</td>\n",
       "      <td>Movie</td>\n",
       "      <td>My Little Pony: A New Generation</td>\n",
       "      <td>Robert Cullen, José Luis Ucha</td>\n",
       "      <td>Vanessa Hudgens, Kimiko Glenn, James Marsden, ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>September 24, 2021</td>\n",
       "      <td>2021</td>\n",
       "      <td>PG</td>\n",
       "      <td>91 min</td>\n",
       "      <td>Children &amp; Family Movies</td>\n",
       "      <td>Equestria's divided. But a bright-eyed hero be...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  show_id     type                             title  \\\n",
       "1      s2  TV Show                     Blood & Water   \n",
       "2      s3  TV Show                         Ganglands   \n",
       "4      s5  TV Show                      Kota Factory   \n",
       "5      s6  TV Show                     Midnight Mass   \n",
       "6      s7    Movie  My Little Pony: A New Generation   \n",
       "\n",
       "                        director  \\\n",
       "1                            NaN   \n",
       "2                Julien Leclercq   \n",
       "4                            NaN   \n",
       "5                  Mike Flanagan   \n",
       "6  Robert Cullen, José Luis Ucha   \n",
       "\n",
       "                                                cast       country  \\\n",
       "1  Ama Qamata, Khosi Ngema, Gail Mabalane, Thaban...  South Africa   \n",
       "2  Sami Bouajila, Tracy Gotoas, Samuel Jouy, Nabi...           NaN   \n",
       "4  Mayur More, Jitendra Kumar, Ranjan Raj, Alam K...         India   \n",
       "5  Kate Siegel, Zach Gilford, Hamish Linklater, H...           NaN   \n",
       "6  Vanessa Hudgens, Kimiko Glenn, James Marsden, ...           NaN   \n",
       "\n",
       "           date_added  release_year rating   duration  \\\n",
       "1  September 24, 2021          2021  TV-MA  2 Seasons   \n",
       "2  September 24, 2021          2021  TV-MA   1 Season   \n",
       "4  September 24, 2021          2021  TV-MA  2 Seasons   \n",
       "5  September 24, 2021          2021  TV-MA   1 Season   \n",
       "6  September 24, 2021          2021     PG     91 min   \n",
       "\n",
       "                                           listed_in  \\\n",
       "1    International TV Shows, TV Dramas, TV Mysteries   \n",
       "2  Crime TV Shows, International TV Shows, TV Act...   \n",
       "4  International TV Shows, Romantic TV Shows, TV ...   \n",
       "5                 TV Dramas, TV Horror, TV Mysteries   \n",
       "6                           Children & Family Movies   \n",
       "\n",
       "                                         description  \n",
       "1  After crossing paths at a party, a Cape Town t...  \n",
       "2  To protect his family from a powerful drug lor...  \n",
       "4  In a city of coaching centers known to train I...  \n",
       "5  The arrival of a charismatic young priest brin...  \n",
       "6  Equestria's divided. But a bright-eyed hero be...  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "504012c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.918564Z",
     "iopub.status.busy": "2024-12-09T01:01:57.918166Z",
     "iopub.status.idle": "2024-12-09T01:01:57.947936Z",
     "shell.execute_reply": "2024-12-09T01:01:57.946938Z"
    },
    "papermill": {
     "duration": 0.046029,
     "end_time": "2024-12-09T01:01:57.950401",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.904372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data['tags'] = (data.type+\" \"+data.cast+\" \"+data.country +\" \"+data.duration +\"\"+ data.listed_in+\" \"+data.description)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1b59a81a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:57.975009Z",
     "iopub.status.busy": "2024-12-09T01:01:57.974563Z",
     "iopub.status.idle": "2024-12-09T01:01:57.985271Z",
     "shell.execute_reply": "2024-12-09T01:01:57.984178Z"
    },
    "papermill": {
     "duration": 0.02605,
     "end_time": "2024-12-09T01:01:57.987891",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.961841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data.drop_duplicates(subset='tags', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07a57c99",
   "metadata": {
    "papermill": {
     "duration": 0.011014,
     "end_time": "2024-12-09T01:01:58.010218",
     "exception": false,
     "start_time": "2024-12-09T01:01:57.999204",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Content based recommender system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4e80b39e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:58.035019Z",
     "iopub.status.busy": "2024-12-09T01:01:58.034588Z",
     "iopub.status.idle": "2024-12-09T01:01:58.040981Z",
     "shell.execute_reply": "2024-12-09T01:01:58.039900Z"
    },
    "papermill": {
     "duration": 0.021469,
     "end_time": "2024-12-09T01:01:58.042989",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.021520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = data[['title','tags']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "12531beb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:58.067958Z",
     "iopub.status.busy": "2024-12-09T01:01:58.067462Z",
     "iopub.status.idle": "2024-12-09T01:01:58.077386Z",
     "shell.execute_reply": "2024-12-09T01:01:58.076283Z"
    },
    "papermill": {
     "duration": 0.024838,
     "end_time": "2024-12-09T01:01:58.079683",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.054845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2941961427.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  train_data.dropna(subset='tags', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "train_data.dropna(subset='tags', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ea013429",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:58.104324Z",
     "iopub.status.busy": "2024-12-09T01:01:58.103945Z",
     "iopub.status.idle": "2024-12-09T01:01:58.111658Z",
     "shell.execute_reply": "2024-12-09T01:01:58.110558Z"
    },
    "papermill": {
     "duration": 0.022587,
     "end_time": "2024-12-09T01:01:58.113785",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.091198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/815790747.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  train_data.iloc[0][-1]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'TV Show Ama Qamata, Khosi Ngema, Gail Mabalane, Thabang Molaba, Dillon Windvogel, Natasha Thahane, Arno Greeff, Xolile Tshabalala, Getmore Sithole, Cindy Mahlangu, Ryle De Morny, Greteli Fincham, Sello Maake Ka-Ncube, Odwa Gwanya, Mekaila Mathys, Sandi Schultz, Duane Williams, Shamilla Miller, Patrick Mofokeng South Africa 2 SeasonsInternational TV Shows, TV Dramas, TV Mysteries After crossing paths at a party, a Cape Town teen sets out to prove whether a private-school swimming star is her sister who was abducted at birth.'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.iloc[0][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "13553634",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:58.139103Z",
     "iopub.status.busy": "2024-12-09T01:01:58.138695Z",
     "iopub.status.idle": "2024-12-09T01:01:58.143489Z",
     "shell.execute_reply": "2024-12-09T01:01:58.142433Z"
    },
    "papermill": {
     "duration": 0.019886,
     "end_time": "2024-12-09T01:01:58.145524",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.125638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cv = CountVectorizer(max_features=5000, stop_words='english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2d3c4593",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-09T01:01:58.170802Z",
     "iopub.status.busy": "2024-12-09T01:01:58.170395Z",
     "iopub.status.idle": "2024-12-09T01:01:58.184271Z",
     "shell.execute_reply": "2024-12-09T01:01:58.183033Z"
    },
    "papermill": {
     "duration": 0.029381,
     "end_time": "2024-12-09T01:01:58.186487",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.157106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [1, 0]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cv.fit_transform(train_data).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc9f6418",
   "metadata": {
    "papermill": {
     "duration": 0.011333,
     "end_time": "2024-12-09T01:01:58.209671",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.198338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "merge useful words -> ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79df9df3",
   "metadata": {
    "papermill": {
     "duration": 0.011425,
     "end_time": "2024-12-09T01:01:58.233805",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.222380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d81c0521",
   "metadata": {
    "papermill": {
     "duration": 0.011092,
     "end_time": "2024-12-09T01:01:58.256479",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.245387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e5af2d8",
   "metadata": {
    "papermill": {
     "duration": 0.011356,
     "end_time": "2024-12-09T01:01:58.279329",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.267973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fea00ea",
   "metadata": {
    "papermill": {
     "duration": 0.011214,
     "end_time": "2024-12-09T01:01:58.301834",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.290620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8dfa9cfa",
   "metadata": {
    "papermill": {
     "duration": 0.011975,
     "end_time": "2024-12-09T01:01:58.325608",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.313633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15fe583b",
   "metadata": {
    "papermill": {
     "duration": 0.01119,
     "end_time": "2024-12-09T01:01:58.348350",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.337160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40d69f6e",
   "metadata": {
    "papermill": {
     "duration": 0.01127,
     "end_time": "2024-12-09T01:01:58.370922",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.359652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ccd626d",
   "metadata": {
    "papermill": {
     "duration": 0.01115,
     "end_time": "2024-12-09T01:01:58.393470",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.382320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52050950",
   "metadata": {
    "papermill": {
     "duration": 0.011182,
     "end_time": "2024-12-09T01:01:58.416090",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.404908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c3df1ca",
   "metadata": {
    "papermill": {
     "duration": 0.011031,
     "end_time": "2024-12-09T01:01:58.438506",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.427475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6d4303d",
   "metadata": {
    "papermill": {
     "duration": 0.011008,
     "end_time": "2024-12-09T01:01:58.460750",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.449742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df334ce1",
   "metadata": {
    "papermill": {
     "duration": 0.011001,
     "end_time": "2024-12-09T01:01:58.483063",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.472062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "264ef02f",
   "metadata": {
    "papermill": {
     "duration": 0.011042,
     "end_time": "2024-12-09T01:01:58.505343",
     "exception": false,
     "start_time": "2024-12-09T01:01:58.494301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 434238,
     "sourceId": 2654038,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.608788,
   "end_time": "2024-12-09T01:01:59.137228",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-09T01:01:50.528440",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
