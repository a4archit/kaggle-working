{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a757e74",
   "metadata": {
    "papermill": {
     "duration": 0.010043,
     "end_time": "2025-05-19T11:41:00.809498",
     "exception": false,
     "start_time": "2025-05-19T11:41:00.799455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9c6c3d2e",
   "metadata": {
    "papermill": {
     "duration": 0.007528,
     "end_time": "2025-05-19T11:41:00.826134",
     "exception": false,
     "start_time": "2025-05-19T11:41:00.818606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# <center style=\"padding: 30px 0; color:#fff; background-color: #0249c4;\"> <b>Text Summarization<b> </center>\n",
    "\n",
    "## Techniques used in this project:\n",
    "\n",
    "- Tokenization\n",
    "- Stemming\n",
    "- Embedding\n",
    "- Self-Attention\n",
    "- *others*\n",
    "\n",
    "\n",
    "## Steps to be done\n",
    "- [x] Clean (CNN, By, etc.)\n",
    "- [x] Lowercasing\n",
    "<!-- - [ ] Stemming -->\n",
    "- [x] Tokenization\n",
    "\n",
    "- [ ] Next step is to apply tokenize on both data and target after that further processing..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0cafc920",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:00.843246Z",
     "iopub.status.busy": "2025-05-19T11:41:00.842395Z",
     "iopub.status.idle": "2025-05-19T11:41:02.684504Z",
     "shell.execute_reply": "2025-05-19T11:41:02.683517Z"
    },
    "papermill": {
     "duration": 1.85227,
     "end_time": "2025-05-19T11:41:02.686044",
     "exception": false,
     "start_time": "2025-05-19T11:41:00.833774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/newspaper-text-summarization-cnn-dailymail/cnn_dailymail/validation.csv\n",
      "/kaggle/input/newspaper-text-summarization-cnn-dailymail/cnn_dailymail/train.csv\n",
      "/kaggle/input/newspaper-text-summarization-cnn-dailymail/cnn_dailymail/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9bff9991",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:02.703063Z",
     "iopub.status.busy": "2025-05-19T11:41:02.702684Z",
     "iopub.status.idle": "2025-05-19T11:41:19.455989Z",
     "shell.execute_reply": "2025-05-19T11:41:19.455277Z"
    },
    "papermill": {
     "duration": 16.763491,
     "end_time": "2025-05-19T11:41:19.457535",
     "exception": false,
     "start_time": "2025-05-19T11:41:02.694044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-19 11:41:06.185781: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1747654866.416965      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1747654866.484369      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import tensorflow\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e04b45fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:19.475355Z",
     "iopub.status.busy": "2025-05-19T11:41:19.474800Z",
     "iopub.status.idle": "2025-05-19T11:41:48.656687Z",
     "shell.execute_reply": "2025-05-19T11:41:48.655774Z"
    },
    "papermill": {
     "duration": 29.192915,
     "end_time": "2025-05-19T11:41:48.658495",
     "exception": false,
     "start_time": "2025-05-19T11:41:19.465580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv(r\"/kaggle/input/newspaper-text-summarization-cnn-dailymail/cnn_dailymail/train.csv\")\n",
    "xtrain = train.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1788a9e",
   "metadata": {
    "papermill": {
     "duration": 0.007471,
     "end_time": "2025-05-19T11:41:48.673997",
     "exception": false,
     "start_time": "2025-05-19T11:41:48.666526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 20px 0; color: #fff; background-color: #000;\"> Understanding data </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a25c5138",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:48.690582Z",
     "iopub.status.busy": "2025-05-19T11:41:48.690237Z",
     "iopub.status.idle": "2025-05-19T11:41:48.722511Z",
     "shell.execute_reply": "2025-05-19T11:41:48.721658Z"
    },
    "papermill": {
     "duration": 0.042267,
     "end_time": "2025-05-19T11:41:48.723955",
     "exception": false,
     "start_time": "2025-05-19T11:41:48.681688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>article</th>\n",
       "      <th>highlights</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>74382</th>\n",
       "      <td>d2e443dc4d12478e397952bc456370a071086dd4</td>\n",
       "      <td>(CNN) -- Johnny Lee Wicks, 66, was carrying a ...</td>\n",
       "      <td>NEW: Suspect Johnny Wicks had a lengthy rap sh...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             id  \\\n",
       "74382  d2e443dc4d12478e397952bc456370a071086dd4   \n",
       "\n",
       "                                                 article  \\\n",
       "74382  (CNN) -- Johnny Lee Wicks, 66, was carrying a ...   \n",
       "\n",
       "                                              highlights  \n",
       "74382  NEW: Suspect Johnny Wicks had a lengthy rap sh...  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.sample(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cd8a48ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:48.741727Z",
     "iopub.status.busy": "2025-05-19T11:41:48.741210Z",
     "iopub.status.idle": "2025-05-19T11:41:48.860417Z",
     "shell.execute_reply": "2025-05-19T11:41:48.859453Z"
    },
    "papermill": {
     "duration": 0.129691,
     "end_time": "2025-05-19T11:41:48.861831",
     "exception": false,
     "start_time": "2025-05-19T11:41:48.732140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 287113 entries, 0 to 287112\n",
      "Data columns (total 3 columns):\n",
      " #   Column      Non-Null Count   Dtype \n",
      "---  ------      --------------   ----- \n",
      " 0   id          287113 non-null  object\n",
      " 1   article     287113 non-null  object\n",
      " 2   highlights  287113 non-null  object\n",
      "dtypes: object(3)\n",
      "memory usage: 6.6+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "89229936",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:48.879728Z",
     "iopub.status.busy": "2025-05-19T11:41:48.879164Z",
     "iopub.status.idle": "2025-05-19T11:41:50.695278Z",
     "shell.execute_reply": "2025-05-19T11:41:50.694391Z"
    },
    "papermill": {
     "duration": 1.826708,
     "end_time": "2025-05-19T11:41:50.696816",
     "exception": false,
     "start_time": "2025-05-19T11:41:48.870108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>article</th>\n",
       "      <th>highlights</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>287113</td>\n",
       "      <td>287113</td>\n",
       "      <td>287113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>287113</td>\n",
       "      <td>284005</td>\n",
       "      <td>282197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>0001d1afc246a7964130f43ae940af6bc6c57f01</td>\n",
       "      <td>(CNN) -- Dubai could lose its place on the Wom...</td>\n",
       "      <td>This page includes the show Transcript and the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              id  \\\n",
       "count                                     287113   \n",
       "unique                                    287113   \n",
       "top     0001d1afc246a7964130f43ae940af6bc6c57f01   \n",
       "freq                                           1   \n",
       "\n",
       "                                                  article  \\\n",
       "count                                              287113   \n",
       "unique                                             284005   \n",
       "top     (CNN) -- Dubai could lose its place on the Wom...   \n",
       "freq                                                    3   \n",
       "\n",
       "                                               highlights  \n",
       "count                                              287113  \n",
       "unique                                             282197  \n",
       "top     This page includes the show Transcript and the...  \n",
       "freq                                                   83  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e498ba8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:50.715066Z",
     "iopub.status.busy": "2025-05-19T11:41:50.714787Z",
     "iopub.status.idle": "2025-05-19T11:41:50.824378Z",
     "shell.execute_reply": "2025-05-19T11:41:50.823484Z"
    },
    "papermill": {
     "duration": 0.120296,
     "end_time": "2025-05-19T11:41:50.825912",
     "exception": false,
     "start_time": "2025-05-19T11:41:50.705616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id            0\n",
       "article       0\n",
       "highlights    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5513cc92",
   "metadata": {
    "papermill": {
     "duration": 0.008099,
     "end_time": "2025-05-19T11:41:50.842409",
     "exception": false,
     "start_time": "2025-05-19T11:41:50.834310",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 20px 0; color: #fff; background-color: #000;\"> EDA (Exploratory Data Analysis) </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "62c7c33b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:41:50.860194Z",
     "iopub.status.busy": "2025-05-19T11:41:50.859907Z",
     "iopub.status.idle": "2025-05-19T11:42:07.175017Z",
     "shell.execute_reply": "2025-05-19T11:42:07.174119Z"
    },
    "papermill": {
     "duration": 16.325979,
     "end_time": "2025-05-19T11:42:07.176676",
     "exception": false,
     "start_time": "2025-05-19T11:41:50.850697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Words length comparison of 'articles' and 'highlights'\")\n",
    "sns.histplot( train.article.apply(lambda x: len(x.split(' '))), label='article' )\n",
    "sns.histplot( train.highlights.apply(lambda x: len(x.split(' '))), label='highlights')\n",
    "plt.legend()\n",
    "plt.xlim(0,1500)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "901bba80",
   "metadata": {
    "papermill": {
     "duration": 0.008555,
     "end_time": "2025-05-19T11:42:07.194359",
     "exception": false,
     "start_time": "2025-05-19T11:42:07.185804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 20px 0; color: #fff; background-color: #000;\"> Data Cleaning </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7f01f350",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:07.213496Z",
     "iopub.status.busy": "2025-05-19T11:42:07.212881Z",
     "iopub.status.idle": "2025-05-19T11:42:07.219005Z",
     "shell.execute_reply": "2025-05-19T11:42:07.218248Z"
    },
    "papermill": {
     "duration": 0.017194,
     "end_time": "2025-05-19T11:42:07.220368",
     "exception": false,
     "start_time": "2025-05-19T11:42:07.203174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def clean_article(article: str) -> str:\n",
    "    \"\"\" This function will helpful for return the cleaned article \"\"\"\n",
    "\n",
    "    article = article.replace('(CNN) --','')\n",
    "    article = article.replace('(CNN)','')\n",
    "    \n",
    "    # if not ('UPDATE' in article and 'PUBLISHED' in article) :         \n",
    "    if not article.strip().startswith('By'):\n",
    "        return article\n",
    "\n",
    "    for sentence in article.split('.'):\n",
    "        word_list = sentence.split(' ')\n",
    "        if len(word_list) > 10:\n",
    "            updated_article = article[article.index(sentence):]\n",
    "            break\n",
    "\n",
    "    return updated_article.lower()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def clean_highlights(highlight: str) -> str:\n",
    "    \"\"\" This function will clean the given highlights, and make them for furthur processing \"\"\"\n",
    "    \n",
    "    highlight = highlight.replace('\\n','')\n",
    "    return highlight.lower()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d2980305",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:07.239603Z",
     "iopub.status.busy": "2025-05-19T11:42:07.239251Z",
     "iopub.status.idle": "2025-05-19T11:42:07.244405Z",
     "shell.execute_reply": "2025-05-19T11:42:07.243528Z"
    },
    "papermill": {
     "duration": 0.016278,
     "end_time": "2025-05-19T11:42:07.245834",
     "exception": false,
     "start_time": "2025-05-19T11:42:07.229556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "min_words_in_input_sentence = 100\n",
    "max_words_in_input_sentence = 700\n",
    "max_words_in_target = 150\n",
    "\n",
    "def get_eligible_sentences(article: str) -> str :\n",
    "    \"\"\" This function will helps to remove small and large sentences (check by using words length) \"\"\"\n",
    "    sentence_length = len(article.split(' '))\n",
    "    if sentence_length > min_words_in_input_sentence and sentence_length <= max_words_in_input_sentence:\n",
    "        return article \n",
    "    else:\n",
    "        return np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "90428806",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:07.264994Z",
     "iopub.status.busy": "2025-05-19T11:42:07.264687Z",
     "iopub.status.idle": "2025-05-19T11:42:07.268479Z",
     "shell.execute_reply": "2025-05-19T11:42:07.267635Z"
    },
    "papermill": {
     "duration": 0.015082,
     "end_time": "2025-05-19T11:42:07.270010",
     "exception": false,
     "start_time": "2025-05-19T11:42:07.254928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# xtrain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "eaf8e8af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:07.289026Z",
     "iopub.status.busy": "2025-05-19T11:42:07.288751Z",
     "iopub.status.idle": "2025-05-19T11:42:30.901858Z",
     "shell.execute_reply": "2025-05-19T11:42:30.900889Z"
    },
    "papermill": {
     "duration": 23.624477,
     "end_time": "2025-05-19T11:42:30.903412",
     "exception": false,
     "start_time": "2025-05-19T11:42:07.278935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# basic operations for better data \n",
    "xtrain.article = train.article.apply(clean_article)\n",
    "xtrain.highlights = train.highlights.apply(clean_highlights)\n",
    "\n",
    "\n",
    "# concatenation of article and highlights\n",
    "xtrain['combined'] = xtrain.article + \" \" +  xtrain.highlights\n",
    "\n",
    "\n",
    "# we are taking only those article ehich have words length between 100 - 700\n",
    "xtrain.article = xtrain.article.apply(get_eligible_sentences)\n",
    "\n",
    "xtrain.dropna(inplace = True)\n",
    "xtrain.reset_index(drop=True)\n",
    "\n",
    "\n",
    "# dropping unusefull features\n",
    "try:\n",
    "    xtrain.drop(columns=['id'], inplace=True)\n",
    "except KeyError:\n",
    "    print(\"Column(s) already dropped.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a8a31cf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:30.987090Z",
     "iopub.status.busy": "2025-05-19T11:42:30.986789Z",
     "iopub.status.idle": "2025-05-19T11:42:30.992372Z",
     "shell.execute_reply": "2025-05-19T11:42:30.991512Z"
    },
    "papermill": {
     "duration": 0.017418,
     "end_time": "2025-05-19T11:42:30.993791",
     "exception": false,
     "start_time": "2025-05-19T11:42:30.976373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(168747, 3)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtrain.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7ac74a0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:31.013027Z",
     "iopub.status.busy": "2025-05-19T11:42:31.012726Z",
     "iopub.status.idle": "2025-05-19T11:42:31.016703Z",
     "shell.execute_reply": "2025-05-19T11:42:31.015932Z"
    },
    "papermill": {
     "duration": 0.015245,
     "end_time": "2025-05-19T11:42:31.018072",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.002827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# corpus = []\n",
    "# temp = 0\n",
    "\n",
    "# for document in xtrain.combined:\n",
    "#     # word_list = document.split(' ')\n",
    "#     # corpus.extend(word_list)\n",
    "#     print(document)\n",
    "\n",
    "#     if temp == 5:\n",
    "#         break\n",
    "#     temp += 1\n",
    "\n",
    "# # vocabulary = set(corpus)\n",
    "\n",
    "# print(f\"Words in coupus are: {len(corpus):,}\")\n",
    "# print(f\"Total vocabulary: {len(vocabulary):,}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "358c2aa6",
   "metadata": {
    "papermill": {
     "duration": 0.008901,
     "end_time": "2025-05-19T11:42:31.036280",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.027379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b52946d8",
   "metadata": {
    "papermill": {
     "duration": 0.008872,
     "end_time": "2025-05-19T11:42:31.054209",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.045337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b98d3966",
   "metadata": {
    "papermill": {
     "duration": 0.008823,
     "end_time": "2025-05-19T11:42:31.072071",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.063248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bfd20c2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:31.091779Z",
     "iopub.status.busy": "2025-05-19T11:42:31.091421Z",
     "iopub.status.idle": "2025-05-19T11:42:31.095492Z",
     "shell.execute_reply": "2025-05-19T11:42:31.094629Z"
    },
    "papermill": {
     "duration": 0.015729,
     "end_time": "2025-05-19T11:42:31.096857",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.081128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#             Cheking the proper concatenation of articles and highlights\n",
    "\n",
    "# for i in range(xtrain.shape[0]):\n",
    "#     if xtrain.article[i] not in xtrain.combined[i]:\n",
    "#         print(f\"Article mismatch at {i}\")\n",
    "#     if xtrain.highlights[i] not in xtrain.combined[i]:\n",
    "#         print(f\"Highlights mismatch at {i}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3c88a527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:31.117722Z",
     "iopub.status.busy": "2025-05-19T11:42:31.117365Z",
     "iopub.status.idle": "2025-05-19T11:42:31.121054Z",
     "shell.execute_reply": "2025-05-19T11:42:31.120182Z"
    },
    "papermill": {
     "duration": 0.015246,
     "end_time": "2025-05-19T11:42:31.122348",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.107102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# if 'a' not in 'hjk':\n",
    "#     print(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dae05029",
   "metadata": {
    "papermill": {
     "duration": 0.008952,
     "end_time": "2025-05-19T11:42:31.140885",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.131933",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ab97c59e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:31.160266Z",
     "iopub.status.busy": "2025-05-19T11:42:31.159971Z",
     "iopub.status.idle": "2025-05-19T11:42:31.164214Z",
     "shell.execute_reply": "2025-05-19T11:42:31.163395Z"
    },
    "papermill": {
     "duration": 0.015551,
     "end_time": "2025-05-19T11:42:31.165465",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.149914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# total_cnn = 0\n",
    "# total_UPDATED = 0\n",
    "# total_PUBLISHED = 0\n",
    "# total_cnn___ = 0\n",
    "# backslash_n = 0\n",
    "\n",
    "# for article in xtrain.article:\n",
    "#     # total_cnn += article.count('(CNN)')\n",
    "#     # total_UPDATED += article.count('UPDATED')\n",
    "#     # total_PUBLISHED += article.count('PUBLISHED')\n",
    "#     backslash_n += article.count('\\n')\n",
    "\n",
    "# input(\"Stop here: \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "66cb7d05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:31.185881Z",
     "iopub.status.busy": "2025-05-19T11:42:31.185563Z",
     "iopub.status.idle": "2025-05-19T11:42:31.191926Z",
     "shell.execute_reply": "2025-05-19T11:42:31.191031Z"
    },
    "papermill": {
     "duration": 0.018165,
     "end_time": "2025-05-19T11:42:31.193427",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.175262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"nina dos santos says europe must be ready to accept sanctions will hurt both sides .targeting russia's business community would be one way of sapping their support for president putin, she says .but she says europe would have a hard time keeping its factories going without power from the east .\""
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtrain.iloc[2,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ded8f5f7",
   "metadata": {
    "papermill": {
     "duration": 0.00896,
     "end_time": "2025-05-19T11:42:31.211787",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.202827",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 20px 0; color: #fff; background-color: #000;\">T5-Small Tokenizing </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2240a4c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:31.231347Z",
     "iopub.status.busy": "2025-05-19T11:42:31.231048Z",
     "iopub.status.idle": "2025-05-19T11:42:51.125429Z",
     "shell.execute_reply": "2025-05-19T11:42:51.124524Z"
    },
    "papermill": {
     "duration": 19.906296,
     "end_time": "2025-05-19T11:42:51.127132",
     "exception": false,
     "start_time": "2025-05-19T11:42:31.220836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "29a9393e4e524a9781964a46a54ddda7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/2.32k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5811b2c4086d4f63a95bba403a594f18",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4634a0b5e7be46459466215b3a7f5aca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/1.39M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using the default legacy behaviour of the <class 'transformers.models.t5.tokenization_t5.T5Tokenizer'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565\n"
     ]
    }
   ],
   "source": [
    "from transformers import T5Tokenizer, T5ForConditionalGeneration\n",
    "\n",
    "# Load pretrained tokenizer and model\n",
    "t5_tokenizer = T5Tokenizer.from_pretrained(\"t5-small\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ff6a25e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:51.149404Z",
     "iopub.status.busy": "2025-05-19T11:42:51.148120Z",
     "iopub.status.idle": "2025-05-19T11:42:51.409077Z",
     "shell.execute_reply": "2025-05-19T11:42:51.407999Z"
    },
    "papermill": {
     "duration": 0.274591,
     "end_time": "2025-05-19T11:42:51.412128",
     "exception": false,
     "start_time": "2025-05-19T11:42:51.137537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_texts = [\"summarize: \" + art for art in xtrain.article]     # prepend 'summarize:'\n",
    "target_texts = xtrain.highlights.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b8389e74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:42:51.437264Z",
     "iopub.status.busy": "2025-05-19T11:42:51.436743Z",
     "iopub.status.idle": "2025-05-19T11:54:54.526495Z",
     "shell.execute_reply": "2025-05-19T11:54:54.525790Z"
    },
    "papermill": {
     "duration": 723.102278,
     "end_time": "2025-05-19T11:54:54.528218",
     "exception": false,
     "start_time": "2025-05-19T11:42:51.425940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "t5_input_encodings = t5_tokenizer(\n",
    "    input_texts, \n",
    "    padding=\"max_length\", \n",
    "    truncation=True, \n",
    "    max_length=max_words_in_input_sentence, \n",
    "    return_tensors=\"pt\"\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4388922f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:54:54.628668Z",
     "iopub.status.busy": "2025-05-19T11:54:54.628305Z",
     "iopub.status.idle": "2025-05-19T11:56:24.171834Z",
     "shell.execute_reply": "2025-05-19T11:56:24.170678Z"
    },
    "papermill": {
     "duration": 89.637128,
     "end_time": "2025-05-19T11:56:24.175545",
     "exception": false,
     "start_time": "2025-05-19T11:54:54.538417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "t5_target_encodings = t5_tokenizer(\n",
    "    target_texts,\n",
    "    padding=\"max_length\",\n",
    "    truncation=True,\n",
    "    max_length=max_words_in_target,\n",
    "    return_tensors=\"pt\"\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26768ab3",
   "metadata": {
    "papermill": {
     "duration": 0.009574,
     "end_time": "2025-05-19T11:56:24.199875",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.190301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08efb026",
   "metadata": {
    "papermill": {
     "duration": 0.009357,
     "end_time": "2025-05-19T11:56:24.219462",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.210105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08b0bcb5",
   "metadata": {
    "papermill": {
     "duration": 0.009194,
     "end_time": "2025-05-19T11:56:24.238271",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.229077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d71d1fdc",
   "metadata": {
    "papermill": {
     "duration": 0.009162,
     "end_time": "2025-05-19T11:56:24.256931",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.247769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54072c1f",
   "metadata": {
    "papermill": {
     "duration": 0.009186,
     "end_time": "2025-05-19T11:56:24.275500",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.266314",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7e12775",
   "metadata": {
    "papermill": {
     "duration": 0.009154,
     "end_time": "2025-05-19T11:56:24.293960",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.284806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8924d394",
   "metadata": {
    "papermill": {
     "duration": 0.009284,
     "end_time": "2025-05-19T11:56:24.313149",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.303865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "15abe14b",
   "metadata": {
    "papermill": {
     "duration": 0.00914,
     "end_time": "2025-05-19T11:56:24.332110",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.322970",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 20px 0; color: #fff; background-color: #000;\">Custom Tokenizing </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4867f4c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:56:24.365362Z",
     "iopub.status.busy": "2025-05-19T11:56:24.365003Z",
     "iopub.status.idle": "2025-05-19T11:56:24.791576Z",
     "shell.execute_reply": "2025-05-19T11:56:24.790808Z"
    },
    "papermill": {
     "duration": 0.451921,
     "end_time": "2025-05-19T11:56:24.793360",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.341439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xtrain.combined = xtrain.combined.apply(lambda s: \"<sos> \" + s + \" <eos>\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "664327ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:56:24.906148Z",
     "iopub.status.busy": "2025-05-19T11:56:24.905798Z",
     "iopub.status.idle": "2025-05-19T11:58:04.581041Z",
     "shell.execute_reply": "2025-05-19T11:58:04.580119Z"
    },
    "papermill": {
     "duration": 99.779855,
     "end_time": "2025-05-19T11:58:04.582908",
     "exception": false,
     "start_time": "2025-05-19T11:56:24.803053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "max_words = 50_000\n",
    "\n",
    "tokenizer = Tokenizer(num_words=max_words, oov_token=\"<unk>\", filters='!\"#$%&()*+,-./:;=?@[\\\\]^_`{|}~\\t\\n')\n",
    "tokenizer.fit_on_texts(xtrain.combined)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c72aaec6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:58:04.604014Z",
     "iopub.status.busy": "2025-05-19T11:58:04.603697Z",
     "iopub.status.idle": "2025-05-19T11:59:16.101142Z",
     "shell.execute_reply": "2025-05-19T11:59:16.100212Z"
    },
    "papermill": {
     "duration": 71.510298,
     "end_time": "2025-05-19T11:59:16.103424",
     "exception": false,
     "start_time": "2025-05-19T11:58:04.593126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_tokens = tokenizer.texts_to_sequences(xtrain.article)\n",
    "target_tokens = tokenizer.texts_to_sequences(xtrain.highlights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "db10c388",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:16.125288Z",
     "iopub.status.busy": "2025-05-19T11:59:16.124981Z",
     "iopub.status.idle": "2025-05-19T11:59:23.198970Z",
     "shell.execute_reply": "2025-05-19T11:59:23.197726Z"
    },
    "papermill": {
     "duration": 7.087354,
     "end_time": "2025-05-19T11:59:23.201808",
     "exception": false,
     "start_time": "2025-05-19T11:59:16.114454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_sequences = pad_sequences(input_tokens, maxlen=max_words_in_input_sentence, padding='post', truncating='post')\n",
    "target_sequences = pad_sequences(target_tokens, maxlen=max_words_in_target, padding='post', truncating='post')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "758e7dae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:23.225305Z",
     "iopub.status.busy": "2025-05-19T11:59:23.224504Z",
     "iopub.status.idle": "2025-05-19T11:59:23.231036Z",
     "shell.execute_reply": "2025-05-19T11:59:23.230168Z"
    },
    "papermill": {
     "duration": 0.019106,
     "end_time": "2025-05-19T11:59:23.232689",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.213583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((168747, 700), (168747, 150))"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_sequences.shape, target_sequences.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d522ef3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:23.253945Z",
     "iopub.status.busy": "2025-05-19T11:59:23.253118Z",
     "iopub.status.idle": "2025-05-19T11:59:23.258647Z",
     "shell.execute_reply": "2025-05-19T11:59:23.257683Z"
    },
    "papermill": {
     "duration": 0.017538,
     "end_time": "2025-05-19T11:59:23.260078",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.242540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "522769"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(tokenizer.word_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cf8fc3d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:23.280994Z",
     "iopub.status.busy": "2025-05-19T11:59:23.280695Z",
     "iopub.status.idle": "2025-05-19T11:59:23.406401Z",
     "shell.execute_reply": "2025-05-19T11:59:23.405513Z"
    },
    "papermill": {
     "duration": 0.137711,
     "end_time": "2025-05-19T11:59:23.407822",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.270111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('<unk>', 1), ('the', 2), ('to', 3), ('a', 4), ('of', 5)]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(tokenizer.word_index.items())[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a6600842",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:23.428899Z",
     "iopub.status.busy": "2025-05-19T11:59:23.428589Z",
     "iopub.status.idle": "2025-05-19T11:59:23.434231Z",
     "shell.execute_reply": "2025-05-19T11:59:23.433403Z"
    },
    "papermill": {
     "duration": 0.017917,
     "end_time": "2025-05-19T11:59:23.435717",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.417800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokenizer.word_index['<eos>']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab46af49",
   "metadata": {
    "papermill": {
     "duration": 0.009759,
     "end_time": "2025-05-19T11:59:23.455725",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.445966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Replacing padded token IDs with `-100` in target tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7d1e8073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:23.477601Z",
     "iopub.status.busy": "2025-05-19T11:59:23.477220Z",
     "iopub.status.idle": "2025-05-19T11:59:23.481395Z",
     "shell.execute_reply": "2025-05-19T11:59:23.480519Z"
    },
    "papermill": {
     "duration": 0.017337,
     "end_time": "2025-05-19T11:59:23.483061",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.465724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# updated_target_sequences = [[ element if element != 0 else -100 for element in token] for token in target_sequences]\n",
    "# updated_target_sequences = np.array(updated_target_sequences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b3183e77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:23.505030Z",
     "iopub.status.busy": "2025-05-19T11:59:23.504717Z",
     "iopub.status.idle": "2025-05-19T11:59:24.438013Z",
     "shell.execute_reply": "2025-05-19T11:59:24.437116Z"
    },
    "papermill": {
     "duration": 0.946079,
     "end_time": "2025-05-19T11:59:24.439494",
     "exception": false,
     "start_time": "2025-05-19T11:59:23.493415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "118122900"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(input_sequences.astype('int32') == input_sequences.astype('int64')).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9f4a0c4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:24.460982Z",
     "iopub.status.busy": "2025-05-19T11:59:24.460664Z",
     "iopub.status.idle": "2025-05-19T11:59:24.632654Z",
     "shell.execute_reply": "2025-05-19T11:59:24.631440Z"
    },
    "papermill": {
     "duration": 0.184598,
     "end_time": "2025-05-19T11:59:24.634321",
     "exception": false,
     "start_time": "2025-05-19T11:59:24.449723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_sequences = input_sequences.astype('int32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c858fbc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:24.655977Z",
     "iopub.status.busy": "2025-05-19T11:59:24.655340Z",
     "iopub.status.idle": "2025-05-19T11:59:24.760212Z",
     "shell.execute_reply": "2025-05-19T11:59:24.759354Z"
    },
    "papermill": {
     "duration": 0.117106,
     "end_time": "2025-05-19T11:59:24.761689",
     "exception": false,
     "start_time": "2025-05-19T11:59:24.644583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "522769"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(list(tokenizer.word_index.items()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8fa2361",
   "metadata": {
    "papermill": {
     "duration": 0.009777,
     "end_time": "2025-05-19T11:59:24.781733",
     "exception": false,
     "start_time": "2025-05-19T11:59:24.771956",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"padding: 20px 0; color: #fff; background-color: #000;\"> Saving Files </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "48649a95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:24.803588Z",
     "iopub.status.busy": "2025-05-19T11:59:24.803189Z",
     "iopub.status.idle": "2025-05-19T11:59:28.725960Z",
     "shell.execute_reply": "2025-05-19T11:59:28.725177Z"
    },
    "papermill": {
     "duration": 3.935278,
     "end_time": "2025-05-19T11:59:28.727566",
     "exception": false,
     "start_time": "2025-05-19T11:59:24.792288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle \n",
    "\n",
    "pickle.dump(tokenizer, open(f'tokenizer_{max_words}.pkl', 'wb'))\n",
    "pickle.dump(input_sequences, open(f'input_sequences.pkl', 'wb'))\n",
    "pickle.dump(target_sequences, open(f'target_sequences.pkl', 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d96b4e2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:28.748873Z",
     "iopub.status.busy": "2025-05-19T11:59:28.748585Z",
     "iopub.status.idle": "2025-05-19T11:59:36.387847Z",
     "shell.execute_reply": "2025-05-19T11:59:36.386905Z"
    },
    "papermill": {
     "duration": 7.65219,
     "end_time": "2025-05-19T11:59:36.389976",
     "exception": false,
     "start_time": "2025-05-19T11:59:28.737786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pickle.dump(t5_input_encodings, open(f\"t5_input_encodings.pkl\", 'wb'))\n",
    "pickle.dump(t5_target_encodings, open(f\"t5_target_encodings.pkl\", 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fd503b0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T11:59:36.461903Z",
     "iopub.status.busy": "2025-05-19T11:59:36.461034Z",
     "iopub.status.idle": "2025-05-19T11:59:36.655009Z",
     "shell.execute_reply": "2025-05-19T11:59:36.654154Z"
    },
    "papermill": {
     "duration": 0.208188,
     "end_time": "2025-05-19T11:59:36.656561",
     "exception": false,
     "start_time": "2025-05-19T11:59:36.448373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "450.6031036376953"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_sequences.astype('int32').nbytes / 1024 / 1024"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4ed630f",
   "metadata": {
    "papermill": {
     "duration": 0.010977,
     "end_time": "2025-05-19T11:59:36.684120",
     "exception": false,
     "start_time": "2025-05-19T11:59:36.673143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b708dc8",
   "metadata": {
    "papermill": {
     "duration": 0.058009,
     "end_time": "2025-05-19T11:59:36.790242",
     "exception": false,
     "start_time": "2025-05-19T11:59:36.732233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1654566,
     "sourceId": 2734496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1124.200878,
   "end_time": "2025-05-19T11:59:39.973891",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-19T11:40:55.773013",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "04acb13d3ea54c90bfda20c455c11a54": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "075347621be74c2a8cade45201535397": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0cffdd70bfe24096a4704700bb44d4ac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "12339533813f437d9492dbc98f2577c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "238a931b38c847d1954afed71241093f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29a9393e4e524a9781964a46a54ddda7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_735ef8cfe3704e0393debf61a18c8a05",
        "IPY_MODEL_4a07211fcc8e41b9af5757e486cc7b20",
        "IPY_MODEL_7077275f18d04cecb9a1231f7f2c5b85"
       ],
       "layout": "IPY_MODEL_0cffdd70bfe24096a4704700bb44d4ac",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2c4b6fb1c2fc44b9b58dfcd18517405d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4634a0b5e7be46459466215b3a7f5aca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4c16bc464eff45879b791e41b32e8c34",
        "IPY_MODEL_f60838f6e5d445c696cbd0f4b8581071",
        "IPY_MODEL_742ba6226e58488ba565b00fcd14d583"
       ],
       "layout": "IPY_MODEL_c8a2bbd131de4af0b2ff7f34c3ec28d6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4a07211fcc8e41b9af5757e486cc7b20": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_075347621be74c2a8cade45201535397",
       "max": 2324.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fc4efa270ac04c4f949245fc5cdfd009",
       "tabbable": null,
       "tooltip": null,
       "value": 2324.0
      }
     },
     "4c16bc464eff45879b791e41b32e8c34": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_04acb13d3ea54c90bfda20c455c11a54",
       "placeholder": "​",
       "style": "IPY_MODEL_12339533813f437d9492dbc98f2577c4",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: 100%"
      }
     },
     "5811b2c4086d4f63a95bba403a594f18": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_616ba5c7da6544529c58b87021217470",
        "IPY_MODEL_be73026cb2a14640bee6bf8aaa157842",
        "IPY_MODEL_75a2be2cceab412bb85f40a93a87f4f2"
       ],
       "layout": "IPY_MODEL_ff539dd1555a444db94a9bc96bfb42db",
       "tabbable": null,
       "tooltip": null
      }
     },
     "616ba5c7da6544529c58b87021217470": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aa94f50359bc46b0b8b3745cda59bc5f",
       "placeholder": "​",
       "style": "IPY_MODEL_2c4b6fb1c2fc44b9b58dfcd18517405d",
       "tabbable": null,
       "tooltip": null,
       "value": "spiece.model: 100%"
      }
     },
     "7077275f18d04cecb9a1231f7f2c5b85": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bd3b16376bd64310b5ffa99a12b5a279",
       "placeholder": "​",
       "style": "IPY_MODEL_b58bc34524de46ad9927f2abb1f2d9b8",
       "tabbable": null,
       "tooltip": null,
       "value": " 2.32k/2.32k [00:00&lt;00:00, 250kB/s]"
      }
     },
     "735ef8cfe3704e0393debf61a18c8a05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a40c7dc0c2a949cdb4f991dff9b83a86",
       "placeholder": "​",
       "style": "IPY_MODEL_e6390fba455e4ee29365ea118208ffde",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "742ba6226e58488ba565b00fcd14d583": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f02af4cbdfa749eaa249724276dddd79",
       "placeholder": "​",
       "style": "IPY_MODEL_9735a088bb464c348d55b6a3c0a44ba0",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.39M/1.39M [00:00&lt;00:00, 3.79MB/s]"
      }
     },
     "75a2be2cceab412bb85f40a93a87f4f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_238a931b38c847d1954afed71241093f",
       "placeholder": "​",
       "style": "IPY_MODEL_ec22f7b4302e4f2696e2418272f0748a",
       "tabbable": null,
       "tooltip": null,
       "value": " 792k/792k [00:00&lt;00:00, 2.20MB/s]"
      }
     },
     "93e7f3d4514c441b96feeccd0668dbb1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9735a088bb464c348d55b6a3c0a44ba0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a40c7dc0c2a949cdb4f991dff9b83a86": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aa94f50359bc46b0b8b3745cda59bc5f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b58bc34524de46ad9927f2abb1f2d9b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bd3b16376bd64310b5ffa99a12b5a279": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be73026cb2a14640bee6bf8aaa157842": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_deb5870be23e44799e3e6abe511de371",
       "max": 791656.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c88fba8665014cc98c573d74915e47a4",
       "tabbable": null,
       "tooltip": null,
       "value": 791656.0
      }
     },
     "c38f0b493d4d443bbfd02275e48b2077": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c88fba8665014cc98c573d74915e47a4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c8a2bbd131de4af0b2ff7f34c3ec28d6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "deb5870be23e44799e3e6abe511de371": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e6390fba455e4ee29365ea118208ffde": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ec22f7b4302e4f2696e2418272f0748a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f02af4cbdfa749eaa249724276dddd79": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f60838f6e5d445c696cbd0f4b8581071": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c38f0b493d4d443bbfd02275e48b2077",
       "max": 1389353.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_93e7f3d4514c441b96feeccd0668dbb1",
       "tabbable": null,
       "tooltip": null,
       "value": 1389353.0
      }
     },
     "fc4efa270ac04c4f949245fc5cdfd009": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ff539dd1555a444db94a9bc96bfb42db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
