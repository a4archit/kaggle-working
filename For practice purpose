{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d83ad9ea",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:16.576588Z",
     "iopub.status.busy": "2025-01-01T07:27:16.576073Z",
     "iopub.status.idle": "2025-01-01T07:27:18.882399Z",
     "shell.execute_reply": "2025-01-01T07:27:18.880994Z"
    },
    "papermill": {
     "duration": 2.315526,
     "end_time": "2025-01-01T07:27:18.884750",
     "exception": false,
     "start_time": "2025-01-01T07:27:16.569224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e1/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e1/train.csv\n",
      "/kaggle/input/playground-series-s5e1/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns \n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6234ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:18.896766Z",
     "iopub.status.busy": "2025-01-01T07:27:18.896276Z",
     "iopub.status.idle": "2025-01-01T07:27:19.427051Z",
     "shell.execute_reply": "2025-01-01T07:27:19.425765Z"
    },
    "papermill": {
     "duration": 0.538864,
     "end_time": "2025-01-01T07:27:19.429088",
     "exception": false,
     "start_time": "2025-01-01T07:27:18.890224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv(r\"/kaggle/input/playground-series-s5e1/train.csv\")\n",
    "test = pd.read_csv(r\"/kaggle/input/playground-series-s5e1/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dc8cb3a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.440656Z",
     "iopub.status.busy": "2025-01-01T07:27:19.440303Z",
     "iopub.status.idle": "2025-01-01T07:27:19.447875Z",
     "shell.execute_reply": "2025-01-01T07:27:19.446914Z"
    },
    "papermill": {
     "duration": 0.015649,
     "end_time": "2025-01-01T07:27:19.449961",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.434312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(230130, 6)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "061fe9c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.461501Z",
     "iopub.status.busy": "2025-01-01T07:27:19.461088Z",
     "iopub.status.idle": "2025-01-01T07:27:19.539999Z",
     "shell.execute_reply": "2025-01-01T07:27:19.538573Z"
    },
    "papermill": {
     "duration": 0.086777,
     "end_time": "2025-01-01T07:27:19.542014",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.455237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 230130 entries, 0 to 230129\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count   Dtype  \n",
      "---  ------    --------------   -----  \n",
      " 0   id        230130 non-null  int64  \n",
      " 1   date      230130 non-null  object \n",
      " 2   country   230130 non-null  object \n",
      " 3   store     230130 non-null  object \n",
      " 4   product   230130 non-null  object \n",
      " 5   num_sold  221259 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(4)\n",
      "memory usage: 10.5+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf0592a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.553888Z",
     "iopub.status.busy": "2025-01-01T07:27:19.553520Z",
     "iopub.status.idle": "2025-01-01T07:27:19.622023Z",
     "shell.execute_reply": "2025-01-01T07:27:19.621131Z"
    },
    "papermill": {
     "duration": 0.076868,
     "end_time": "2025-01-01T07:27:19.624319",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.547451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id             0\n",
       "date           0\n",
       "country        0\n",
       "store          0\n",
       "product        0\n",
       "num_sold    8871\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f0b6d6b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.637419Z",
     "iopub.status.busy": "2025-01-01T07:27:19.636882Z",
     "iopub.status.idle": "2025-01-01T07:27:19.753319Z",
     "shell.execute_reply": "2025-01-01T07:27:19.751888Z"
    },
    "papermill": {
     "duration": 0.125012,
     "end_time": "2025-01-01T07:27:19.755455",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.630443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b7daf95e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.772268Z",
     "iopub.status.busy": "2025-01-01T07:27:19.771785Z",
     "iopub.status.idle": "2025-01-01T07:27:19.790234Z",
     "shell.execute_reply": "2025-01-01T07:27:19.788907Z"
    },
    "papermill": {
     "duration": 0.030883,
     "end_time": "2025-01-01T07:27:19.792400",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.761517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id        date country              store       product  num_sold\n",
       "1   1  2010-01-01  Canada  Discount Stickers        Kaggle     973.0\n",
       "2   2  2010-01-01  Canada  Discount Stickers  Kaggle Tiers     906.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "66793a3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.811889Z",
     "iopub.status.busy": "2025-01-01T07:27:19.811483Z",
     "iopub.status.idle": "2025-01-01T07:27:19.871292Z",
     "shell.execute_reply": "2025-01-01T07:27:19.869959Z"
    },
    "papermill": {
     "duration": 0.071564,
     "end_time": "2025-01-01T07:27:19.873468",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.801904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th colspan=\"3\" halign=\"left\">num_sold</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>34109</td>\n",
       "      <td>200.0</td>\n",
       "      <td>2749.0</td>\n",
       "      <td>840.045003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finland</th>\n",
       "      <td>38355</td>\n",
       "      <td>65.0</td>\n",
       "      <td>3173.0</td>\n",
       "      <td>748.243306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Italy</th>\n",
       "      <td>38355</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1907.0</td>\n",
       "      <td>542.241403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kenya</th>\n",
       "      <td>33730</td>\n",
       "      <td>5.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>20.431100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Norway</th>\n",
       "      <td>38355</td>\n",
       "      <td>105.0</td>\n",
       "      <td>5939.0</td>\n",
       "      <td>1422.560422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Singapore</th>\n",
       "      <td>38355</td>\n",
       "      <td>69.0</td>\n",
       "      <td>2907.0</td>\n",
       "      <td>863.052379</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          country num_sold                     \n",
       "            count      min     max         mean\n",
       "country                                        \n",
       "Canada      34109    200.0  2749.0   840.045003\n",
       "Finland     38355     65.0  3173.0   748.243306\n",
       "Italy       38355     44.0  1907.0   542.241403\n",
       "Kenya       33730      5.0    73.0    20.431100\n",
       "Norway      38355    105.0  5939.0  1422.560422\n",
       "Singapore   38355     69.0  2907.0   863.052379"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby('country').agg({'country':'count','num_sold':['min','max','mean']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "58a20ae9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.887780Z",
     "iopub.status.busy": "2025-01-01T07:27:19.887322Z",
     "iopub.status.idle": "2025-01-01T07:27:19.945494Z",
     "shell.execute_reply": "2025-01-01T07:27:19.944263Z"
    },
    "papermill": {
     "duration": 0.066862,
     "end_time": "2025-01-01T07:27:19.947319",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.880457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>store</th>\n",
       "      <th colspan=\"3\" halign=\"left\">num_sold</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>store</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Discount Stickers</th>\n",
       "      <td>71531</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2488.0</td>\n",
       "      <td>427.775887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Premium Sticker Mart</th>\n",
       "      <td>75684</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5939.0</td>\n",
       "      <td>973.836240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stickers for Less</th>\n",
       "      <td>74044</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4444.0</td>\n",
       "      <td>840.046418</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      store num_sold                    \n",
       "                      count      min     max        mean\n",
       "store                                                   \n",
       "Discount Stickers     71531      5.0  2488.0  427.775887\n",
       "Premium Sticker Mart  75684      5.0  5939.0  973.836240\n",
       "Stickers for Less     74044      5.0  4444.0  840.046418"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby('store').agg({'store':'count','num_sold':['min','max','mean']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e57bb87a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.960038Z",
     "iopub.status.busy": "2025-01-01T07:27:19.959706Z",
     "iopub.status.idle": "2025-01-01T07:27:19.970743Z",
     "shell.execute_reply": "2025-01-01T07:27:19.969487Z"
    },
    "papermill": {
     "duration": 0.019505,
     "end_time": "2025-01-01T07:27:19.972765",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.953260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id        date country              store       product  num_sold\n",
       "1   1  2010-01-01  Canada  Discount Stickers        Kaggle     973.0\n",
       "2   2  2010-01-01  Canada  Discount Stickers  Kaggle Tiers     906.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e5ac8655",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:19.993342Z",
     "iopub.status.busy": "2025-01-01T07:27:19.992839Z",
     "iopub.status.idle": "2025-01-01T07:27:20.486200Z",
     "shell.execute_reply": "2025-01-01T07:27:20.484952Z"
    },
    "papermill": {
     "duration": 0.504522,
     "end_time": "2025-01-01T07:27:20.488054",
     "exception": false,
     "start_time": "2025-01-01T07:27:19.983532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='store', ylabel='country'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# pd.pivot(train, columns=['country','store'])\n",
    "sns.heatmap(\n",
    "    train.groupby(['country','store'])['num_sold'].nunique().unstack(fill_value=0)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "feecf709",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:20.503094Z",
     "iopub.status.busy": "2025-01-01T07:27:20.502624Z",
     "iopub.status.idle": "2025-01-01T07:27:20.596592Z",
     "shell.execute_reply": "2025-01-01T07:27:20.595379Z"
    },
    "papermill": {
     "duration": 0.103618,
     "end_time": "2025-01-01T07:27:20.598533",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.494915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>store</th>\n",
       "      <th>Discount Stickers</th>\n",
       "      <th>Premium Sticker Mart</th>\n",
       "      <th>Stickers for Less</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>767</td>\n",
       "      <td>1835</td>\n",
       "      <td>1561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finland</th>\n",
       "      <td>855</td>\n",
       "      <td>1836</td>\n",
       "      <td>1587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Italy</th>\n",
       "      <td>642</td>\n",
       "      <td>1399</td>\n",
       "      <td>1202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kenya</th>\n",
       "      <td>25</td>\n",
       "      <td>66</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Norway</th>\n",
       "      <td>1648</td>\n",
       "      <td>3423</td>\n",
       "      <td>3005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Singapore</th>\n",
       "      <td>966</td>\n",
       "      <td>2094</td>\n",
       "      <td>1816</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "store      Discount Stickers  Premium Sticker Mart  Stickers for Less\n",
       "country                                                              \n",
       "Canada                   767                  1835               1561\n",
       "Finland                  855                  1836               1587\n",
       "Italy                    642                  1399               1202\n",
       "Kenya                     25                    66                 56\n",
       "Norway                  1648                  3423               3005\n",
       "Singapore                966                  2094               1816"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(['country','store'])['num_sold'].nunique().unstack(fill_value=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9f9ac1ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:20.613892Z",
     "iopub.status.busy": "2025-01-01T07:27:20.613420Z",
     "iopub.status.idle": "2025-01-01T07:27:20.658566Z",
     "shell.execute_reply": "2025-01-01T07:27:20.657294Z"
    },
    "papermill": {
     "duration": 0.05571,
     "end_time": "2025-01-01T07:27:20.661234",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.605524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.date = pd.to_datetime(train.date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "39ca9afb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:20.683105Z",
     "iopub.status.busy": "2025-01-01T07:27:20.682600Z",
     "iopub.status.idle": "2025-01-01T07:27:20.706784Z",
     "shell.execute_reply": "2025-01-01T07:27:20.705680Z"
    },
    "papermill": {
     "duration": 0.034913,
     "end_time": "2025-01-01T07:27:20.709056",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.674143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xdf = train.groupby('date').agg({'num_sold':['min','max','mean','sum']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "21993171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:20.730545Z",
     "iopub.status.busy": "2025-01-01T07:27:20.730028Z",
     "iopub.status.idle": "2025-01-01T07:27:20.740552Z",
     "shell.execute_reply": "2025-01-01T07:27:20.739428Z"
    },
    "papermill": {
     "duration": 0.021179,
     "end_time": "2025-01-01T07:27:20.742897",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.721718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex([('num_sold',  'min'),\n",
       "            ('num_sold',  'max'),\n",
       "            ('num_sold', 'mean'),\n",
       "            ('num_sold',  'sum')],\n",
       "           )"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xdf.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1b1ad2a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:20.758729Z",
     "iopub.status.busy": "2025-01-01T07:27:20.758214Z",
     "iopub.status.idle": "2025-01-01T07:27:20.774840Z",
     "shell.execute_reply": "2025-01-01T07:27:20.773630Z"
    },
    "papermill": {
     "duration": 0.026832,
     "end_time": "2025-01-01T07:27:20.776921",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.750089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler</td>\n",
       "      <td>423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler Dark Mode</td>\n",
       "      <td>491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Stickers for Less</td>\n",
       "      <td>Holographic Goose</td>\n",
       "      <td>300.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id       date country              store             product  num_sold\n",
       "1   1 2010-01-01  Canada  Discount Stickers              Kaggle     973.0\n",
       "2   2 2010-01-01  Canada  Discount Stickers        Kaggle Tiers     906.0\n",
       "3   3 2010-01-01  Canada  Discount Stickers            Kerneler     423.0\n",
       "4   4 2010-01-01  Canada  Discount Stickers  Kerneler Dark Mode     491.0\n",
       "5   5 2010-01-01  Canada  Stickers for Less   Holographic Goose     300.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b3e34931",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-01T07:27:20.799103Z",
     "iopub.status.busy": "2025-01-01T07:27:20.798638Z",
     "iopub.status.idle": "2025-01-01T07:27:20.817969Z",
     "shell.execute_reply": "2025-01-01T07:27:20.816797Z"
    },
    "papermill": {
     "duration": 0.0303,
     "end_time": "2025-01-01T07:27:20.820084",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.789784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler</td>\n",
       "      <td>423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler Dark Mode</td>\n",
       "      <td>491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Stickers for Less</td>\n",
       "      <td>Holographic Goose</td>\n",
       "      <td>300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230125</th>\n",
       "      <td>230125</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Premium Sticker Mart</td>\n",
       "      <td>Holographic Goose</td>\n",
       "      <td>466.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230126</th>\n",
       "      <td>230126</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Premium Sticker Mart</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>2907.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230127</th>\n",
       "      <td>230127</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Premium Sticker Mart</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>2299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230128</th>\n",
       "      <td>230128</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Premium Sticker Mart</td>\n",
       "      <td>Kerneler</td>\n",
       "      <td>1242.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230129</th>\n",
       "      <td>230129</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Premium Sticker Mart</td>\n",
       "      <td>Kerneler Dark Mode</td>\n",
       "      <td>1622.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>221259 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id       date    country                 store  \\\n",
       "1            1 2010-01-01     Canada     Discount Stickers   \n",
       "2            2 2010-01-01     Canada     Discount Stickers   \n",
       "3            3 2010-01-01     Canada     Discount Stickers   \n",
       "4            4 2010-01-01     Canada     Discount Stickers   \n",
       "5            5 2010-01-01     Canada     Stickers for Less   \n",
       "...        ...        ...        ...                   ...   \n",
       "230125  230125 2016-12-31  Singapore  Premium Sticker Mart   \n",
       "230126  230126 2016-12-31  Singapore  Premium Sticker Mart   \n",
       "230127  230127 2016-12-31  Singapore  Premium Sticker Mart   \n",
       "230128  230128 2016-12-31  Singapore  Premium Sticker Mart   \n",
       "230129  230129 2016-12-31  Singapore  Premium Sticker Mart   \n",
       "\n",
       "                   product  num_sold  \n",
       "1                   Kaggle     973.0  \n",
       "2             Kaggle Tiers     906.0  \n",
       "3                 Kerneler     423.0  \n",
       "4       Kerneler Dark Mode     491.0  \n",
       "5        Holographic Goose     300.0  \n",
       "...                    ...       ...  \n",
       "230125   Holographic Goose     466.0  \n",
       "230126              Kaggle    2907.0  \n",
       "230127        Kaggle Tiers    2299.0  \n",
       "230128            Kerneler    1242.0  \n",
       "230129  Kerneler Dark Mode    1622.0  \n",
       "\n",
       "[221259 rows x 6 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "467cc868",
   "metadata": {
    "papermill": {
     "duration": 0.007751,
     "end_time": "2025-01-01T07:27:20.840778",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.833027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc577601",
   "metadata": {
    "papermill": {
     "duration": 0.007195,
     "end_time": "2025-01-01T07:27:20.855536",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.848341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86c0c8d1",
   "metadata": {
    "papermill": {
     "duration": 0.007045,
     "end_time": "2025-01-01T07:27:20.870038",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.862993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "291d2c50",
   "metadata": {
    "papermill": {
     "duration": 0.006983,
     "end_time": "2025-01-01T07:27:20.884509",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.877526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1a948d2",
   "metadata": {
    "papermill": {
     "duration": 0.007632,
     "end_time": "2025-01-01T07:27:20.900506",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.892874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71abbcb6",
   "metadata": {
    "papermill": {
     "duration": 0.007104,
     "end_time": "2025-01-01T07:27:20.915404",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.908300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95b9e744",
   "metadata": {
    "papermill": {
     "duration": 0.007095,
     "end_time": "2025-01-01T07:27:20.929924",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.922829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b595cbb",
   "metadata": {
    "papermill": {
     "duration": 0.007756,
     "end_time": "2025-01-01T07:27:20.945003",
     "exception": false,
     "start_time": "2025-01-01T07:27:20.937247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10652996,
     "sourceId": 85723,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.493681,
   "end_time": "2025-01-01T07:27:21.674529",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-01T07:27:14.180848",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
