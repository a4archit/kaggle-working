{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b6e62dd3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-06T10:38:56.055896Z",
     "iopub.status.busy": "2025-10-06T10:38:56.055500Z",
     "iopub.status.idle": "2025-10-06T10:38:59.536960Z",
     "shell.execute_reply": "2025-10-06T10:38:59.535885Z"
    },
    "papermill": {
     "duration": 3.493488,
     "end_time": "2025-10-06T10:38:59.538611",
     "exception": false,
     "start_time": "2025-10-06T10:38:56.045123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/coffee-sales-dataset/Coffe_sales.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1390fb22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:38:59.553580Z",
     "iopub.status.busy": "2025-10-06T10:38:59.553066Z",
     "iopub.status.idle": "2025-10-06T10:39:00.270394Z",
     "shell.execute_reply": "2025-10-06T10:39:00.269585Z"
    },
    "papermill": {
     "duration": 0.726213,
     "end_time": "2025-10-06T10:39:00.272177",
     "exception": false,
     "start_time": "2025-10-06T10:38:59.545964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import VotingRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.svm import SVR\n",
    "\n",
    "from typing import Literal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7eb63f6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.286097Z",
     "iopub.status.busy": "2025-10-06T10:39:00.285420Z",
     "iopub.status.idle": "2025-10-06T10:39:00.320531Z",
     "shell.execute_reply": "2025-10-06T10:39:00.319659Z"
    },
    "papermill": {
     "duration": 0.043864,
     "end_time": "2025-10-06T10:39:00.322442",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.278578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/coffee-sales-dataset/Coffe_sales.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ac9580c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.336714Z",
     "iopub.status.busy": "2025-10-06T10:39:00.336196Z",
     "iopub.status.idle": "2025-10-06T10:39:00.361677Z",
     "shell.execute_reply": "2025-10-06T10:39:00.360687Z"
    },
    "papermill": {
     "duration": 0.034232,
     "end_time": "2025-10-06T10:39:00.363255",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.329023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3547 entries, 0 to 3546\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   hour_of_day  3547 non-null   int64  \n",
      " 1   cash_type    3547 non-null   object \n",
      " 2   money        3547 non-null   float64\n",
      " 3   coffee_name  3547 non-null   object \n",
      " 4   Time_of_Day  3547 non-null   object \n",
      " 5   Weekday      3547 non-null   object \n",
      " 6   Month_name   3547 non-null   object \n",
      " 7   Weekdaysort  3547 non-null   int64  \n",
      " 8   Monthsort    3547 non-null   int64  \n",
      " 9   Date         3547 non-null   object \n",
      " 10  Time         3547 non-null   object \n",
      "dtypes: float64(1), int64(3), object(7)\n",
      "memory usage: 304.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1c73bab5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.377202Z",
     "iopub.status.busy": "2025-10-06T10:39:00.376406Z",
     "iopub.status.idle": "2025-10-06T10:39:00.386296Z",
     "shell.execute_reply": "2025-10-06T10:39:00.385543Z"
    },
    "papermill": {
     "duration": 0.018236,
     "end_time": "2025-10-06T10:39:00.387776",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.369540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hour_of_day    0\n",
       "cash_type      0\n",
       "money          0\n",
       "coffee_name    0\n",
       "Time_of_Day    0\n",
       "Weekday        0\n",
       "Month_name     0\n",
       "Weekdaysort    0\n",
       "Monthsort      0\n",
       "Date           0\n",
       "Time           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6f11c94f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.401963Z",
     "iopub.status.busy": "2025-10-06T10:39:00.401227Z",
     "iopub.status.idle": "2025-10-06T10:39:00.411232Z",
     "shell.execute_reply": "2025-10-06T10:39:00.410425Z"
    },
    "papermill": {
     "duration": 0.018522,
     "end_time": "2025-10-06T10:39:00.412669",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.394147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "269780fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.428252Z",
     "iopub.status.busy": "2025-10-06T10:39:00.427544Z",
     "iopub.status.idle": "2025-10-06T10:39:00.433196Z",
     "shell.execute_reply": "2025-10-06T10:39:00.432486Z"
    },
    "papermill": {
     "duration": 0.014413,
     "end_time": "2025-10-06T10:39:00.434535",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.420122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3547, 11)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "12c4cf34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.449001Z",
     "iopub.status.busy": "2025-10-06T10:39:00.448142Z",
     "iopub.status.idle": "2025-10-06T10:39:00.457060Z",
     "shell.execute_reply": "2025-10-06T10:39:00.456191Z"
    },
    "papermill": {
     "duration": 0.017626,
     "end_time": "2025-10-06T10:39:00.458578",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.440952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# eliminating not useful features\n",
    "df.drop(columns=['Date','Time','cash_type'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e4d127fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.472404Z",
     "iopub.status.busy": "2025-10-06T10:39:00.472014Z",
     "iopub.status.idle": "2025-10-06T10:39:00.481859Z",
     "shell.execute_reply": "2025-10-06T10:39:00.481100Z"
    },
    "papermill": {
     "duration": 0.018153,
     "end_time": "2025-10-06T10:39:00.483127",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.464974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hour_of_day    17\n",
       "money          13\n",
       "coffee_name     8\n",
       "Time_of_Day     3\n",
       "Weekday         7\n",
       "Month_name     12\n",
       "Weekdaysort     7\n",
       "Monthsort      12\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ce7f25e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.497271Z",
     "iopub.status.busy": "2025-10-06T10:39:00.496897Z",
     "iopub.status.idle": "2025-10-06T10:39:00.519382Z",
     "shell.execute_reply": "2025-10-06T10:39:00.518420Z"
    },
    "papermill": {
     "duration": 0.031215,
     "end_time": "2025-10-06T10:39:00.520876",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.489661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour_of_day</th>\n",
       "      <th>money</th>\n",
       "      <th>coffee_name</th>\n",
       "      <th>Time_of_Day</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Month_name</th>\n",
       "      <th>Weekdaysort</th>\n",
       "      <th>Monthsort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3460</th>\n",
       "      <td>16</td>\n",
       "      <td>25.96</td>\n",
       "      <td>Americano</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Mar</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2130</th>\n",
       "      <td>14</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Latte</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Nov</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1574</th>\n",
       "      <td>8</td>\n",
       "      <td>27.92</td>\n",
       "      <td>Americano with Milk</td>\n",
       "      <td>Morning</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Sep</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      hour_of_day  money          coffee_name Time_of_Day Weekday Month_name  \\\n",
       "3460           16  25.96            Americano   Afternoon     Tue        Mar   \n",
       "2130           14  35.76                Latte   Afternoon     Tue        Nov   \n",
       "1574            8  27.92  Americano with Milk     Morning     Tue        Sep   \n",
       "\n",
       "      Weekdaysort  Monthsort  \n",
       "3460            2          3  \n",
       "2130            2         11  \n",
       "1574            2          9  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "388a5cdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:00.535481Z",
     "iopub.status.busy": "2025-10-06T10:39:00.535076Z",
     "iopub.status.idle": "2025-10-06T10:39:01.442227Z",
     "shell.execute_reply": "2025-10-06T10:39:01.441358Z"
    },
    "papermill": {
     "duration": 0.916154,
     "end_time": "2025-10-06T10:39:01.443809",
     "exception": false,
     "start_time": "2025-10-06T10:39:00.527655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.hour_of_day, y=df.money, hue=df.Time_of_Day)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "43721921",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:01.459814Z",
     "iopub.status.busy": "2025-10-06T10:39:01.459473Z",
     "iopub.status.idle": "2025-10-06T10:39:01.568940Z",
     "shell.execute_reply": "2025-10-06T10:39:01.568021Z"
    },
    "papermill": {
     "duration": 0.119407,
     "end_time": "2025-10-06T10:39:01.570572",
     "exception": false,
     "start_time": "2025-10-06T10:39:01.451165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df.money)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d7a0dc0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:01.586941Z",
     "iopub.status.busy": "2025-10-06T10:39:01.586182Z",
     "iopub.status.idle": "2025-10-06T10:39:01.597827Z",
     "shell.execute_reply": "2025-10-06T10:39:01.597071Z"
    },
    "papermill": {
     "duration": 0.021067,
     "end_time": "2025-10-06T10:39:01.599138",
     "exception": false,
     "start_time": "2025-10-06T10:39:01.578071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour_of_day</th>\n",
       "      <th>money</th>\n",
       "      <th>coffee_name</th>\n",
       "      <th>Time_of_Day</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Month_name</th>\n",
       "      <th>Weekdaysort</th>\n",
       "      <th>Monthsort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2155</th>\n",
       "      <td>9</td>\n",
       "      <td>25.96</td>\n",
       "      <td>Americano</td>\n",
       "      <td>Morning</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Nov</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      hour_of_day  money coffee_name Time_of_Day Weekday Month_name  \\\n",
       "2155            9  25.96   Americano     Morning     Fri        Nov   \n",
       "\n",
       "      Weekdaysort  Monthsort  \n",
       "2155            5         11  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "46a138bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:01.616409Z",
     "iopub.status.busy": "2025-10-06T10:39:01.615408Z",
     "iopub.status.idle": "2025-10-06T10:39:01.619735Z",
     "shell.execute_reply": "2025-10-06T10:39:01.618809Z"
    },
    "papermill": {
     "duration": 0.014134,
     "end_time": "2025-10-06T10:39:01.621174",
     "exception": false,
     "start_time": "2025-10-06T10:39:01.607040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.heatmap(data=df[['hour_of_day','Weekdaysort']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4a0fc057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:01.638686Z",
     "iopub.status.busy": "2025-10-06T10:39:01.638141Z",
     "iopub.status.idle": "2025-10-06T10:39:01.652924Z",
     "shell.execute_reply": "2025-10-06T10:39:01.651858Z"
    },
    "papermill": {
     "duration": 0.026054,
     "end_time": "2025-10-06T10:39:01.654760",
     "exception": false,
     "start_time": "2025-10-06T10:39:01.628706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tdf = df.groupby(['hour_of_day']).agg({'money':['count','sum','mean','min','max']})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "43a7908a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:01.671946Z",
     "iopub.status.busy": "2025-10-06T10:39:01.671100Z",
     "iopub.status.idle": "2025-10-06T10:39:01.924068Z",
     "shell.execute_reply": "2025-10-06T10:39:01.923215Z"
    },
    "papermill": {
     "duration": 0.263323,
     "end_time": "2025-10-06T10:39:01.925831",
     "exception": false,
     "start_time": "2025-10-06T10:39:01.662508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='hour_of_day', ylabel=\"('money', 'count')\">"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=tdf.reset_index().hour_of_day, y=tdf.reset_index()[('money','count')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "60b96678",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:01.942891Z",
     "iopub.status.busy": "2025-10-06T10:39:01.942548Z",
     "iopub.status.idle": "2025-10-06T10:39:02.185675Z",
     "shell.execute_reply": "2025-10-06T10:39:02.184790Z"
    },
    "papermill": {
     "duration": 0.253557,
     "end_time": "2025-10-06T10:39:02.187406",
     "exception": false,
     "start_time": "2025-10-06T10:39:01.933849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='hour_of_day', ylabel=\"('money', 'sum')\">"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=tdf.index, y=tdf[('money','sum')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ebcdbbf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:02.205761Z",
     "iopub.status.busy": "2025-10-06T10:39:02.205003Z",
     "iopub.status.idle": "2025-10-06T10:39:02.464960Z",
     "shell.execute_reply": "2025-10-06T10:39:02.464033Z"
    },
    "papermill": {
     "duration": 0.27064,
     "end_time": "2025-10-06T10:39:02.466541",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.195901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='hour_of_day', ylabel=\"('money', 'mean')\">"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=tdf.reset_index().hour_of_day, y=tdf.reset_index()[('money','mean')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71c4feb9",
   "metadata": {
    "papermill": {
     "duration": 0.007986,
     "end_time": "2025-10-06T10:39:02.483342",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.475356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "51a4c523",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:02.501269Z",
     "iopub.status.busy": "2025-10-06T10:39:02.500912Z",
     "iopub.status.idle": "2025-10-06T10:39:02.701135Z",
     "shell.execute_reply": "2025-10-06T10:39:02.700340Z"
    },
    "papermill": {
     "duration": 0.211398,
     "end_time": "2025-10-06T10:39:02.702950",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.491552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel=\"('money', 'sum')\", ylabel='Count'>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(tdf[('money','sum')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2b2e2f90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:02.722308Z",
     "iopub.status.busy": "2025-10-06T10:39:02.721972Z",
     "iopub.status.idle": "2025-10-06T10:39:02.916076Z",
     "shell.execute_reply": "2025-10-06T10:39:02.915142Z"
    },
    "papermill": {
     "duration": 0.205575,
     "end_time": "2025-10-06T10:39:02.917653",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.712078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(x=tdf.index, y=tdf[('money','min')])\n",
    "sns.lineplot(x=tdf.index, y=tdf[('money','max')])\n",
    "sns.lineplot(x=tdf.index, y=tdf[('money','mean')])\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "11dfff68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:02.938796Z",
     "iopub.status.busy": "2025-10-06T10:39:02.938447Z",
     "iopub.status.idle": "2025-10-06T10:39:02.951125Z",
     "shell.execute_reply": "2025-10-06T10:39:02.950352Z"
    },
    "papermill": {
     "duration": 0.024976,
     "end_time": "2025-10-06T10:39:02.952524",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.927548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour_of_day</th>\n",
       "      <th>money</th>\n",
       "      <th>coffee_name</th>\n",
       "      <th>Time_of_Day</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Month_name</th>\n",
       "      <th>Weekdaysort</th>\n",
       "      <th>Monthsort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>38.70</td>\n",
       "      <td>Latte</td>\n",
       "      <td>Morning</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Mar</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "      <td>38.70</td>\n",
       "      <td>Hot Chocolate</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Mar</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>38.70</td>\n",
       "      <td>Hot Chocolate</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Mar</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>28.90</td>\n",
       "      <td>Americano</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Mar</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13</td>\n",
       "      <td>38.70</td>\n",
       "      <td>Latte</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Mar</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3542</th>\n",
       "      <td>10</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Cappuccino</td>\n",
       "      <td>Morning</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Mar</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3543</th>\n",
       "      <td>14</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Cocoa</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Mar</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3544</th>\n",
       "      <td>14</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Cocoa</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Mar</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3545</th>\n",
       "      <td>15</td>\n",
       "      <td>25.96</td>\n",
       "      <td>Americano</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Mar</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3546</th>\n",
       "      <td>18</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Latte</td>\n",
       "      <td>Night</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Mar</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3547 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      hour_of_day  money    coffee_name Time_of_Day Weekday Month_name  \\\n",
       "0              10  38.70          Latte     Morning     Fri        Mar   \n",
       "1              12  38.70  Hot Chocolate   Afternoon     Fri        Mar   \n",
       "2              12  38.70  Hot Chocolate   Afternoon     Fri        Mar   \n",
       "3              13  28.90      Americano   Afternoon     Fri        Mar   \n",
       "4              13  38.70          Latte   Afternoon     Fri        Mar   \n",
       "...           ...    ...            ...         ...     ...        ...   \n",
       "3542           10  35.76     Cappuccino     Morning     Sun        Mar   \n",
       "3543           14  35.76          Cocoa   Afternoon     Sun        Mar   \n",
       "3544           14  35.76          Cocoa   Afternoon     Sun        Mar   \n",
       "3545           15  25.96      Americano   Afternoon     Sun        Mar   \n",
       "3546           18  35.76          Latte       Night     Sun        Mar   \n",
       "\n",
       "      Weekdaysort  Monthsort  \n",
       "0               5          3  \n",
       "1               5          3  \n",
       "2               5          3  \n",
       "3               5          3  \n",
       "4               5          3  \n",
       "...           ...        ...  \n",
       "3542            7          3  \n",
       "3543            7          3  \n",
       "3544            7          3  \n",
       "3545            7          3  \n",
       "3546            7          3  \n",
       "\n",
       "[3547 rows x 8 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "10535add",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:02.974077Z",
     "iopub.status.busy": "2025-10-06T10:39:02.973727Z",
     "iopub.status.idle": "2025-10-06T10:39:02.982821Z",
     "shell.execute_reply": "2025-10-06T10:39:02.982011Z"
    },
    "papermill": {
     "duration": 0.021405,
     "end_time": "2025-10-06T10:39:02.984129",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.962724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "coffee_name     8\n",
       "Time_of_Day     3\n",
       "Weekday         7\n",
       "Month_name     12\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(include=['object']).nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e50a2021",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.005928Z",
     "iopub.status.busy": "2025-10-06T10:39:03.005571Z",
     "iopub.status.idle": "2025-10-06T10:39:03.010163Z",
     "shell.execute_reply": "2025-10-06T10:39:03.009485Z"
    },
    "papermill": {
     "duration": 0.017148,
     "end_time": "2025-10-06T10:39:03.011529",
     "exception": false,
     "start_time": "2025-10-06T10:39:02.994381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "column_transformer = ColumnTransformer([\n",
    "    ('ohe', OneHotEncoder(drop='first'), ['coffee_name','Time_of_Day','Month_name']),\n",
    "    ('ordinal', OrdinalEncoder(), ['Weekday']),\n",
    "    # ('scaler', StandardScaler(), X_train.columns)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "581e80cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.033815Z",
     "iopub.status.busy": "2025-10-06T10:39:03.033002Z",
     "iopub.status.idle": "2025-10-06T10:39:03.047502Z",
     "shell.execute_reply": "2025-10-06T10:39:03.046594Z"
    },
    "papermill": {
     "duration": 0.027133,
     "end_time": "2025-10-06T10:39:03.048844",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.021711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(transformers=[(&#x27;ohe&#x27;, OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                 [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]),\n",
       "                                (&#x27;ordinal&#x27;, OrdinalEncoder(), [&#x27;Weekday&#x27;])])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;ohe&#x27;, OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                 [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]),\n",
       "                                (&#x27;ordinal&#x27;, OrdinalEncoder(), [&#x27;Weekday&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ohe</label><div class=\"sk-toggleable__content\"><pre>[&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ordinal</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Weekday&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder()</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "ColumnTransformer(transformers=[('ohe', OneHotEncoder(drop='first'),\n",
       "                                 ['coffee_name', 'Time_of_Day', 'Month_name']),\n",
       "                                ('ordinal', OrdinalEncoder(), ['Weekday'])])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "column_transformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bef34c93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.162682Z",
     "iopub.status.busy": "2025-10-06T10:39:03.162004Z",
     "iopub.status.idle": "2025-10-06T10:39:03.166684Z",
     "shell.execute_reply": "2025-10-06T10:39:03.165852Z"
    },
    "papermill": {
     "duration": 0.10884,
     "end_time": "2025-10-06T10:39:03.168137",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.059297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ensemble_model = VotingRegressor([\n",
    "    ('lin regression', LinearRegression()),\n",
    "    ('decision tree', DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
    "    ('svm', SVR())\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f60ac40b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.190488Z",
     "iopub.status.busy": "2025-10-06T10:39:03.190094Z",
     "iopub.status.idle": "2025-10-06T10:39:03.194754Z",
     "shell.execute_reply": "2025-10-06T10:39:03.193977Z"
    },
    "papermill": {
     "duration": 0.017626,
     "end_time": "2025-10-06T10:39:03.196173",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.178547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('col_transformer', column_transformer),\n",
    "    ('standardization', StandardScaler(with_mean=False)),\n",
    "    ('model', ensemble_model)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c8e5c89b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.219498Z",
     "iopub.status.busy": "2025-10-06T10:39:03.218589Z",
     "iopub.status.idle": "2025-10-06T10:39:03.251149Z",
     "shell.execute_reply": "2025-10-06T10:39:03.250290Z"
    },
    "papermill": {
     "duration": 0.045589,
     "end_time": "2025-10-06T10:39:03.252575",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.206986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;col_transformer&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;ohe&#x27;,\n",
       "                                                  OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                                  [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;,\n",
       "                                                   &#x27;Month_name&#x27;]),\n",
       "                                                 (&#x27;ordinal&#x27;, OrdinalEncoder(),\n",
       "                                                  [&#x27;Weekday&#x27;])])),\n",
       "                (&#x27;standardization&#x27;, StandardScaler(with_mean=False)),\n",
       "                (&#x27;model&#x27;,\n",
       "                 VotingRegressor(estimators=[(&#x27;lin regression&#x27;,\n",
       "                                              LinearRegression()),\n",
       "                                             (&#x27;decision tree&#x27;,\n",
       "                                              DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                                             (&#x27;svm&#x27;, SVR())]))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;col_transformer&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;ohe&#x27;,\n",
       "                                                  OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                                  [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;,\n",
       "                                                   &#x27;Month_name&#x27;]),\n",
       "                                                 (&#x27;ordinal&#x27;, OrdinalEncoder(),\n",
       "                                                  [&#x27;Weekday&#x27;])])),\n",
       "                (&#x27;standardization&#x27;, StandardScaler(with_mean=False)),\n",
       "                (&#x27;model&#x27;,\n",
       "                 VotingRegressor(estimators=[(&#x27;lin regression&#x27;,\n",
       "                                              LinearRegression()),\n",
       "                                             (&#x27;decision tree&#x27;,\n",
       "                                              DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                                             (&#x27;svm&#x27;, SVR())]))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">col_transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;ohe&#x27;, OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                 [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]),\n",
       "                                (&#x27;ordinal&#x27;, OrdinalEncoder(), [&#x27;Weekday&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ohe</label><div class=\"sk-toggleable__content\"><pre>[&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ordinal</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Weekday&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder()</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler(with_mean=False)</pre></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">model: VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;lin regression&#x27;, LinearRegression()),\n",
       "                            (&#x27;decision tree&#x27;,\n",
       "                             DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                            (&#x27;svm&#x27;, SVR())])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lin regression</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>decision tree</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(ccp_alpha=0.0001)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>svm</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('col_transformer',\n",
       "                 ColumnTransformer(transformers=[('ohe',\n",
       "                                                  OneHotEncoder(drop='first'),\n",
       "                                                  ['coffee_name', 'Time_of_Day',\n",
       "                                                   'Month_name']),\n",
       "                                                 ('ordinal', OrdinalEncoder(),\n",
       "                                                  ['Weekday'])])),\n",
       "                ('standardization', StandardScaler(with_mean=False)),\n",
       "                ('model',\n",
       "                 VotingRegressor(estimators=[('lin regression',\n",
       "                                              LinearRegression()),\n",
       "                                             ('decision tree',\n",
       "                                              DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                                             ('svm', SVR())]))])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f6340d40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.276884Z",
     "iopub.status.busy": "2025-10-06T10:39:03.276017Z",
     "iopub.status.idle": "2025-10-06T10:39:03.285760Z",
     "shell.execute_reply": "2025-10-06T10:39:03.285004Z"
    },
    "papermill": {
     "duration": 0.022899,
     "end_time": "2025-10-06T10:39:03.287190",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.264291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# training\n",
    "\n",
    "target = \"money\"\n",
    "\n",
    "X = df.drop(columns=[target])\n",
    "y = df[[target]]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6233fa86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.310858Z",
     "iopub.status.busy": "2025-10-06T10:39:03.309952Z",
     "iopub.status.idle": "2025-10-06T10:39:03.690304Z",
     "shell.execute_reply": "2025-10-06T10:39:03.689360Z"
    },
    "papermill": {
     "duration": 0.393807,
     "end_time": "2025-10-06T10:39:03.691984",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.298177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_voting.py:597: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;col_transformer&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;ohe&#x27;,\n",
       "                                                  OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                                  [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;,\n",
       "                                                   &#x27;Month_name&#x27;]),\n",
       "                                                 (&#x27;ordinal&#x27;, OrdinalEncoder(),\n",
       "                                                  [&#x27;Weekday&#x27;])])),\n",
       "                (&#x27;standardization&#x27;, StandardScaler(with_mean=False)),\n",
       "                (&#x27;model&#x27;,\n",
       "                 VotingRegressor(estimators=[(&#x27;lin regression&#x27;,\n",
       "                                              LinearRegression()),\n",
       "                                             (&#x27;decision tree&#x27;,\n",
       "                                              DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                                             (&#x27;svm&#x27;, SVR())]))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;col_transformer&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;ohe&#x27;,\n",
       "                                                  OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                                  [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;,\n",
       "                                                   &#x27;Month_name&#x27;]),\n",
       "                                                 (&#x27;ordinal&#x27;, OrdinalEncoder(),\n",
       "                                                  [&#x27;Weekday&#x27;])])),\n",
       "                (&#x27;standardization&#x27;, StandardScaler(with_mean=False)),\n",
       "                (&#x27;model&#x27;,\n",
       "                 VotingRegressor(estimators=[(&#x27;lin regression&#x27;,\n",
       "                                              LinearRegression()),\n",
       "                                             (&#x27;decision tree&#x27;,\n",
       "                                              DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                                             (&#x27;svm&#x27;, SVR())]))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">col_transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;ohe&#x27;, OneHotEncoder(drop=&#x27;first&#x27;),\n",
       "                                 [&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]),\n",
       "                                (&#x27;ordinal&#x27;, OrdinalEncoder(), [&#x27;Weekday&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ohe</label><div class=\"sk-toggleable__content\"><pre>[&#x27;coffee_name&#x27;, &#x27;Time_of_Day&#x27;, &#x27;Month_name&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(drop=&#x27;first&#x27;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ordinal</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Weekday&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder()</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler(with_mean=False)</pre></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">model: VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;lin regression&#x27;, LinearRegression()),\n",
       "                            (&#x27;decision tree&#x27;,\n",
       "                             DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                            (&#x27;svm&#x27;, SVR())])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>lin regression</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>decision tree</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(ccp_alpha=0.0001)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>svm</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('col_transformer',\n",
       "                 ColumnTransformer(transformers=[('ohe',\n",
       "                                                  OneHotEncoder(drop='first'),\n",
       "                                                  ['coffee_name', 'Time_of_Day',\n",
       "                                                   'Month_name']),\n",
       "                                                 ('ordinal', OrdinalEncoder(),\n",
       "                                                  ['Weekday'])])),\n",
       "                ('standardization', StandardScaler(with_mean=False)),\n",
       "                ('model',\n",
       "                 VotingRegressor(estimators=[('lin regression',\n",
       "                                              LinearRegression()),\n",
       "                                             ('decision tree',\n",
       "                                              DecisionTreeRegressor(ccp_alpha=0.0001)),\n",
       "                                             ('svm', SVR())]))])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "65913534",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.717347Z",
     "iopub.status.busy": "2025-10-06T10:39:03.716975Z",
     "iopub.status.idle": "2025-10-06T10:39:03.723674Z",
     "shell.execute_reply": "2025-10-06T10:39:03.722888Z"
    },
    "papermill": {
     "duration": 0.021406,
     "end_time": "2025-10-06T10:39:03.725108",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.703702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4, 12,  2, 11,  8, 10,  9,  6,  3,  5,  1,  7])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.Monthsort.unique() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bc5ecdee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.751513Z",
     "iopub.status.busy": "2025-10-06T10:39:03.750623Z",
     "iopub.status.idle": "2025-10-06T10:39:03.763640Z",
     "shell.execute_reply": "2025-10-06T10:39:03.762579Z"
    },
    "papermill": {
     "duration": 0.027708,
     "end_time": "2025-10-06T10:39:03.765083",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.737375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([33.10821246])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline.predict(X_test.head(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f098b2fe",
   "metadata": {
    "papermill": {
     "duration": 0.012139,
     "end_time": "2025-10-06T10:39:03.789695",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.777556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7dead171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.816128Z",
     "iopub.status.busy": "2025-10-06T10:39:03.815746Z",
     "iopub.status.idle": "2025-10-06T10:39:03.826102Z",
     "shell.execute_reply": "2025-10-06T10:39:03.825364Z"
    },
    "papermill": {
     "duration": 0.025808,
     "end_time": "2025-10-06T10:39:03.827712",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.801904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Model:\n",
    "\n",
    "    def __str__(self):\n",
    "        return f\"Model - Pipeline\"\n",
    "\n",
    "    def predict_price(self, \n",
    "                      hour_of_day: Literal[19, 21, 17, 14, 15,  8, 18, 16, 10,  7, 13, 11, 22, 20,  9, 12,  6], \n",
    "                      coffee_name: Literal['Americano with Milk', 'Latte', 'Cappuccino', 'Cocoa', 'Espresso','Americano', 'Hot Chocolate', 'Cortado'], \n",
    "                      time_of_day: Literal['Night', 'Afternoon', 'Morning'], \n",
    "                      weekday: Literal['Tue', 'Wed', 'Sat', 'Fri', 'Mon', 'Sun', 'Thu'], \n",
    "                      month_name: Literal['Apr', 'Dec', 'Feb', 'Nov', 'Aug', 'Oct', 'Sep', 'Jun', 'Mar','May', 'Jan', 'Jul'], \n",
    "                      weekdaysort: Literal[1,2,3,4,5,6,7], \n",
    "                      monthsort: Literal[1,2,3,4,5,6,7,8,9,10,11,12]\n",
    "        ) -> dict:\n",
    "        \n",
    "        data = {\n",
    "            'hour_of_day': hour_of_day,\n",
    "            'coffee_name': coffee_name,\n",
    "            'Time_of_Day': time_of_day,\n",
    "            'Weekday': weekday,\n",
    "            'Month_name': month_name,\n",
    "            'Weekdaysort': weekdaysort,\n",
    "            'Monthsort': monthsort\n",
    "        }\n",
    "\n",
    "        tdf = pd.DataFrame(data, index=[0])\n",
    "\n",
    "        response = pipeline.predict(tdf)\n",
    "        predicted_value = response[0]\n",
    "\n",
    "        content = {'predicted value': predicted_value}\n",
    "\n",
    "        return content\n",
    "        \n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1177f687",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.855264Z",
     "iopub.status.busy": "2025-10-06T10:39:03.854175Z",
     "iopub.status.idle": "2025-10-06T10:39:03.858992Z",
     "shell.execute_reply": "2025-10-06T10:39:03.858269Z"
    },
    "papermill": {
     "duration": 0.019842,
     "end_time": "2025-10-06T10:39:03.860418",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.840576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = Model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "700f4213",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.886656Z",
     "iopub.status.busy": "2025-10-06T10:39:03.885959Z",
     "iopub.status.idle": "2025-10-06T10:39:03.899824Z",
     "shell.execute_reply": "2025-10-06T10:39:03.899043Z"
    },
    "papermill": {
     "duration": 0.028332,
     "end_time": "2025-10-06T10:39:03.901162",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.872830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'predicted value': 35.74986586833753}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict_price(\n",
    "    hour_of_day = 10,\n",
    "    coffee_name = 'Latte', \n",
    "    time_of_day = 'Night', \n",
    "    weekday = 'Tue', \n",
    "    month_name = 'Jan', \n",
    "    weekdaysort = 2,\n",
    "    monthsort = 1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8f3e1a19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T10:39:03.928085Z",
     "iopub.status.busy": "2025-10-06T10:39:03.927088Z",
     "iopub.status.idle": "2025-10-06T10:39:03.949338Z",
     "shell.execute_reply": "2025-10-06T10:39:03.948329Z"
    },
    "papermill": {
     "duration": 0.03746,
     "end_time": "2025-10-06T10:39:03.951257",
     "exception": false,
     "start_time": "2025-10-06T10:39:03.913797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn import set_config\n",
    "from sklearn.utils import estimator_html_repr\n",
    "\n",
    "# Enable diagram display\n",
    "set_config(display='diagram')\n",
    "\n",
    "# In Jupyter notebook, just display the pipeline\n",
    "# pipeline  # This will show an interactive HTML diagram\n",
    "\n",
    "# Or save as HTML\n",
    "with open('pipeline_diagram.html', 'w') as f:\n",
    "    f.write(estimator_html_repr(pipeline))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8328828,
     "sourceId": 13146007,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 14.062468,
   "end_time": "2025-10-06T10:39:04.986466",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-06T10:38:50.923998",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
