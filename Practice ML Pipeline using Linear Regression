{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "94d6e7fa",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:29.753243Z",
     "iopub.status.busy": "2025-10-06T00:46:29.752935Z",
     "iopub.status.idle": "2025-10-06T00:46:33.921647Z",
     "shell.execute_reply": "2025-10-06T00:46:33.920622Z"
    },
    "papermill": {
     "duration": 4.17565,
     "end_time": "2025-10-06T00:46:33.923432",
     "exception": false,
     "start_time": "2025-10-06T00:46:29.747782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/coffee-sales-dataset/Coffe_sales.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a1bfe67",
   "metadata": {
    "papermill": {
     "duration": 0.002862,
     "end_time": "2025-10-06T00:46:33.930087",
     "exception": false,
     "start_time": "2025-10-06T00:46:33.927225",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee38dcb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:33.938496Z",
     "iopub.status.busy": "2025-10-06T00:46:33.937307Z",
     "iopub.status.idle": "2025-10-06T00:46:33.975155Z",
     "shell.execute_reply": "2025-10-06T00:46:33.973998Z"
    },
    "papermill": {
     "duration": 0.043838,
     "end_time": "2025-10-06T00:46:33.977075",
     "exception": false,
     "start_time": "2025-10-06T00:46:33.933237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/coffee-sales-dataset/Coffe_sales.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a8f210ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:33.986873Z",
     "iopub.status.busy": "2025-10-06T00:46:33.986578Z",
     "iopub.status.idle": "2025-10-06T00:46:34.019795Z",
     "shell.execute_reply": "2025-10-06T00:46:34.018803Z"
    },
    "papermill": {
     "duration": 0.038995,
     "end_time": "2025-10-06T00:46:34.021346",
     "exception": false,
     "start_time": "2025-10-06T00:46:33.982351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3547 entries, 0 to 3546\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   hour_of_day  3547 non-null   int64  \n",
      " 1   cash_type    3547 non-null   object \n",
      " 2   money        3547 non-null   float64\n",
      " 3   coffee_name  3547 non-null   object \n",
      " 4   Time_of_Day  3547 non-null   object \n",
      " 5   Weekday      3547 non-null   object \n",
      " 6   Month_name   3547 non-null   object \n",
      " 7   Weekdaysort  3547 non-null   int64  \n",
      " 8   Monthsort    3547 non-null   int64  \n",
      " 9   Date         3547 non-null   object \n",
      " 10  Time         3547 non-null   object \n",
      "dtypes: float64(1), int64(3), object(7)\n",
      "memory usage: 304.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ede77872",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.029173Z",
     "iopub.status.busy": "2025-10-06T00:46:34.028853Z",
     "iopub.status.idle": "2025-10-06T00:46:34.039153Z",
     "shell.execute_reply": "2025-10-06T00:46:34.038125Z"
    },
    "papermill": {
     "duration": 0.016349,
     "end_time": "2025-10-06T00:46:34.041089",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.024740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hour_of_day    0\n",
       "cash_type      0\n",
       "money          0\n",
       "coffee_name    0\n",
       "Time_of_Day    0\n",
       "Weekday        0\n",
       "Month_name     0\n",
       "Weekdaysort    0\n",
       "Monthsort      0\n",
       "Date           0\n",
       "Time           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2796d852",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.049017Z",
     "iopub.status.busy": "2025-10-06T00:46:34.048733Z",
     "iopub.status.idle": "2025-10-06T00:46:34.058634Z",
     "shell.execute_reply": "2025-10-06T00:46:34.057718Z"
    },
    "papermill": {
     "duration": 0.015651,
     "end_time": "2025-10-06T00:46:34.060293",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.044642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "193adc0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.068356Z",
     "iopub.status.busy": "2025-10-06T00:46:34.068035Z",
     "iopub.status.idle": "2025-10-06T00:46:34.074152Z",
     "shell.execute_reply": "2025-10-06T00:46:34.073130Z"
    },
    "papermill": {
     "duration": 0.011969,
     "end_time": "2025-10-06T00:46:34.075758",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.063789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3547, 11)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d3949e5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.084023Z",
     "iopub.status.busy": "2025-10-06T00:46:34.083716Z",
     "iopub.status.idle": "2025-10-06T00:46:34.092450Z",
     "shell.execute_reply": "2025-10-06T00:46:34.091462Z"
    },
    "papermill": {
     "duration": 0.014632,
     "end_time": "2025-10-06T00:46:34.094027",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.079395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# eliminating not useful features\n",
    "df.drop(columns=['Date','Time','cash_type'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0d71c85c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.102019Z",
     "iopub.status.busy": "2025-10-06T00:46:34.101733Z",
     "iopub.status.idle": "2025-10-06T00:46:34.112688Z",
     "shell.execute_reply": "2025-10-06T00:46:34.111481Z"
    },
    "papermill": {
     "duration": 0.016819,
     "end_time": "2025-10-06T00:46:34.114407",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.097588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hour_of_day    17\n",
       "money          13\n",
       "coffee_name     8\n",
       "Time_of_Day     3\n",
       "Weekday         7\n",
       "Month_name     12\n",
       "Weekdaysort     7\n",
       "Monthsort      12\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4f5b956",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.122672Z",
     "iopub.status.busy": "2025-10-06T00:46:34.122343Z",
     "iopub.status.idle": "2025-10-06T00:46:34.145926Z",
     "shell.execute_reply": "2025-10-06T00:46:34.144946Z"
    },
    "papermill": {
     "duration": 0.029588,
     "end_time": "2025-10-06T00:46:34.147619",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.118031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour_of_day</th>\n",
       "      <th>money</th>\n",
       "      <th>coffee_name</th>\n",
       "      <th>Time_of_Day</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Month_name</th>\n",
       "      <th>Weekdaysort</th>\n",
       "      <th>Monthsort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3321</th>\n",
       "      <td>13</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Hot Chocolate</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Mar</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2232</th>\n",
       "      <td>13</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Latte</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Nov</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2349</th>\n",
       "      <td>15</td>\n",
       "      <td>35.76</td>\n",
       "      <td>Cocoa</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dec</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      hour_of_day  money    coffee_name Time_of_Day Weekday Month_name  \\\n",
       "3321           13  35.76  Hot Chocolate   Afternoon     Fri        Mar   \n",
       "2232           13  35.76          Latte   Afternoon     Fri        Nov   \n",
       "2349           15  35.76          Cocoa   Afternoon     Sun        Dec   \n",
       "\n",
       "      Weekdaysort  Monthsort  \n",
       "3321            5          3  \n",
       "2232            5         11  \n",
       "2349            7         12  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5071c452",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:34.156448Z",
     "iopub.status.busy": "2025-10-06T00:46:34.156132Z",
     "iopub.status.idle": "2025-10-06T00:46:35.189102Z",
     "shell.execute_reply": "2025-10-06T00:46:35.188126Z"
    },
    "papermill": {
     "duration": 1.039438,
     "end_time": "2025-10-06T00:46:35.190922",
     "exception": false,
     "start_time": "2025-10-06T00:46:34.151484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.hour_of_day, y=df.money, hue=df.Time_of_Day)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c41bffd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:35.201886Z",
     "iopub.status.busy": "2025-10-06T00:46:35.201501Z",
     "iopub.status.idle": "2025-10-06T00:46:35.313531Z",
     "shell.execute_reply": "2025-10-06T00:46:35.311973Z"
    },
    "papermill": {
     "duration": 0.118997,
     "end_time": "2025-10-06T00:46:35.315360",
     "exception": false,
     "start_time": "2025-10-06T00:46:35.196363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df.money)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "da300476",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:35.325654Z",
     "iopub.status.busy": "2025-10-06T00:46:35.325171Z",
     "iopub.status.idle": "2025-10-06T00:46:35.336547Z",
     "shell.execute_reply": "2025-10-06T00:46:35.335630Z"
    },
    "papermill": {
     "duration": 0.018169,
     "end_time": "2025-10-06T00:46:35.338133",
     "exception": false,
     "start_time": "2025-10-06T00:46:35.319964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hour_of_day</th>\n",
       "      <th>money</th>\n",
       "      <th>coffee_name</th>\n",
       "      <th>Time_of_Day</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Month_name</th>\n",
       "      <th>Weekdaysort</th>\n",
       "      <th>Monthsort</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2586</th>\n",
       "      <td>16</td>\n",
       "      <td>25.96</td>\n",
       "      <td>Americano</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>Mon</td>\n",
       "      <td>Dec</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      hour_of_day  money coffee_name Time_of_Day Weekday Month_name  \\\n",
       "2586           16  25.96   Americano   Afternoon     Mon        Dec   \n",
       "\n",
       "      Weekdaysort  Monthsort  \n",
       "2586            1         12  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0ce4c61e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T00:46:35.348465Z",
     "iopub.status.busy": "2025-10-06T00:46:35.348139Z",
     "iopub.status.idle": "2025-10-06T00:46:35.352696Z",
     "shell.execute_reply": "2025-10-06T00:46:35.351605Z"
    },
    "papermill": {
     "duration": 0.011333,
     "end_time": "2025-10-06T00:46:35.354148",
     "exception": false,
     "start_time": "2025-10-06T00:46:35.342815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.heatmap(data=df[['hour_of_day','Weekdaysort']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c54b5db",
   "metadata": {
    "papermill": {
     "duration": 0.004086,
     "end_time": "2025-10-06T00:46:35.362755",
     "exception": false,
     "start_time": "2025-10-06T00:46:35.358669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8328828,
     "sourceId": 13146007,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.376873,
   "end_time": "2025-10-06T00:46:36.087562",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-06T00:46:23.710689",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
