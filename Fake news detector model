{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8a3904ce",
   "metadata": {
    "papermill": {
     "duration": 0.006006,
     "end_time": "2025-05-06T10:39:08.131253",
     "exception": false,
     "start_time": "2025-05-06T10:39:08.125247",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# <center style=\"background:#000; color:#fff; padding: 30px 0;\">Fake News Detector Model without NLP Pipeline </center>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a5ccb3b0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:08.143301Z",
     "iopub.status.busy": "2025-05-06T10:39:08.143036Z",
     "iopub.status.idle": "2025-05-06T10:39:09.577717Z",
     "shell.execute_reply": "2025-05-06T10:39:09.576830Z"
    },
    "papermill": {
     "duration": 1.442587,
     "end_time": "2025-05-06T10:39:09.578950",
     "exception": false,
     "start_time": "2025-05-06T10:39:08.136363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/fake-news-classification/WELFake_Dataset.csv\n",
      "/kaggle/input/fake-or-real-news/fake_or_real_news.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b22c935",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:09.590758Z",
     "iopub.status.busy": "2025-05-06T10:39:09.590182Z",
     "iopub.status.idle": "2025-05-06T10:39:22.928723Z",
     "shell.execute_reply": "2025-05-06T10:39:22.928137Z"
    },
    "papermill": {
     "duration": 13.345482,
     "end_time": "2025-05-06T10:39:22.930035",
     "exception": false,
     "start_time": "2025-05-06T10:39:09.584553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-06 10:39:12.446195: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1746527952.639522      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1746527952.693415      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow import keras \n",
    "from keras import optimizers\n",
    "from keras import Sequential, Model\n",
    "from keras.layers import Dense, LSTM, Flatten, Embedding, Input, Dropout, BatchNormalization\n",
    "from keras.regularizers import l1, l2, l1_l2\n",
    "from keras.constraints import MaxNorm, UnitNorm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "290f2220",
   "metadata": {
    "papermill": {
     "duration": 0.005113,
     "end_time": "2025-05-06T10:39:22.940603",
     "exception": false,
     "start_time": "2025-05-06T10:39:22.935490",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color:#fff; padding: 20px 0;\"> **Understanding data** </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0d70512d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:22.952104Z",
     "iopub.status.busy": "2025-05-06T10:39:22.951194Z",
     "iopub.status.idle": "2025-05-06T10:39:29.445103Z",
     "shell.execute_reply": "2025-05-06T10:39:29.444549Z"
    },
    "papermill": {
     "duration": 6.500915,
     "end_time": "2025-05-06T10:39:29.446510",
     "exception": false,
     "start_time": "2025-05-06T10:39:22.945595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(r\"/kaggle/input/fake-or-real-news/fake_or_real_news.csv\")\n",
    "data2 = pd.read_csv(r\"/kaggle/input/fake-news-classification/WELFake_Dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "58ff6623",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:29.457894Z",
     "iopub.status.busy": "2025-05-06T10:39:29.457665Z",
     "iopub.status.idle": "2025-05-06T10:39:29.484212Z",
     "shell.execute_reply": "2025-05-06T10:39:29.483649Z"
    },
    "papermill": {
     "duration": 0.033257,
     "end_time": "2025-05-06T10:39:29.485232",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.451975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>60611</th>\n",
       "      <td>60611</td>\n",
       "      <td>To Wimbledon Wild Card, Life Feels Lifted From...</td>\n",
       "      <td>WIMBLEDON, England  —   “Wimbledon,” a movie r...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                                              title  \\\n",
       "60611       60611  To Wimbledon Wild Card, Life Feels Lifted From...   \n",
       "\n",
       "                                                    text  label  \n",
       "60611  WIMBLEDON, England  —   “Wimbledon,” a movie r...      0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c50447f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:29.496534Z",
     "iopub.status.busy": "2025-05-06T10:39:29.496351Z",
     "iopub.status.idle": "2025-05-06T10:39:29.500736Z",
     "shell.execute_reply": "2025-05-06T10:39:29.500231Z"
    },
    "papermill": {
     "duration": 0.011135,
     "end_time": "2025-05-06T10:39:29.501804",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.490669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((6335, 4), (72134, 4))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape, data2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5255a0ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:29.512953Z",
     "iopub.status.busy": "2025-05-06T10:39:29.512587Z",
     "iopub.status.idle": "2025-05-06T10:39:29.519720Z",
     "shell.execute_reply": "2025-05-06T10:39:29.519060Z"
    },
    "papermill": {
     "duration": 0.013801,
     "end_time": "2025-05-06T10:39:29.520743",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.506942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0    0\n",
       "title         0\n",
       "text          0\n",
       "label         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "41bd01b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:29.531998Z",
     "iopub.status.busy": "2025-05-06T10:39:29.531517Z",
     "iopub.status.idle": "2025-05-06T10:39:29.545816Z",
     "shell.execute_reply": "2025-05-06T10:39:29.545348Z"
    },
    "papermill": {
     "duration": 0.020991,
     "end_time": "2025-05-06T10:39:29.546837",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.525846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0      0\n",
       "title         558\n",
       "text           39\n",
       "label           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3e334b0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:29.558327Z",
     "iopub.status.busy": "2025-05-06T10:39:29.558139Z",
     "iopub.status.idle": "2025-05-06T10:39:29.574504Z",
     "shell.execute_reply": "2025-05-06T10:39:29.574021Z"
    },
    "papermill": {
     "duration": 0.023125,
     "end_time": "2025-05-06T10:39:29.575557",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.552432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data2.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdf89e3c",
   "metadata": {
    "papermill": {
     "duration": 0.005446,
     "end_time": "2025-05-06T10:39:29.587332",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.581886",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color:#fff; padding: 15px 0;\"> **EDA** </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "452f3d1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:29.598378Z",
     "iopub.status.busy": "2025-05-06T10:39:29.598176Z",
     "iopub.status.idle": "2025-05-06T10:39:30.865737Z",
     "shell.execute_reply": "2025-05-06T10:39:30.865135Z"
    },
    "papermill": {
     "duration": 1.274511,
     "end_time": "2025-05-06T10:39:30.867042",
     "exception": false,
     "start_time": "2025-05-06T10:39:29.592531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"News headings words length (D1 VS D2)\")\n",
    "sns.histplot(data2.title.apply(lambda x: len(x)), label=\"Data 2\")\n",
    "sns.histplot(data.title.apply(lambda x: len(x)), label='Date 1')\n",
    "plt.xlim(0,150)\n",
    "plt.legend()\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "26a3c561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:30.880122Z",
     "iopub.status.busy": "2025-05-06T10:39:30.879910Z",
     "iopub.status.idle": "2025-05-06T10:39:31.316229Z",
     "shell.execute_reply": "2025-05-06T10:39:31.315476Z"
    },
    "papermill": {
     "duration": 0.443982,
     "end_time": "2025-05-06T10:39:31.317378",
     "exception": false,
     "start_time": "2025-05-06T10:39:30.873396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"News article words limit\")\n",
    "sns.histplot(data.text.apply(lambda x: len(x)))\n",
    "plt.xlim(0,20000)\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bf5beb73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:31.331188Z",
     "iopub.status.busy": "2025-05-06T10:39:31.330984Z",
     "iopub.status.idle": "2025-05-06T10:39:32.763968Z",
     "shell.execute_reply": "2025-05-06T10:39:32.763161Z"
    },
    "papermill": {
     "duration": 1.440975,
     "end_time": "2025-05-06T10:39:32.765129",
     "exception": false,
     "start_time": "2025-05-06T10:39:31.324154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"News article words limit (Data 2)\")\n",
    "sns.histplot(data2.text.apply(lambda x: len(x)))\n",
    "plt.xlim(0,10000)\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bed88ad4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:32.780318Z",
     "iopub.status.busy": "2025-05-06T10:39:32.779691Z",
     "iopub.status.idle": "2025-05-06T10:39:32.788879Z",
     "shell.execute_reply": "2025-05-06T10:39:32.788139Z"
    },
    "papermill": {
     "duration": 0.01759,
     "end_time": "2025-05-06T10:39:32.789929",
     "exception": false,
     "start_time": "2025-05-06T10:39:32.772339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "REAL    3171\n",
       "FAKE    3164\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.label.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1032502d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:32.804924Z",
     "iopub.status.busy": "2025-05-06T10:39:32.804254Z",
     "iopub.status.idle": "2025-05-06T10:39:32.811300Z",
     "shell.execute_reply": "2025-05-06T10:39:32.810526Z"
    },
    "papermill": {
     "duration": 0.015753,
     "end_time": "2025-05-06T10:39:32.812355",
     "exception": false,
     "start_time": "2025-05-06T10:39:32.796602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "1    36509\n",
       "0    35028\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.label.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "384af801",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:32.827041Z",
     "iopub.status.busy": "2025-05-06T10:39:32.826646Z",
     "iopub.status.idle": "2025-05-06T10:39:32.835345Z",
     "shell.execute_reply": "2025-05-06T10:39:32.834832Z"
    },
    "papermill": {
     "duration": 0.017078,
     "end_time": "2025-05-06T10:39:32.836346",
     "exception": false,
     "start_time": "2025-05-06T10:39:32.819268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>71483</th>\n",
       "      <td>71483</td>\n",
       "      <td>JUST IN: ROY MOORE Accuser ADMITS to FORGING Y...</td>\n",
       "      <td>The credibility of Beverly Young Nelson, the w...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26591</th>\n",
       "      <td>26591</td>\n",
       "      <td>States with the most people on food stamps</td>\n",
       "      <td>With grocery bills priced as high as $1,300 pe...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36470</th>\n",
       "      <td>36470</td>\n",
       "      <td>WATCH: Anti-MILO Protesters Tear Down Barricad...</td>\n",
       "      <td>Protestors at the ( ) event featuring MILO and...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                                              title  \\\n",
       "71483       71483  JUST IN: ROY MOORE Accuser ADMITS to FORGING Y...   \n",
       "26591       26591         States with the most people on food stamps   \n",
       "36470       36470  WATCH: Anti-MILO Protesters Tear Down Barricad...   \n",
       "\n",
       "                                                    text  label  \n",
       "71483  The credibility of Beverly Young Nelson, the w...      1  \n",
       "26591  With grocery bills priced as high as $1,300 pe...      0  \n",
       "36470  Protestors at the ( ) event featuring MILO and...      0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.sample(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bc3d428",
   "metadata": {
    "papermill": {
     "duration": 0.006811,
     "end_time": "2025-05-06T10:39:32.850159",
     "exception": false,
     "start_time": "2025-05-06T10:39:32.843348",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### <center style=\"background:#636363; color: #fff; padding: 15px 0;\"> **Tokenizing** </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c5a2f3dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:32.914743Z",
     "iopub.status.busy": "2025-05-06T10:39:32.914055Z",
     "iopub.status.idle": "2025-05-06T10:39:35.291481Z",
     "shell.execute_reply": "2025-05-06T10:39:35.290682Z"
    },
    "papermill": {
     "duration": 2.387099,
     "end_time": "2025-05-06T10:39:35.292928",
     "exception": false,
     "start_time": "2025-05-06T10:39:32.905829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Hyperparameters\n",
    "max_words = 46000      # vocabulary size\n",
    "max_len_title = 30     # title sequence length\n",
    "\n",
    "# Tokenizers\n",
    "title_tokenizer = Tokenizer(num_words=max_words, oov_token=\"<OOV>\")\n",
    "\n",
    "title_tokenizer.fit_on_texts(data2['title'])\n",
    "title_sequences = title_tokenizer.texts_to_sequences(data2['title'])\n",
    "title_padded = pad_sequences(title_sequences, maxlen=max_len_title, padding='post', truncating='post')\n",
    "total_words = len(title_tokenizer.word_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a8cce97d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:35.311255Z",
     "iopub.status.busy": "2025-05-06T10:39:35.310945Z",
     "iopub.status.idle": "2025-05-06T10:39:35.315510Z",
     "shell.execute_reply": "2025-05-06T10:39:35.314958Z"
    },
    "papermill": {
     "duration": 0.015146,
     "end_time": "2025-05-06T10:39:35.316601",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.301455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46863"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "359380f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:35.333998Z",
     "iopub.status.busy": "2025-05-06T10:39:35.333679Z",
     "iopub.status.idle": "2025-05-06T10:39:35.343318Z",
     "shell.execute_reply": "2025-05-06T10:39:35.342737Z"
    },
    "papermill": {
     "duration": 0.019909,
     "end_time": "2025-05-06T10:39:35.344444",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.324535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28461</th>\n",
       "      <td>28461</td>\n",
       "      <td>The circus of liars - America's three rings of...</td>\n",
       "      <td>Wed, 26 Oct 2016 18:19 UTC © Jen Psaki Preside...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54229</th>\n",
       "      <td>54229</td>\n",
       "      <td>Путин: Запад постоянно наступает на одни и те ...</td>\n",
       "      <td>0 комментариев 4 поделились \\n\"На примере терр...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13978</th>\n",
       "      <td>13978</td>\n",
       "      <td>Scottish Newspaper Hilariously Trolls Trump I...</td>\n",
       "      <td>The Scots are geniuses when it comes to trolli...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                                              title  \\\n",
       "28461       28461  The circus of liars - America's three rings of...   \n",
       "54229       54229  Путин: Запад постоянно наступает на одни и те ...   \n",
       "13978       13978   Scottish Newspaper Hilariously Trolls Trump I...   \n",
       "\n",
       "                                                    text  label  \n",
       "28461  Wed, 26 Oct 2016 18:19 UTC © Jen Psaki Preside...      1  \n",
       "54229  0 комментариев 4 поделились \\n\"На примере терр...      1  \n",
       "13978  The Scots are geniuses when it comes to trolli...      1  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert 'real' → 1, 'fake' → 0\n",
    "# data2['label'] = data2['label'].map({'REAL': 1, 'FAKE': 0})\n",
    "labels = data2['label'].values\n",
    "# data['label'].isnull().sum()\n",
    "data2.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0db3efc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:35.364571Z",
     "iopub.status.busy": "2025-05-06T10:39:35.364363Z",
     "iopub.status.idle": "2025-05-06T10:39:35.367424Z",
     "shell.execute_reply": "2025-05-06T10:39:35.366664Z"
    },
    "papermill": {
     "duration": 0.014063,
     "end_time": "2025-05-06T10:39:35.368529",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.354466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data2.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5b35bea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:35.384819Z",
     "iopub.status.busy": "2025-05-06T10:39:35.384112Z",
     "iopub.status.idle": "2025-05-06T10:39:35.388505Z",
     "shell.execute_reply": "2025-05-06T10:39:35.388000Z"
    },
    "papermill": {
     "duration": 0.013557,
     "end_time": "2025-05-06T10:39:35.389574",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.376017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(71537, 30)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "title_padded.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af5f1494",
   "metadata": {
    "papermill": {
     "duration": 0.007603,
     "end_time": "2025-05-06T10:39:35.404421",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.396818",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### <center style=\"background:#636363; color: #fff; padding: 15px 0;\"> **Data Splitting** </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6c6c44e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:35.419829Z",
     "iopub.status.busy": "2025-05-06T10:39:35.419623Z",
     "iopub.status.idle": "2025-05-06T10:39:35.643894Z",
     "shell.execute_reply": "2025-05-06T10:39:35.643311Z"
    },
    "papermill": {
     "duration": 0.233643,
     "end_time": "2025-05-06T10:39:35.645284",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.411641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    title_padded,  labels, test_size=0.2, random_state=42, stratify=labels)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8c9b501",
   "metadata": {
    "papermill": {
     "duration": 0.00698,
     "end_time": "2025-05-06T10:39:35.659916",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.652936",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color: #fff; padding: 15px 0; \"> **Model:** Architecture </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "077026f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:35.675092Z",
     "iopub.status.busy": "2025-05-06T10:39:35.674818Z",
     "iopub.status.idle": "2025-05-06T10:39:36.864001Z",
     "shell.execute_reply": "2025-05-06T10:39:36.863175Z"
    },
    "papermill": {
     "duration": 1.198233,
     "end_time": "2025-05-06T10:39:36.865178",
     "exception": false,
     "start_time": "2025-05-06T10:39:35.666945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
      "  warnings.warn(\n",
      "I0000 00:00:1746527976.820547      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    }
   ],
   "source": [
    "# common used variables\n",
    "COMMON_REGULARIZATION_VALUE = 0.03\n",
    "COMMON_DROPOUT_VALUE = 0.3\n",
    "\n",
    "# creating model\n",
    "model = Sequential(name='mo_1')\n",
    "\n",
    "# layer 1 (Embedding layer)\n",
    "model.add(\n",
    "    Embedding(input_dim=max_words, output_dim=100, input_length=max_len_title, name='Embedding_1')\n",
    ")\n",
    "\n",
    "# layer 2 (Input layer)\n",
    "model.add(\n",
    "    LSTM(\n",
    "        units = 8, \n",
    "        name = 'LSTM_1', \n",
    "        return_sequences = True, \n",
    "        dropout = COMMON_DROPOUT_VALUE, \n",
    "        recurrent_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        bias_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_dropout = COMMON_DROPOUT_VALUE,\n",
    "        kernel_constraint = MaxNorm(3), \n",
    "        recurrent_constraint=UnitNorm()\n",
    "))\n",
    "\n",
    "\n",
    "# layer 3 (hidden layer)\n",
    "model.add(\n",
    "    LSTM(\n",
    "        units = 8, \n",
    "        return_sequences = True, \n",
    "        dropout = COMMON_DROPOUT_VALUE, \n",
    "        kernel_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        bias_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_dropout = COMMON_DROPOUT_VALUE,\n",
    "        kernel_constraint = MaxNorm(3), \n",
    "        recurrent_constraint=UnitNorm()\n",
    "))\n",
    "\n",
    "\n",
    "# layer 4 (hidden layer)\n",
    "model.add(\n",
    "    LSTM(\n",
    "        units = 8, \n",
    "        return_sequences = False, \n",
    "        dropout = COMMON_DROPOUT_VALUE, \n",
    "        kernel_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        bias_regularizer = l2(COMMON_REGULARIZATION_VALUE), \n",
    "        recurrent_dropout = COMMON_DROPOUT_VALUE,\n",
    "        kernel_constraint = MaxNorm(3), \n",
    "        recurrent_constraint=UnitNorm()\n",
    "))\n",
    "\n",
    "\n",
    "# layer 5 (output layer)\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03e41364",
   "metadata": {
    "papermill": {
     "duration": 0.007167,
     "end_time": "2025-05-06T10:39:36.879891",
     "exception": false,
     "start_time": "2025-05-06T10:39:36.872724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color: #fff; padding: 15px 0; \"> **Model:** Training </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "91128a22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T10:39:36.894994Z",
     "iopub.status.busy": "2025-05-06T10:39:36.894723Z",
     "iopub.status.idle": "2025-05-06T11:49:48.800198Z",
     "shell.execute_reply": "2025-05-06T11:49:48.799583Z"
    },
    "papermill": {
     "duration": 4211.914403,
     "end_time": "2025-05-06T11:49:48.801388",
     "exception": false,
     "start_time": "2025-05-06T10:39:36.886985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 106ms/step - accuracy: 0.6009 - loss: 4.8667 - val_accuracy: 0.8688 - val_loss: 4.4328\n",
      "Epoch 2/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.8145 - loss: 4.3509 - val_accuracy: 0.8938 - val_loss: 4.0071\n",
      "Epoch 3/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.8795 - loss: 3.9846 - val_accuracy: 0.9051 - val_loss: 3.7550\n",
      "Epoch 4/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9095 - loss: 3.7416 - val_accuracy: 0.9095 - val_loss: 3.6055\n",
      "Epoch 5/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9243 - loss: 3.5778 - val_accuracy: 0.9128 - val_loss: 3.5035\n",
      "Epoch 6/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9293 - loss: 3.4741 - val_accuracy: 0.9144 - val_loss: 3.4315\n",
      "Epoch 7/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9398 - loss: 3.3841 - val_accuracy: 0.9153 - val_loss: 3.3769\n",
      "Epoch 8/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9430 - loss: 3.3214 - val_accuracy: 0.9144 - val_loss: 3.3345\n",
      "Epoch 9/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9447 - loss: 3.2722 - val_accuracy: 0.9140 - val_loss: 3.3001\n",
      "Epoch 10/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9459 - loss: 3.2304 - val_accuracy: 0.9170 - val_loss: 3.2671\n",
      "Epoch 11/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9525 - loss: 3.1921 - val_accuracy: 0.9153 - val_loss: 3.2504\n",
      "Epoch 12/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9537 - loss: 3.1665 - val_accuracy: 0.9126 - val_loss: 3.2433\n",
      "Epoch 13/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9566 - loss: 3.1430 - val_accuracy: 0.9151 - val_loss: 3.2281\n",
      "Epoch 14/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9579 - loss: 3.1264 - val_accuracy: 0.9161 - val_loss: 3.2204\n",
      "Epoch 15/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 107ms/step - accuracy: 0.9592 - loss: 3.1180 - val_accuracy: 0.9142 - val_loss: 3.2255\n",
      "Epoch 16/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9603 - loss: 3.1046 - val_accuracy: 0.9147 - val_loss: 3.2209\n",
      "Epoch 17/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9613 - loss: 3.0987 - val_accuracy: 0.9154 - val_loss: 3.2223\n",
      "Epoch 18/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 102ms/step - accuracy: 0.9640 - loss: 3.0892 - val_accuracy: 0.9165 - val_loss: 3.2246\n",
      "Epoch 19/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - accuracy: 0.9671 - loss: 3.0806 - val_accuracy: 0.9154 - val_loss: 3.2270\n",
      "Epoch 20/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - accuracy: 0.9629 - loss: 3.0870 - val_accuracy: 0.9180 - val_loss: 3.2228\n",
      "Epoch 21/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9659 - loss: 3.0781 - val_accuracy: 0.9161 - val_loss: 3.2302\n",
      "Epoch 22/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 102ms/step - accuracy: 0.9673 - loss: 3.0733 - val_accuracy: 0.9125 - val_loss: 3.2443\n",
      "Epoch 23/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 102ms/step - accuracy: 0.9681 - loss: 3.0688 - val_accuracy: 0.9123 - val_loss: 3.2492\n",
      "Epoch 24/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - accuracy: 0.9689 - loss: 3.0663 - val_accuracy: 0.9153 - val_loss: 3.2331\n",
      "Epoch 25/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9707 - loss: 3.0607 - val_accuracy: 0.9167 - val_loss: 3.2362\n",
      "Epoch 26/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - accuracy: 0.9707 - loss: 3.0579 - val_accuracy: 0.9153 - val_loss: 3.2456\n",
      "Epoch 27/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9713 - loss: 3.0538 - val_accuracy: 0.9158 - val_loss: 3.2415\n",
      "Epoch 28/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 102ms/step - accuracy: 0.9716 - loss: 3.0532 - val_accuracy: 0.9149 - val_loss: 3.2455\n",
      "Epoch 29/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9723 - loss: 3.0499 - val_accuracy: 0.9154 - val_loss: 3.2450\n",
      "Epoch 30/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9706 - loss: 3.0553 - val_accuracy: 0.9149 - val_loss: 3.2418\n",
      "Epoch 31/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 107ms/step - accuracy: 0.9742 - loss: 3.0432 - val_accuracy: 0.9161 - val_loss: 3.2453\n",
      "Epoch 32/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 106ms/step - accuracy: 0.9728 - loss: 3.0457 - val_accuracy: 0.9128 - val_loss: 3.2504\n",
      "Epoch 33/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 105ms/step - accuracy: 0.9767 - loss: 3.0370 - val_accuracy: 0.9177 - val_loss: 3.2486\n",
      "Epoch 34/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9712 - loss: 3.0479 - val_accuracy: 0.9167 - val_loss: 3.2506\n",
      "Epoch 35/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9741 - loss: 3.0414 - val_accuracy: 0.9158 - val_loss: 3.2605\n",
      "Epoch 36/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 105ms/step - accuracy: 0.9755 - loss: 3.0353 - val_accuracy: 0.9130 - val_loss: 3.2667\n",
      "Epoch 37/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 105ms/step - accuracy: 0.9768 - loss: 3.0291 - val_accuracy: 0.9175 - val_loss: 3.2559\n",
      "Epoch 38/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9801 - loss: 3.0225 - val_accuracy: 0.9154 - val_loss: 3.2639\n",
      "Epoch 39/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9763 - loss: 3.0309 - val_accuracy: 0.9137 - val_loss: 3.2704\n",
      "Epoch 40/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9758 - loss: 3.0295 - val_accuracy: 0.9154 - val_loss: 3.2635\n",
      "Epoch 41/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9788 - loss: 3.0226 - val_accuracy: 0.9160 - val_loss: 3.2645\n",
      "Epoch 42/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 104ms/step - accuracy: 0.9794 - loss: 3.0206 - val_accuracy: 0.9154 - val_loss: 3.2659\n",
      "Epoch 43/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9801 - loss: 3.0187 - val_accuracy: 0.9147 - val_loss: 3.2668\n",
      "Epoch 44/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 107ms/step - accuracy: 0.9792 - loss: 3.0210 - val_accuracy: 0.9170 - val_loss: 3.2675\n",
      "Epoch 45/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9797 - loss: 3.0171 - val_accuracy: 0.9154 - val_loss: 3.2743\n",
      "Epoch 46/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m85s\u001b[0m 106ms/step - accuracy: 0.9796 - loss: 3.0146 - val_accuracy: 0.9142 - val_loss: 3.2787\n",
      "Epoch 47/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9786 - loss: 3.0188 - val_accuracy: 0.9144 - val_loss: 3.2806\n",
      "Epoch 48/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9805 - loss: 3.0112 - val_accuracy: 0.9133 - val_loss: 3.2851\n",
      "Epoch 49/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 103ms/step - accuracy: 0.9815 - loss: 3.0120 - val_accuracy: 0.9139 - val_loss: 3.2796\n",
      "Epoch 50/50\n",
      "\u001b[1m805/805\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 104ms/step - accuracy: 0.9808 - loss: 3.0117 - val_accuracy: 0.9137 - val_loss: 3.2844\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss='binary_crossentropy', optimizer=optimizers.Adam(learning_rate=0.0001), metrics=['accuracy'])\n",
    "history = model.fit(X_train, y_train, epochs=50, validation_split=0.1, batch_size=64)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8835223f",
   "metadata": {
    "papermill": {
     "duration": 1.871056,
     "end_time": "2025-05-06T11:49:52.487238",
     "exception": false,
     "start_time": "2025-05-06T11:49:50.616182",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color: #fff; padding: 15px 0; \"> **Model:** Evaluating </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f6973808",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:49:56.212636Z",
     "iopub.status.busy": "2025-05-06T11:49:56.212029Z",
     "iopub.status.idle": "2025-05-06T11:50:05.382765Z",
     "shell.execute_reply": "2025-05-06T11:50:05.382061Z"
    },
    "papermill": {
     "duration": 11.006469,
     "end_time": "2025-05-06T11:50:05.383989",
     "exception": false,
     "start_time": "2025-05-06T11:49:54.377520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Test Accuracy: 91.46 %\n"
     ]
    }
   ],
   "source": [
    "# Evaluate\n",
    "loss, acc = model.evaluate(X_test, y_test, verbose=False)\n",
    "print(f\"\\nTest Accuracy: {acc*100:.2f} %\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94d891af",
   "metadata": {
    "papermill": {
     "duration": 1.875147,
     "end_time": "2025-05-06T11:50:09.057052",
     "exception": false,
     "start_time": "2025-05-06T11:50:07.181905",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color: #fff; padding: 15px 0; \"> **Model:** Analysing training </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "85382fdb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:50:12.667413Z",
     "iopub.status.busy": "2025-05-06T11:50:12.667133Z",
     "iopub.status.idle": "2025-05-06T11:50:12.782270Z",
     "shell.execute_reply": "2025-05-06T11:50:12.781600Z"
    },
    "papermill": {
     "duration": 1.905249,
     "end_time": "2025-05-06T11:50:12.783415",
     "exception": false,
     "start_time": "2025-05-06T11:50:10.878166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "08f4594d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:50:16.465262Z",
     "iopub.status.busy": "2025-05-06T11:50:16.464994Z",
     "iopub.status.idle": "2025-05-06T11:50:16.587030Z",
     "shell.execute_reply": "2025-05-06T11:50:16.586397Z"
    },
    "papermill": {
     "duration": 1.999195,
     "end_time": "2025-05-06T11:50:16.588346",
     "exception": false,
     "start_time": "2025-05-06T11:50:14.589151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6fcf83d",
   "metadata": {
    "papermill": {
     "duration": 1.80647,
     "end_time": "2025-05-06T11:50:20.194717",
     "exception": false,
     "start_time": "2025-05-06T11:50:18.388247",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color: #fff; padding: 15px 0; \"> **Model:** Prediction Code </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "51add432",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:50:23.886511Z",
     "iopub.status.busy": "2025-05-06T11:50:23.886246Z",
     "iopub.status.idle": "2025-05-06T11:50:24.604432Z",
     "shell.execute_reply": "2025-05-06T11:50:24.603824Z"
    },
    "papermill": {
     "duration": 2.591618,
     "end_time": "2025-05-06T11:50:24.605570",
     "exception": false,
     "start_time": "2025-05-06T11:50:22.013952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'real'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text = \"Mohan drive a car on a highway\"\n",
    "\n",
    "# tokenizing\n",
    "sequences = title_tokenizer.texts_to_sequences(pd.Series(text))\n",
    "padded = pad_sequences(sequences, maxlen=max_len_title, padding='post', truncating='post')\n",
    "prediction = model.predict(padded, verbose=False)\n",
    "confidense = prediction[0][0]\n",
    "output = 'fake' if confidense < 0.5 else 'real' if confidense > 0.65 else 'not sure'\n",
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f6cbd5ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:50:28.282131Z",
     "iopub.status.busy": "2025-05-06T11:50:28.281382Z",
     "iopub.status.idle": "2025-05-06T11:50:28.286209Z",
     "shell.execute_reply": "2025-05-06T11:50:28.285545Z"
    },
    "papermill": {
     "duration": 1.806394,
     "end_time": "2025-05-06T11:50:28.287305",
     "exception": false,
     "start_time": "2025-05-06T11:50:26.480911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(None, 1)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.output_shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed44c203",
   "metadata": {
    "papermill": {
     "duration": 1.895873,
     "end_time": "2025-05-06T11:50:31.984062",
     "exception": false,
     "start_time": "2025-05-06T11:50:30.088189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "10b8525c",
   "metadata": {
    "papermill": {
     "duration": 1.789789,
     "end_time": "2025-05-06T11:50:35.563285",
     "exception": false,
     "start_time": "2025-05-06T11:50:33.773496",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## <center style=\"background:#000; color: #fff; padding: 15px 0; \"> **Model:** Saving </center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cad129d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:50:39.231425Z",
     "iopub.status.busy": "2025-05-06T11:50:39.230968Z",
     "iopub.status.idle": "2025-05-06T11:50:39.378583Z",
     "shell.execute_reply": "2025-05-06T11:50:39.377798Z"
    },
    "papermill": {
     "duration": 2.024781,
     "end_time": "2025-05-06T11:50:39.379998",
     "exception": false,
     "start_time": "2025-05-06T11:50:37.355217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('model_9226.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "474fc861",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T11:50:42.971598Z",
     "iopub.status.busy": "2025-05-06T11:50:42.971319Z",
     "iopub.status.idle": "2025-05-06T11:50:43.007177Z",
     "shell.execute_reply": "2025-05-06T11:50:43.006396Z"
    },
    "papermill": {
     "duration": 1.830684,
     "end_time": "2025-05-06T11:50:43.008552",
     "exception": false,
     "start_time": "2025-05-06T11:50:41.177868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "# Assuming you have a tokenizer object\n",
    "with open('tokenizer.pkl', 'wb') as f:\n",
    "    pickle.dump(title_tokenizer, f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03f2c67b",
   "metadata": {
    "papermill": {
     "duration": 1.876748,
     "end_time": "2025-05-06T11:50:46.664262",
     "exception": false,
     "start_time": "2025-05-06T11:50:44.787514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a2d5c36",
   "metadata": {
    "papermill": {
     "duration": 1.799208,
     "end_time": "2025-05-06T11:50:50.236176",
     "exception": false,
     "start_time": "2025-05-06T11:50:48.436968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2043034,
     "sourceId": 3388761,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2093157,
     "sourceId": 6641062,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4311.380489,
   "end_time": "2025-05-06T11:50:55.433211",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-06T10:39:04.052722",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
