{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53038207",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:34.228125Z",
     "iopub.status.busy": "2025-02-20T23:20:34.227737Z",
     "iopub.status.idle": "2025-02-20T23:20:50.889570Z",
     "shell.execute_reply": "2025-02-20T23:20:50.888238Z"
    },
    "papermill": {
     "duration": 16.66935,
     "end_time": "2025-02-20T23:20:50.891435",
     "exception": false,
     "start_time": "2025-02-20T23:20:34.222085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/bagpack-data-prerocessing/__results__.html\n",
      "/kaggle/input/bagpack-data-prerocessing/waterproof_encoder.pkl\n",
      "/kaggle/input/bagpack-data-prerocessing/style_encoder.pkl\n",
      "/kaggle/input/bagpack-data-prerocessing/size_encoder.pkl\n",
      "/kaggle/input/bagpack-data-prerocessing/laptopc_encoder.pkl\n",
      "/kaggle/input/bagpack-data-prerocessing/brand_encoder.pkl\n",
      "/kaggle/input/bagpack-data-prerocessing/material_encoder.pkl\n",
      "/kaggle/input/bagpack-data-prerocessing/__notebook__.ipynb\n",
      "/kaggle/input/bagpack-data-prerocessing/__output__.json\n",
      "/kaggle/input/bagpack-data-prerocessing/preprocessed_data.csv\n",
      "/kaggle/input/bagpack-data-prerocessing/custom.css\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "import tensorflow as tf\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn import metrics\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "22ab13ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:50.900718Z",
     "iopub.status.busy": "2025-02-20T23:20:50.900079Z",
     "iopub.status.idle": "2025-02-20T23:20:51.430723Z",
     "shell.execute_reply": "2025-02-20T23:20:51.429763Z"
    },
    "papermill": {
     "duration": 0.53712,
     "end_time": "2025-02-20T23:20:51.432607",
     "exception": false,
     "start_time": "2025-02-20T23:20:50.895487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(r\"/kaggle/input/bagpack-data-prerocessing/preprocessed_data.csv\").head(20000 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5b38ea72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:51.441431Z",
     "iopub.status.busy": "2025-02-20T23:20:51.441086Z",
     "iopub.status.idle": "2025-02-20T23:20:51.460558Z",
     "shell.execute_reply": "2025-02-20T23:20:51.459448Z"
    },
    "papermill": {
     "duration": 0.025916,
     "end_time": "2025-02-20T23:20:51.462442",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.436526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X, y = df.iloc[:, :-1], df.iloc[:, -1]\n",
    "\n",
    "X_updated = X.drop(columns=['Unnamed: 0', 'Style_Backpack', 'Style_Messenger', 'Style_Tote',\n",
    "       'Brand_Adidas', 'Brand_Jansport', 'Brand_Nike', 'Brand_Puma',\n",
    "       'Brand_Under Armour'])\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "84c1415b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:51.471019Z",
     "iopub.status.busy": "2025-02-20T23:20:51.470637Z",
     "iopub.status.idle": "2025-02-20T23:20:51.477294Z",
     "shell.execute_reply": "2025-02-20T23:20:51.476311Z"
    },
    "papermill": {
     "duration": 0.012486,
     "end_time": "2025-02-20T23:20:51.478768",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.466282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Material', 'Size', 'Compartments', 'Laptop Compartment', 'Waterproof',\n",
       "       'Weight Capacity (kg)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_updated.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf8cd3ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:08:32.938488Z",
     "iopub.status.busy": "2025-02-20T23:08:32.938106Z",
     "iopub.status.idle": "2025-02-20T23:08:32.943983Z",
     "shell.execute_reply": "2025-02-20T23:08:32.942875Z",
     "shell.execute_reply.started": "2025-02-20T23:08:32.938433Z"
    },
    "papermill": {
     "duration": 0.003406,
     "end_time": "2025-02-20T23:20:51.486548",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.483142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "975fb300",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:51.494807Z",
     "iopub.status.busy": "2025-02-20T23:20:51.494436Z",
     "iopub.status.idle": "2025-02-20T23:20:51.519851Z",
     "shell.execute_reply": "2025-02-20T23:20:51.518760Z"
    },
    "papermill": {
     "duration": 0.031779,
     "end_time": "2025-02-20T23:20:51.521843",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.490064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "normalizer = Normalizer()\n",
    "X_train_nor = normalizer.fit_transform(X_train)\n",
    "X_test_nor = normalizer.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c27e324",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:51.532512Z",
     "iopub.status.busy": "2025-02-20T23:20:51.532167Z",
     "iopub.status.idle": "2025-02-20T23:20:51.536221Z",
     "shell.execute_reply": "2025-02-20T23:20:51.535283Z"
    },
    "papermill": {
     "duration": 0.011077,
     "end_time": "2025-02-20T23:20:51.537873",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.526796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_shape = (X_train.shape[1],)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bb58d51",
   "metadata": {
    "papermill": {
     "duration": 0.003278,
     "end_time": "2025-02-20T23:20:51.544887",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.541609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3128b119",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:51.553221Z",
     "iopub.status.busy": "2025-02-20T23:20:51.552850Z",
     "iopub.status.idle": "2025-02-20T23:20:51.702754Z",
     "shell.execute_reply": "2025-02-20T23:20:51.701692Z"
    },
    "papermill": {
     "duration": 0.156025,
     "end_time": "2025-02-20T23:20:51.704513",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.548488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "model = Sequential(name=\"bag_x\")\n",
    "\n",
    "model.add(Dense(16, activation='relu', input_shape=input_shape))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dense(512, activation='relu'))\n",
    "model.add(Dense(512, activation='relu'))\n",
    "# model.add(Dense(128, activation='relu'))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "# model.add(Dense(32, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "# model.add(Dense(8, activation='relu'))\n",
    "# model.add(Dense(4, activation='relu'))\n",
    "# model.add(Dense(2, activation='relu'))\n",
    "model.add(Dense(1, activation='relu'))\n",
    "\n",
    "# model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "46725505",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:20:51.713256Z",
     "iopub.status.busy": "2025-02-20T23:20:51.712874Z",
     "iopub.status.idle": "2025-02-20T23:21:20.094320Z",
     "shell.execute_reply": "2025-02-20T23:21:20.093179Z"
    },
    "papermill": {
     "duration": 28.388009,
     "end_time": "2025-02-20T23:21:20.096322",
     "exception": false,
     "start_time": "2025-02-20T23:20:51.708313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 6ms/step - loss: 2699.1604 - root_mean_squared_error: 50.6081 - val_loss: 1536.6066 - val_root_mean_squared_error: 39.1996\n",
      "Epoch 2/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1527.7366 - root_mean_squared_error: 39.0854 - val_loss: 1562.0365 - val_root_mean_squared_error: 39.5226\n",
      "Epoch 3/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1514.1450 - root_mean_squared_error: 38.9109 - val_loss: 1565.8453 - val_root_mean_squared_error: 39.5708\n",
      "Epoch 4/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1521.8380 - root_mean_squared_error: 39.0096 - val_loss: 1539.0455 - val_root_mean_squared_error: 39.2307\n",
      "Epoch 5/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1545.5988 - root_mean_squared_error: 39.3125 - val_loss: 1564.0605 - val_root_mean_squared_error: 39.5482\n",
      "Epoch 6/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1511.4679 - root_mean_squared_error: 38.8755 - val_loss: 1539.7325 - val_root_mean_squared_error: 39.2394\n",
      "Epoch 7/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1543.1906 - root_mean_squared_error: 39.2825 - val_loss: 1537.2448 - val_root_mean_squared_error: 39.2077\n",
      "Epoch 8/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - loss: 1528.4548 - root_mean_squared_error: 39.0942 - val_loss: 1538.0398 - val_root_mean_squared_error: 39.2178\n",
      "Epoch 9/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1538.7557 - root_mean_squared_error: 39.2265 - val_loss: 1534.4301 - val_root_mean_squared_error: 39.1718\n",
      "Epoch 10/10\n",
      "\u001b[1m479/479\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - loss: 1534.2428 - root_mean_squared_error: 39.1691 - val_loss: 1534.7754 - val_root_mean_squared_error: 39.1762\n"
     ]
    }
   ],
   "source": [
    "model.compile('adam', 'mse', metrics=['root_mean_squared_error'])\n",
    "\n",
    "history = model.fit(X_train_nor, y_train, batch_size=32, epochs=10, validation_split=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "59e29c74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:21:20.161465Z",
     "iopub.status.busy": "2025-02-20T23:21:20.161079Z",
     "iopub.status.idle": "2025-02-20T23:21:20.403413Z",
     "shell.execute_reply": "2025-02-20T23:21:20.402325Z"
    },
    "papermill": {
     "duration": 0.276299,
     "end_time": "2025-02-20T23:21:20.405164",
     "exception": false,
     "start_time": "2025-02-20T23:21:20.128865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2b101232",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:21:20.467842Z",
     "iopub.status.busy": "2025-02-20T23:21:20.467501Z",
     "iopub.status.idle": "2025-02-20T23:21:20.905033Z",
     "shell.execute_reply": "2025-02-20T23:21:20.903886Z"
    },
    "papermill": {
     "duration": 0.470864,
     "end_time": "2025-02-20T23:21:20.906786",
     "exception": false,
     "start_time": "2025-02-20T23:21:20.435922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m94/94\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "593811.8937725071"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "(metrics.mean_squared_error(y_test, y_pred))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "71dedfa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:21:20.971183Z",
     "iopub.status.busy": "2025-02-20T23:21:20.970764Z",
     "iopub.status.idle": "2025-02-20T23:21:20.977578Z",
     "shell.execute_reply": "2025-02-20T23:21:20.976579Z"
    },
    "papermill": {
     "duration": 0.040607,
     "end_time": "2025-02-20T23:21:20.979008",
     "exception": false,
     "start_time": "2025-02-20T23:21:20.938401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ConfusionMatrixDisplay',\n",
       " 'DetCurveDisplay',\n",
       " 'DistanceMetric',\n",
       " 'PrecisionRecallDisplay',\n",
       " 'PredictionErrorDisplay',\n",
       " 'RocCurveDisplay',\n",
       " 'SCORERS',\n",
       " '__all__',\n",
       " '__builtins__',\n",
       " '__cached__',\n",
       " '__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__path__',\n",
       " '__spec__',\n",
       " '_base',\n",
       " '_classification',\n",
       " '_dist_metrics',\n",
       " '_pairwise_distances_reduction',\n",
       " '_pairwise_fast',\n",
       " '_plot',\n",
       " '_ranking',\n",
       " '_regression',\n",
       " '_scorer',\n",
       " 'accuracy_score',\n",
       " 'adjusted_mutual_info_score',\n",
       " 'adjusted_rand_score',\n",
       " 'auc',\n",
       " 'average_precision_score',\n",
       " 'balanced_accuracy_score',\n",
       " 'brier_score_loss',\n",
       " 'calinski_harabasz_score',\n",
       " 'check_scoring',\n",
       " 'class_likelihood_ratios',\n",
       " 'classification_report',\n",
       " 'cluster',\n",
       " 'cohen_kappa_score',\n",
       " 'completeness_score',\n",
       " 'confusion_matrix',\n",
       " 'consensus_score',\n",
       " 'coverage_error',\n",
       " 'd2_absolute_error_score',\n",
       " 'd2_pinball_score',\n",
       " 'd2_tweedie_score',\n",
       " 'davies_bouldin_score',\n",
       " 'dcg_score',\n",
       " 'det_curve',\n",
       " 'euclidean_distances',\n",
       " 'explained_variance_score',\n",
       " 'f1_score',\n",
       " 'fbeta_score',\n",
       " 'fowlkes_mallows_score',\n",
       " 'get_scorer',\n",
       " 'get_scorer_names',\n",
       " 'hamming_loss',\n",
       " 'hinge_loss',\n",
       " 'homogeneity_completeness_v_measure',\n",
       " 'homogeneity_score',\n",
       " 'jaccard_score',\n",
       " 'label_ranking_average_precision_score',\n",
       " 'label_ranking_loss',\n",
       " 'log_loss',\n",
       " 'make_scorer',\n",
       " 'matthews_corrcoef',\n",
       " 'max_error',\n",
       " 'mean_absolute_error',\n",
       " 'mean_absolute_percentage_error',\n",
       " 'mean_gamma_deviance',\n",
       " 'mean_pinball_loss',\n",
       " 'mean_poisson_deviance',\n",
       " 'mean_squared_error',\n",
       " 'mean_squared_log_error',\n",
       " 'mean_tweedie_deviance',\n",
       " 'median_absolute_error',\n",
       " 'multilabel_confusion_matrix',\n",
       " 'mutual_info_score',\n",
       " 'nan_euclidean_distances',\n",
       " 'ndcg_score',\n",
       " 'normalized_mutual_info_score',\n",
       " 'pair_confusion_matrix',\n",
       " 'pairwise',\n",
       " 'pairwise_distances',\n",
       " 'pairwise_distances_argmin',\n",
       " 'pairwise_distances_argmin_min',\n",
       " 'pairwise_distances_chunked',\n",
       " 'pairwise_kernels',\n",
       " 'precision_recall_curve',\n",
       " 'precision_recall_fscore_support',\n",
       " 'precision_score',\n",
       " 'r2_score',\n",
       " 'rand_score',\n",
       " 'recall_score',\n",
       " 'roc_auc_score',\n",
       " 'roc_curve',\n",
       " 'silhouette_samples',\n",
       " 'silhouette_score',\n",
       " 'top_k_accuracy_score',\n",
       " 'v_measure_score',\n",
       " 'zero_one_loss']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(metrics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a7af7ee",
   "metadata": {
    "papermill": {
     "duration": 0.03119,
     "end_time": "2025-02-20T23:21:21.041277",
     "exception": false,
     "start_time": "2025-02-20T23:21:21.010087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cc35b5a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-20T23:21:21.106170Z",
     "iopub.status.busy": "2025-02-20T23:21:21.105809Z",
     "iopub.status.idle": "2025-02-20T23:21:21.868330Z",
     "shell.execute_reply": "2025-02-20T23:21:21.867244Z"
    },
    "papermill": {
     "duration": 0.797458,
     "end_time": "2025-02-20T23:21:21.869894",
     "exception": false,
     "start_time": "2025-02-20T23:21:21.072436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Price', ylabel='Count'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.histplot(y)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "sourceId": 223528348,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30886,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 52.320214,
   "end_time": "2025-02-20T23:21:23.726665",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-20T23:20:31.406451",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
