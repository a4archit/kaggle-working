{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "28c1d1b9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:29.260780Z",
     "iopub.status.busy": "2025-04-04T09:04:29.260342Z",
     "iopub.status.idle": "2025-04-04T09:04:30.642837Z",
     "shell.execute_reply": "2025-04-04T09:04:30.641388Z"
    },
    "papermill": {
     "duration": 1.397084,
     "end_time": "2025-04-04T09:04:30.644942",
     "exception": false,
     "start_time": "2025-04-04T09:04:29.247858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e4/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e4/train.csv\n",
      "/kaggle/input/playground-series-s5e4/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e98f14b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:30.667145Z",
     "iopub.status.busy": "2025-04-04T09:04:30.666473Z",
     "iopub.status.idle": "2025-04-04T09:04:34.018124Z",
     "shell.execute_reply": "2025-04-04T09:04:34.016844Z"
    },
    "papermill": {
     "duration": 3.365657,
     "end_time": "2025-04-04T09:04:34.020768",
     "exception": false,
     "start_time": "2025-04-04T09:04:30.655111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ce57d187",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:34.049098Z",
     "iopub.status.busy": "2025-04-04T09:04:34.048291Z",
     "iopub.status.idle": "2025-04-04T09:04:34.604541Z",
     "shell.execute_reply": "2025-04-04T09:04:34.602804Z"
    },
    "papermill": {
     "duration": 0.569629,
     "end_time": "2025-04-04T09:04:34.607120",
     "exception": false,
     "start_time": "2025-04-04T09:04:34.037491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder, StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.metrics import accuracy_score, mean_squared_error\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, VotingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2112d5a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:34.629460Z",
     "iopub.status.busy": "2025-04-04T09:04:34.628964Z",
     "iopub.status.idle": "2025-04-04T09:04:37.170696Z",
     "shell.execute_reply": "2025-04-04T09:04:37.169136Z"
    },
    "papermill": {
     "duration": 2.555893,
     "end_time": "2025-04-04T09:04:37.173515",
     "exception": false,
     "start_time": "2025-04-04T09:04:34.617622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/playground-series-s5e4/train.csv')\n",
    "res_df = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "285899fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:37.196259Z",
     "iopub.status.busy": "2025-04-04T09:04:37.195664Z",
     "iopub.status.idle": "2025-04-04T09:04:37.284779Z",
     "shell.execute_reply": "2025-04-04T09:04:37.283361Z"
    },
    "papermill": {
     "duration": 0.102594,
     "end_time": "2025-04-04T09:04:37.287139",
     "exception": false,
     "start_time": "2025-04-04T09:04:37.184545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44066</th>\n",
       "      <td>44066</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 43</td>\n",
       "      <td>78.66</td>\n",
       "      <td>Education</td>\n",
       "      <td>24.72</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>47.98</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>75.52000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>473445</th>\n",
       "      <td>473445</td>\n",
       "      <td>Money Matters</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>24.87</td>\n",
       "      <td>Business</td>\n",
       "      <td>92.79</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>Night</td>\n",
       "      <td>38.13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>21.43372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399944</th>\n",
       "      <td>399944</td>\n",
       "      <td>Tech Trends</td>\n",
       "      <td>Episode 10</td>\n",
       "      <td>72.59</td>\n",
       "      <td>Technology</td>\n",
       "      <td>31.95</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>29.04</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>57.19657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            id    Podcast_Name Episode_Title  Episode_Length_minutes  \\\n",
       "44066    44066  Study Sessions    Episode 43                   78.66   \n",
       "473445  473445   Money Matters    Episode 26                   24.87   \n",
       "399944  399944     Tech Trends    Episode 10                   72.59   \n",
       "\n",
       "             Genre  Host_Popularity_percentage Publication_Day  \\\n",
       "44066    Education                       24.72        Thursday   \n",
       "473445    Business                       92.79          Sunday   \n",
       "399944  Technology                       31.95          Sunday   \n",
       "\n",
       "       Publication_Time  Guest_Popularity_percentage  Number_of_Ads  \\\n",
       "44066         Afternoon                        47.98            1.0   \n",
       "473445            Night                        38.13            0.0   \n",
       "399944          Evening                        29.04            3.0   \n",
       "\n",
       "       Episode_Sentiment  Listening_Time_minutes  \n",
       "44066           Positive                75.52000  \n",
       "473445           Neutral                21.43372  \n",
       "399944           Neutral                57.19657  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "224a167d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:37.311452Z",
     "iopub.status.busy": "2025-04-04T09:04:37.310924Z",
     "iopub.status.idle": "2025-04-04T09:04:37.596908Z",
     "shell.execute_reply": "2025-04-04T09:04:37.595402Z"
    },
    "papermill": {
     "duration": 0.301666,
     "end_time": "2025-04-04T09:04:37.599716",
     "exception": false,
     "start_time": "2025-04-04T09:04:37.298050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 12 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           750000 non-null  int64  \n",
      " 1   Podcast_Name                 750000 non-null  object \n",
      " 2   Episode_Title                750000 non-null  object \n",
      " 3   Episode_Length_minutes       662907 non-null  float64\n",
      " 4   Genre                        750000 non-null  object \n",
      " 5   Host_Popularity_percentage   750000 non-null  float64\n",
      " 6   Publication_Day              750000 non-null  object \n",
      " 7   Publication_Time             750000 non-null  object \n",
      " 8   Guest_Popularity_percentage  603970 non-null  float64\n",
      " 9   Number_of_Ads                749999 non-null  float64\n",
      " 10  Episode_Sentiment            750000 non-null  object \n",
      " 11  Listening_Time_minutes       750000 non-null  float64\n",
      "dtypes: float64(5), int64(1), object(6)\n",
      "memory usage: 68.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cc6e0214",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:37.622824Z",
     "iopub.status.busy": "2025-04-04T09:04:37.622369Z",
     "iopub.status.idle": "2025-04-04T09:04:37.866913Z",
     "shell.execute_reply": "2025-04-04T09:04:37.865676Z"
    },
    "papermill": {
     "duration": 0.257586,
     "end_time": "2025-04-04T09:04:37.868850",
     "exception": false,
     "start_time": "2025-04-04T09:04:37.611264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                                  0\n",
       "Podcast_Name                        0\n",
       "Episode_Title                       0\n",
       "Episode_Length_minutes          87093\n",
       "Genre                               0\n",
       "Host_Popularity_percentage          0\n",
       "Publication_Day                     0\n",
       "Publication_Time                    0\n",
       "Guest_Popularity_percentage    146030\n",
       "Number_of_Ads                       1\n",
       "Episode_Sentiment                   0\n",
       "Listening_Time_minutes              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9e3efab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:37.891312Z",
     "iopub.status.busy": "2025-04-04T09:04:37.890793Z",
     "iopub.status.idle": "2025-04-04T09:04:37.898287Z",
     "shell.execute_reply": "2025-04-04T09:04:37.896934Z"
    },
    "papermill": {
     "duration": 0.021409,
     "end_time": "2025-04-04T09:04:37.900580",
     "exception": false,
     "start_time": "2025-04-04T09:04:37.879171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.19470666666666667"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "146030/df.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9eccf330",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:37.923328Z",
     "iopub.status.busy": "2025-04-04T09:04:37.922833Z",
     "iopub.status.idle": "2025-04-04T09:04:37.992155Z",
     "shell.execute_reply": "2025-04-04T09:04:37.990826Z"
    },
    "papermill": {
     "duration": 0.083229,
     "end_time": "2025-04-04T09:04:37.994436",
     "exception": false,
     "start_time": "2025-04-04T09:04:37.911207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    662907.000000\n",
       "mean         64.504738\n",
       "std          32.969603\n",
       "min           0.000000\n",
       "25%          35.730000\n",
       "50%          63.840000\n",
       "75%          94.070000\n",
       "max         325.240000\n",
       "Name: Episode_Length_minutes, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Episode_Length_minutes.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1892f883",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:38.017319Z",
     "iopub.status.busy": "2025-04-04T09:04:38.016842Z",
     "iopub.status.idle": "2025-04-04T09:04:38.043377Z",
     "shell.execute_reply": "2025-04-04T09:04:38.042195Z"
    },
    "papermill": {
     "duration": 0.040558,
     "end_time": "2025-04-04T09:04:38.045815",
     "exception": false,
     "start_time": "2025-04-04T09:04:38.005257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.Episode_Length_minutes = df.Episode_Length_minutes.fillna(df.Episode_Length_minutes.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b1cf09d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:38.068251Z",
     "iopub.status.busy": "2025-04-04T09:04:38.067723Z",
     "iopub.status.idle": "2025-04-04T09:04:38.097002Z",
     "shell.execute_reply": "2025-04-04T09:04:38.095694Z"
    },
    "papermill": {
     "duration": 0.043051,
     "end_time": "2025-04-04T09:04:38.099450",
     "exception": false,
     "start_time": "2025-04-04T09:04:38.056399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.Guest_Popularity_percentage = df.Guest_Popularity_percentage.fillna(df.Guest_Popularity_percentage.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d9f33f33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:38.121870Z",
     "iopub.status.busy": "2025-04-04T09:04:38.121415Z",
     "iopub.status.idle": "2025-04-04T09:04:38.464714Z",
     "shell.execute_reply": "2025-04-04T09:04:38.463395Z"
    },
    "papermill": {
     "duration": 0.357172,
     "end_time": "2025-04-04T09:04:38.467092",
     "exception": false,
     "start_time": "2025-04-04T09:04:38.109920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b94c454d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:38.490087Z",
     "iopub.status.busy": "2025-04-04T09:04:38.489667Z",
     "iopub.status.idle": "2025-04-04T09:04:38.731753Z",
     "shell.execute_reply": "2025-04-04T09:04:38.730412Z"
    },
    "papermill": {
     "duration": 0.256506,
     "end_time": "2025-04-04T09:04:38.734103",
     "exception": false,
     "start_time": "2025-04-04T09:04:38.477597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                             0\n",
       "Podcast_Name                   0\n",
       "Episode_Title                  0\n",
       "Episode_Length_minutes         0\n",
       "Genre                          0\n",
       "Host_Popularity_percentage     0\n",
       "Publication_Day                0\n",
       "Publication_Time               0\n",
       "Guest_Popularity_percentage    0\n",
       "Number_of_Ads                  0\n",
       "Episode_Sentiment              0\n",
       "Listening_Time_minutes         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9388858c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:38.756960Z",
     "iopub.status.busy": "2025-04-04T09:04:38.756543Z",
     "iopub.status.idle": "2025-04-04T09:04:38.907575Z",
     "shell.execute_reply": "2025-04-04T09:04:38.906124Z"
    },
    "papermill": {
     "duration": 0.164771,
     "end_time": "2025-04-04T09:04:38.909731",
     "exception": false,
     "start_time": "2025-04-04T09:04:38.744960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Episode_Length_minutes         0.866031\n",
       "Host_Popularity_percentage     0.050868\n",
       "Guest_Popularity_percentage   -0.014390\n",
       "Number_of_Ads                 -0.118337\n",
       "Listening_Time_minutes         1.000000\n",
       "Name: Listening_Time_minutes, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(include=['float']).corr()['Listening_Time_minutes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8710a137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:38.932622Z",
     "iopub.status.busy": "2025-04-04T09:04:38.932179Z",
     "iopub.status.idle": "2025-04-04T09:04:39.440559Z",
     "shell.execute_reply": "2025-04-04T09:04:39.439400Z"
    },
    "papermill": {
     "duration": 0.52259,
     "end_time": "2025-04-04T09:04:39.442996",
     "exception": false,
     "start_time": "2025-04-04T09:04:38.920406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.Episode_Title = df.Episode_Title.apply(lambda x: int(x.split(' ')[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "66af0aae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:39.466186Z",
     "iopub.status.busy": "2025-04-04T09:04:39.465706Z",
     "iopub.status.idle": "2025-04-04T09:04:39.493831Z",
     "shell.execute_reply": "2025-04-04T09:04:39.492223Z"
    },
    "papermill": {
     "duration": 0.042507,
     "end_time": "2025-04-04T09:04:39.496390",
     "exception": false,
     "start_time": "2025-04-04T09:04:39.453883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Podcast_Name</th>\n",
       "      <th>Episode_Title</th>\n",
       "      <th>Episode_Length_minutes</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Host_Popularity_percentage</th>\n",
       "      <th>Publication_Day</th>\n",
       "      <th>Publication_Time</th>\n",
       "      <th>Guest_Popularity_percentage</th>\n",
       "      <th>Number_of_Ads</th>\n",
       "      <th>Episode_Sentiment</th>\n",
       "      <th>Listening_Time_minutes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Mystery Matters</td>\n",
       "      <td>Episode 98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True Crime</td>\n",
       "      <td>74.81</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Night</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>31.41998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Joke Junction</td>\n",
       "      <td>Episode 26</td>\n",
       "      <td>119.80</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>66.95</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>75.95</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>88.01241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Study Sessions</td>\n",
       "      <td>Episode 16</td>\n",
       "      <td>73.90</td>\n",
       "      <td>Education</td>\n",
       "      <td>69.97</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Evening</td>\n",
       "      <td>8.97</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>44.92531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Digital Digest</td>\n",
       "      <td>Episode 45</td>\n",
       "      <td>67.17</td>\n",
       "      <td>Technology</td>\n",
       "      <td>57.22</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>78.70</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Positive</td>\n",
       "      <td>46.27824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mind &amp; Body</td>\n",
       "      <td>Episode 86</td>\n",
       "      <td>110.51</td>\n",
       "      <td>Health</td>\n",
       "      <td>80.07</td>\n",
       "      <td>Monday</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>58.68</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>75.61031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749995</th>\n",
       "      <td>749995</td>\n",
       "      <td>Learning Lab</td>\n",
       "      <td>Episode 25</td>\n",
       "      <td>75.66</td>\n",
       "      <td>Education</td>\n",
       "      <td>69.36</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>56.87058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749996</th>\n",
       "      <td>749996</td>\n",
       "      <td>Business Briefs</td>\n",
       "      <td>Episode 21</td>\n",
       "      <td>75.75</td>\n",
       "      <td>Business</td>\n",
       "      <td>35.21</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Night</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>45.46242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749997</th>\n",
       "      <td>749997</td>\n",
       "      <td>Lifestyle Lounge</td>\n",
       "      <td>Episode 51</td>\n",
       "      <td>30.98</td>\n",
       "      <td>Lifestyle</td>\n",
       "      <td>78.58</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>84.89</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>15.26000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749998</th>\n",
       "      <td>749998</td>\n",
       "      <td>Style Guide</td>\n",
       "      <td>Episode 47</td>\n",
       "      <td>108.98</td>\n",
       "      <td>Lifestyle</td>\n",
       "      <td>45.39</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>Morning</td>\n",
       "      <td>93.27</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "      <td>100.72939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>749999</th>\n",
       "      <td>749999</td>\n",
       "      <td>Sports Central</td>\n",
       "      <td>Episode 99</td>\n",
       "      <td>24.10</td>\n",
       "      <td>Sports</td>\n",
       "      <td>22.45</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>Night</td>\n",
       "      <td>36.72</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>11.94439</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>750000 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id      Podcast_Name Episode_Title  Episode_Length_minutes  \\\n",
       "0            0   Mystery Matters    Episode 98                     NaN   \n",
       "1            1     Joke Junction    Episode 26                  119.80   \n",
       "2            2    Study Sessions    Episode 16                   73.90   \n",
       "3            3    Digital Digest    Episode 45                   67.17   \n",
       "4            4       Mind & Body    Episode 86                  110.51   \n",
       "...        ...               ...           ...                     ...   \n",
       "749995  749995      Learning Lab    Episode 25                   75.66   \n",
       "749996  749996   Business Briefs    Episode 21                   75.75   \n",
       "749997  749997  Lifestyle Lounge    Episode 51                   30.98   \n",
       "749998  749998       Style Guide    Episode 47                  108.98   \n",
       "749999  749999    Sports Central    Episode 99                   24.10   \n",
       "\n",
       "             Genre  Host_Popularity_percentage Publication_Day  \\\n",
       "0       True Crime                       74.81        Thursday   \n",
       "1           Comedy                       66.95        Saturday   \n",
       "2        Education                       69.97         Tuesday   \n",
       "3       Technology                       57.22          Monday   \n",
       "4           Health                       80.07          Monday   \n",
       "...            ...                         ...             ...   \n",
       "749995   Education                       69.36        Saturday   \n",
       "749996    Business                       35.21        Saturday   \n",
       "749997   Lifestyle                       78.58        Thursday   \n",
       "749998   Lifestyle                       45.39        Thursday   \n",
       "749999      Sports                       22.45        Saturday   \n",
       "\n",
       "       Publication_Time  Guest_Popularity_percentage  Number_of_Ads  \\\n",
       "0                 Night                          NaN            0.0   \n",
       "1             Afternoon                        75.95            2.0   \n",
       "2               Evening                         8.97            0.0   \n",
       "3               Morning                        78.70            2.0   \n",
       "4             Afternoon                        58.68            3.0   \n",
       "...                 ...                          ...            ...   \n",
       "749995          Morning                          NaN            0.0   \n",
       "749996            Night                          NaN            2.0   \n",
       "749997          Morning                        84.89            0.0   \n",
       "749998          Morning                        93.27            0.0   \n",
       "749999            Night                        36.72            0.0   \n",
       "\n",
       "       Episode_Sentiment  Listening_Time_minutes  \n",
       "0               Positive                31.41998  \n",
       "1               Negative                88.01241  \n",
       "2               Negative                44.92531  \n",
       "3               Positive                46.27824  \n",
       "4                Neutral                75.61031  \n",
       "...                  ...                     ...  \n",
       "749995          Negative                56.87058  \n",
       "749996           Neutral                45.46242  \n",
       "749997          Negative                15.26000  \n",
       "749998          Negative               100.72939  \n",
       "749999           Neutral                11.94439  \n",
       "\n",
       "[750000 rows x 12 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2ae381be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:39.520269Z",
     "iopub.status.busy": "2025-04-04T09:04:39.519746Z",
     "iopub.status.idle": "2025-04-04T09:04:39.627156Z",
     "shell.execute_reply": "2025-04-04T09:04:39.625808Z"
    },
    "papermill": {
     "duration": 0.121537,
     "end_time": "2025-04-04T09:04:39.629230",
     "exception": false,
     "start_time": "2025-04-04T09:04:39.507693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex([(          'Podcast_Name',     ''),\n",
       "            ('Listening_Time_minutes', 'mean'),\n",
       "            ('Listening_Time_minutes',  'std')],\n",
       "           )"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = res_df.groupby(by=['Podcast_Name']).agg({'Listening_Time_minutes':['mean','std']}).reset_index()\n",
    "# sns.barplot(data=temp, x=\"Podcast_Name\", y=\"('Listening_Time_minutes','mean')\")\n",
    "# plt.plot(x=temp)\n",
    "# temp.columns\n",
    "# sns.plot(temp)\n",
    "temp.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "08c37eab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:39.654982Z",
     "iopub.status.busy": "2025-04-04T09:04:39.654548Z",
     "iopub.status.idle": "2025-04-04T09:04:39.717481Z",
     "shell.execute_reply": "2025-04-04T09:04:39.716096Z"
    },
    "papermill": {
     "duration": 0.078581,
     "end_time": "2025-04-04T09:04:39.719556",
     "exception": false,
     "start_time": "2025-04-04T09:04:39.640975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Podcast_Name\n",
       "Tech Talks             22847\n",
       "Sports Weekly          20053\n",
       "Funny Folks            19635\n",
       "Tech Trends            19549\n",
       "Fitness First          19488\n",
       "Business Insights      19480\n",
       "Style Guide            19364\n",
       "Game Day               19271\n",
       "Melody Mix             18889\n",
       "Criminal Minds         17735\n",
       "Finance Focus          17628\n",
       "Detective Diaries      17452\n",
       "Crime Chronicles       17374\n",
       "Athlete's Arena        17327\n",
       "Fashion Forward        17280\n",
       "Tune Time              17254\n",
       "Business Briefs        17012\n",
       "Lifestyle Lounge       16661\n",
       "True Crime Stories     16373\n",
       "Sports Central         16191\n",
       "Digital Digest         16171\n",
       "Humor Hub              16144\n",
       "Mystery Matters        16002\n",
       "Comedy Corner          15927\n",
       "Joke Junction          15074\n",
       "Wellness Wave          15009\n",
       "Sport Spot             14778\n",
       "Gadget Geek            14770\n",
       "Home & Living          14686\n",
       "Laugh Line             14673\n",
       "Life Lessons           14464\n",
       "World Watch            14043\n",
       "Sound Waves            13928\n",
       "Global News            13649\n",
       "Mind & Body            13639\n",
       "Daily Digest           13391\n",
       "Money Matters          13380\n",
       "Current Affairs        13138\n",
       "Market Masters         13092\n",
       "Study Sessions         13053\n",
       "Innovators             12913\n",
       "Music Matters          12652\n",
       "Learning Lab           12291\n",
       "Educational Nuggets    12245\n",
       "Healthy Living         12198\n",
       "Brain Boost            11543\n",
       "Health Hour            11114\n",
       "News Roundup            9169\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Podcast_Name.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0c895593",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:39.744160Z",
     "iopub.status.busy": "2025-04-04T09:04:39.743703Z",
     "iopub.status.idle": "2025-04-04T09:04:39.805669Z",
     "shell.execute_reply": "2025-04-04T09:04:39.804230Z"
    },
    "papermill": {
     "duration": 0.076482,
     "end_time": "2025-04-04T09:04:39.807794",
     "exception": false,
     "start_time": "2025-04-04T09:04:39.731312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Publication_Time\n",
       "Night        196849\n",
       "Evening      195777\n",
       "Afternoon    179460\n",
       "Morning      177913\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Publication_Time.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38838004",
   "metadata": {
    "papermill": {
     "duration": 0.011139,
     "end_time": "2025-04-04T09:04:39.830711",
     "exception": false,
     "start_time": "2025-04-04T09:04:39.819572",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Encoding columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e48953b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:39.855464Z",
     "iopub.status.busy": "2025-04-04T09:04:39.854932Z",
     "iopub.status.idle": "2025-04-04T09:04:40.624411Z",
     "shell.execute_reply": "2025-04-04T09:04:40.623167Z"
    },
    "papermill": {
     "duration": 0.784721,
     "end_time": "2025-04-04T09:04:40.626917",
     "exception": false,
     "start_time": "2025-04-04T09:04:39.842196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "genre_encoder = OrdinalEncoder()\n",
    "Genre_encoded = genre_encoder.fit_transform(df[['Genre']])\n",
    "\n",
    "Publication_Day_encoder = OrdinalEncoder()\n",
    "Publication_Day_encoded = Publication_Day_encoder.fit_transform(df[['Publication_Day']])\n",
    "\n",
    "Publication_Time_encoder = OrdinalEncoder()\n",
    "Publication_Time_encoded = Publication_Time_encoder.fit_transform(df[['Publication_Time']])\n",
    "\n",
    "Episode_Sentiment_encoder = OrdinalEncoder()\n",
    "Episode_Sentiment_encoded = Episode_Sentiment_encoder.fit_transform(df[['Episode_Sentiment']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d11e54d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:40.652182Z",
     "iopub.status.busy": "2025-04-04T09:04:40.651705Z",
     "iopub.status.idle": "2025-04-04T09:04:40.669669Z",
     "shell.execute_reply": "2025-04-04T09:04:40.668444Z"
    },
    "papermill": {
     "duration": 0.033246,
     "end_time": "2025-04-04T09:04:40.671971",
     "exception": false,
     "start_time": "2025-04-04T09:04:40.638725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.Genre = Genre_encoded\n",
    "df.Publication_Day = Publication_Day_encoded\n",
    "df.Publication_Time = Publication_Time_encoded\n",
    "df.Episode_Sentiment = Episode_Sentiment_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d4c12060",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:40.696861Z",
     "iopub.status.busy": "2025-04-04T09:04:40.696444Z",
     "iopub.status.idle": "2025-04-04T09:04:40.748488Z",
     "shell.execute_reply": "2025-04-04T09:04:40.747368Z"
    },
    "papermill": {
     "duration": 0.067036,
     "end_time": "2025-04-04T09:04:40.750767",
     "exception": false,
     "start_time": "2025-04-04T09:04:40.683731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['id','Podcast_Name','Guest_Popularity_percentage','Publication_Day','Genre'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "295c86f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:40.777355Z",
     "iopub.status.busy": "2025-04-04T09:04:40.776850Z",
     "iopub.status.idle": "2025-04-04T09:04:40.987029Z",
     "shell.execute_reply": "2025-04-04T09:04:40.985700Z"
    },
    "papermill": {
     "duration": 0.225118,
     "end_time": "2025-04-04T09:04:40.989233",
     "exception": false,
     "start_time": "2025-04-04T09:04:40.764115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Episode_Title                -0.017321\n",
       "Episode_Length_minutes        0.866031\n",
       "Host_Popularity_percentage    0.050868\n",
       "Publication_Time              0.013224\n",
       "Number_of_Ads                -0.118337\n",
       "Episode_Sentiment             0.039469\n",
       "Listening_Time_minutes        1.000000\n",
       "Name: Listening_Time_minutes, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['Listening_Time_minutes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0555633b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:41.014358Z",
     "iopub.status.busy": "2025-04-04T09:04:41.013844Z",
     "iopub.status.idle": "2025-04-04T09:04:41.033598Z",
     "shell.execute_reply": "2025-04-04T09:04:41.032212Z"
    },
    "papermill": {
     "duration": 0.034775,
     "end_time": "2025-04-04T09:04:41.035875",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.001100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "target = 'Listening_Time_minutes'\n",
    "X = df.drop(columns=[target]).head(50000)\n",
    "y = df[target].head(50000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8ec1f69",
   "metadata": {
    "papermill": {
     "duration": 0.011027,
     "end_time": "2025-04-04T09:04:41.058663",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.047636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "563d4776",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:41.083622Z",
     "iopub.status.busy": "2025-04-04T09:04:41.083182Z",
     "iopub.status.idle": "2025-04-04T09:04:41.124089Z",
     "shell.execute_reply": "2025-04-04T09:04:41.122956Z"
    },
    "papermill": {
     "duration": 0.056464,
     "end_time": "2025-04-04T09:04:41.126683",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.070219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08add159",
   "metadata": {
    "papermill": {
     "duration": 0.010987,
     "end_time": "2025-04-04T09:04:41.149971",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.138984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "25e7ec9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:41.175251Z",
     "iopub.status.busy": "2025-04-04T09:04:41.174753Z",
     "iopub.status.idle": "2025-04-04T09:04:41.188161Z",
     "shell.execute_reply": "2025-04-04T09:04:41.186784Z"
    },
    "papermill": {
     "duration": 0.02905,
     "end_time": "2025-04-04T09:04:41.190496",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.161446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b5b167f",
   "metadata": {
    "papermill": {
     "duration": 0.011224,
     "end_time": "2025-04-04T09:04:41.213277",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.202053",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "53b0a1cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:41.238514Z",
     "iopub.status.busy": "2025-04-04T09:04:41.237988Z",
     "iopub.status.idle": "2025-04-04T09:04:41.806466Z",
     "shell.execute_reply": "2025-04-04T09:04:41.805023Z"
    },
    "papermill": {
     "duration": 0.58385,
     "end_time": "2025-04-04T09:04:41.808532",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.224682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Neighbors - 20: 13.99\n"
     ]
    }
   ],
   "source": [
    "# for i in range(3,26):\n",
    "i = 20\n",
    "knn = KNeighborsRegressor(n_neighbors=i)\n",
    "knn.fit(X_train, y_train)\n",
    "knn_pred = knn.predict(X_test)\n",
    "print(f\"Neighbors - {i}: {mean_squared_error(knn_pred, y_test, squared=False):.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73e5ed30",
   "metadata": {
    "papermill": {
     "duration": 0.011357,
     "end_time": "2025-04-04T09:04:41.831783",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.820426",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Tree Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2828cba2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:41.856190Z",
     "iopub.status.busy": "2025-04-04T09:04:41.855725Z",
     "iopub.status.idle": "2025-04-04T09:04:42.038237Z",
     "shell.execute_reply": "2025-04-04T09:04:42.036959Z"
    },
    "papermill": {
     "duration": 0.197295,
     "end_time": "2025-04-04T09:04:42.040503",
     "exception": false,
     "start_time": "2025-04-04T09:04:41.843208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.288955588802251"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree = DecisionTreeRegressor(ccp_alpha=0.0001, max_depth=11)\n",
    "tree.fit(X_train, y_train)\n",
    "tree_pred = tree.predict(X_test)\n",
    "mean_squared_error(tree_pred, y_test, squared=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e37fda5d",
   "metadata": {
    "papermill": {
     "duration": 0.011478,
     "end_time": "2025-04-04T09:04:42.063814",
     "exception": false,
     "start_time": "2025-04-04T09:04:42.052336",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9b058500",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:42.089507Z",
     "iopub.status.busy": "2025-04-04T09:04:42.088923Z",
     "iopub.status.idle": "2025-04-04T09:04:44.342190Z",
     "shell.execute_reply": "2025-04-04T09:04:44.340670Z"
    },
    "papermill": {
     "duration": 2.268553,
     "end_time": "2025-04-04T09:04:44.344589",
     "exception": false,
     "start_time": "2025-04-04T09:04:42.076036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.288955588802251"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# n_estimators = [50, 150, 200]\n",
    "# for estimator in n_estimators:\n",
    "rf = RandomForestRegressor(n_estimators=50, ccp_alpha=0.0001, max_depth=11, n_jobs=-1)\n",
    "rf.fit(X_train, y_train)\n",
    "rf_pred = tree.predict(X_test)\n",
    "mean_squared_error(rf_pred, y_test, squared=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16880b8d",
   "metadata": {
    "papermill": {
     "duration": 0.012299,
     "end_time": "2025-04-04T09:04:44.369687",
     "exception": false,
     "start_time": "2025-04-04T09:04:44.357388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Ensemble model (using voting)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b3afc355",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:44.395552Z",
     "iopub.status.busy": "2025-04-04T09:04:44.394967Z",
     "iopub.status.idle": "2025-04-04T09:04:47.439974Z",
     "shell.execute_reply": "2025-04-04T09:04:47.438800Z"
    },
    "papermill": {
     "duration": 3.060768,
     "end_time": "2025-04-04T09:04:47.442562",
     "exception": false,
     "start_time": "2025-04-04T09:04:44.381794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "voting_model = VotingRegressor([\n",
    "    ('knn', knn),\n",
    "    ('tree', tree),\n",
    "    ('rf', rf)\n",
    "])\n",
    "\n",
    "voting_model.fit(X_train, y_train)\n",
    "voting_model_pred = voting_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f9790d88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:47.468214Z",
     "iopub.status.busy": "2025-04-04T09:04:47.467725Z",
     "iopub.status.idle": "2025-04-04T09:04:47.476121Z",
     "shell.execute_reply": "2025-04-04T09:04:47.474947Z"
    },
    "papermill": {
     "duration": 0.023173,
     "end_time": "2025-04-04T09:04:47.477898",
     "exception": false,
     "start_time": "2025-04-04T09:04:47.454725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.562293257072648"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(voting_model_pred, y_test, squared=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f5e38b85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:47.503708Z",
     "iopub.status.busy": "2025-04-04T09:04:47.503262Z",
     "iopub.status.idle": "2025-04-04T09:04:47.526729Z",
     "shell.execute_reply": "2025-04-04T09:04:47.525197Z"
    },
    "papermill": {
     "duration": 0.038801,
     "end_time": "2025-04-04T09:04:47.528761",
     "exception": false,
     "start_time": "2025-04-04T09:04:47.489960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingRegressor(estimators=[(&#x27;knn&#x27;, KNeighborsRegressor(n_neighbors=20)),\n",
       "                            (&#x27;tree&#x27;,\n",
       "                             DecisionTreeRegressor(ccp_alpha=0.0001,\n",
       "                                                   max_depth=11)),\n",
       "                            (&#x27;rf&#x27;,\n",
       "                             RandomForestRegressor(ccp_alpha=0.0001,\n",
       "                                                   max_depth=11,\n",
       "                                                   n_estimators=50,\n",
       "                                                   n_jobs=-1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingRegressor</label><div class=\"sk-toggleable__content\"><pre>VotingRegressor(estimators=[(&#x27;knn&#x27;, KNeighborsRegressor(n_neighbors=20)),\n",
       "                            (&#x27;tree&#x27;,\n",
       "                             DecisionTreeRegressor(ccp_alpha=0.0001,\n",
       "                                                   max_depth=11)),\n",
       "                            (&#x27;rf&#x27;,\n",
       "                             RandomForestRegressor(ccp_alpha=0.0001,\n",
       "                                                   max_depth=11,\n",
       "                                                   n_estimators=50,\n",
       "                                                   n_jobs=-1))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>knn</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsRegressor</label><div class=\"sk-toggleable__content\"><pre>KNeighborsRegressor(n_neighbors=20)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>tree</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(ccp_alpha=0.0001, max_depth=11)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>rf</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(ccp_alpha=0.0001, max_depth=11, n_estimators=50,\n",
       "                      n_jobs=-1)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "VotingRegressor(estimators=[('knn', KNeighborsRegressor(n_neighbors=20)),\n",
       "                            ('tree',\n",
       "                             DecisionTreeRegressor(ccp_alpha=0.0001,\n",
       "                                                   max_depth=11)),\n",
       "                            ('rf',\n",
       "                             RandomForestRegressor(ccp_alpha=0.0001,\n",
       "                                                   max_depth=11,\n",
       "                                                   n_estimators=50,\n",
       "                                                   n_jobs=-1))])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "voting_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "023213c5",
   "metadata": {
    "papermill": {
     "duration": 0.012637,
     "end_time": "2025-04-04T09:04:47.553979",
     "exception": false,
     "start_time": "2025-04-04T09:04:47.541342",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## XG-Boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b2a2e92c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:47.581310Z",
     "iopub.status.busy": "2025-04-04T09:04:47.580770Z",
     "iopub.status.idle": "2025-04-04T09:04:47.900676Z",
     "shell.execute_reply": "2025-04-04T09:04:47.898713Z"
    },
    "papermill": {
     "duration": 0.336406,
     "end_time": "2025-04-04T09:04:47.902957",
     "exception": false,
     "start_time": "2025-04-04T09:04:47.566551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/xgboost/core.py:160: UserWarning: [09:04:47] WARNING: /workspace/src/learner.cc:742: \n",
      "Parameters: { \"tol\" } are not used.\n",
      "\n",
      "  warnings.warn(smsg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1  ->  13.383067483908299\n"
     ]
    }
   ],
   "source": [
    "lrs = [0.1]\n",
    "\n",
    "for lr in lrs:\n",
    "    xg = xgb.XGBRegressor(\n",
    "        # objective = 'reg:squarederror',\n",
    "        # n_estimatos = 100,\n",
    "        learning_rate = lr,\n",
    "        max_depth = 5,\n",
    "        random_state = 42,\n",
    "        # ccp_alpha = 1,\n",
    "        tol = 3\n",
    "    )\n",
    "    \n",
    "    xg.fit(X_train, y_train)\n",
    "    xg_pred = xg.predict(X_test)\n",
    "    \n",
    "    print(lr, ' -> ', mean_squared_error(xg_pred, y_test, squared=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4e8c2c9",
   "metadata": {
    "papermill": {
     "duration": 0.012349,
     "end_time": "2025-04-04T09:04:47.928266",
     "exception": false,
     "start_time": "2025-04-04T09:04:47.915917",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Testing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d5579bff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:04:47.955359Z",
     "iopub.status.busy": "2025-04-04T09:04:47.954883Z",
     "iopub.status.idle": "2025-04-04T09:05:03.657214Z",
     "shell.execute_reply": "2025-04-04T09:05:03.655399Z"
    },
    "papermill": {
     "duration": 15.718766,
     "end_time": "2025-04-04T09:05:03.659506",
     "exception": false,
     "start_time": "2025-04-04T09:04:47.940740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = knn\n",
    "\n",
    "# data loading and preprocessing\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s5e4/test.csv')\n",
    "test.Episode_Length_minutes = test.Episode_Length_minutes.fillna(test.Episode_Length_minutes.mean())\n",
    "test.Guest_Popularity_percentage = test.Guest_Popularity_percentage.fillna(test.Guest_Popularity_percentage.mean())\n",
    "test.dropna(inplace=True)\n",
    "test.Episode_Title = test.Episode_Title.apply(lambda x: int(x.split(' ')[1]))\n",
    "\n",
    "test.Genre = genre_encoder.fit_transform(test[['Genre']])\n",
    "test.Publication_Day = Publication_Day_encoder.fit_transform(test[['Publication_Day']])\n",
    "test.Publication_Time = Publication_Time_encoder.fit_transform(test[['Publication_Time']])\n",
    "test.Episode_Sentiment = Episode_Sentiment_encoder.fit_transform(test[['Episode_Sentiment']])\n",
    "\n",
    "reserved_ids = test[['id']]\n",
    "test.drop(columns=['id','Podcast_Name','Guest_Popularity_percentage','Publication_Day','Genre'], inplace=True)\n",
    "\n",
    "scaled = scaler.transform(test)\n",
    "\n",
    "prediction = model.predict(scaled)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "eb7367cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:05:03.686906Z",
     "iopub.status.busy": "2025-04-04T09:05:03.686452Z",
     "iopub.status.idle": "2025-04-04T09:05:03.693953Z",
     "shell.execute_reply": "2025-04-04T09:05:03.692356Z"
    },
    "papermill": {
     "duration": 0.023488,
     "end_time": "2025-04-04T09:05:03.696122",
     "exception": false,
     "start_time": "2025-04-04T09:05:03.672634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "podcasts_submit_1_data = pd.DataFrame({'id':reserved_ids['id'], 'Listening_Time_minutes':prediction})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4bedf651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T09:05:03.723151Z",
     "iopub.status.busy": "2025-04-04T09:05:03.722663Z",
     "iopub.status.idle": "2025-04-04T09:05:04.187545Z",
     "shell.execute_reply": "2025-04-04T09:05:04.186403Z"
    },
    "papermill": {
     "duration": 0.481104,
     "end_time": "2025-04-04T09:05:04.189823",
     "exception": false,
     "start_time": "2025-04-04T09:05:03.708719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "podcasts_submit_1_data.to_csv('podcasts_submission_1.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c860f6d",
   "metadata": {
    "papermill": {
     "duration": 0.012965,
     "end_time": "2025-04-04T09:05:04.215578",
     "exception": false,
     "start_time": "2025-04-04T09:05:04.202613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38c3edf2",
   "metadata": {
    "papermill": {
     "duration": 0.011966,
     "end_time": "2025-04-04T09:05:04.239880",
     "exception": false,
     "start_time": "2025-04-04T09:05:04.227914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad1d3f3e",
   "metadata": {
    "papermill": {
     "duration": 0.011793,
     "end_time": "2025-04-04T09:05:04.264020",
     "exception": false,
     "start_time": "2025-04-04T09:05:04.252227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d140d8b0",
   "metadata": {
    "papermill": {
     "duration": 0.086057,
     "end_time": "2025-04-04T09:05:04.363406",
     "exception": false,
     "start_time": "2025-04-04T09:05:04.277349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a6cda90",
   "metadata": {
    "papermill": {
     "duration": 0.011992,
     "end_time": "2025-04-04T09:05:04.387885",
     "exception": false,
     "start_time": "2025-04-04T09:05:04.375893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11351736,
     "sourceId": 91715,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 39.593257,
   "end_time": "2025-04-04T09:05:05.426108",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-04T09:04:25.832851",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
